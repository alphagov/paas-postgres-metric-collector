// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatch"
	"github.com/aws/aws-sdk-go/service/cloudwatch/cloudwatchiface"
)

type FakeCloudWatchAPI struct {
	DeleteAlarmsStub        func(*cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error)
	deleteAlarmsMutex       sync.RWMutex
	deleteAlarmsArgsForCall []struct {
		arg1 *cloudwatch.DeleteAlarmsInput
	}
	deleteAlarmsReturns struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}
	deleteAlarmsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}
	DeleteAlarmsRequestStub        func(*cloudwatch.DeleteAlarmsInput) (*request.Request, *cloudwatch.DeleteAlarmsOutput)
	deleteAlarmsRequestMutex       sync.RWMutex
	deleteAlarmsRequestArgsForCall []struct {
		arg1 *cloudwatch.DeleteAlarmsInput
	}
	deleteAlarmsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAlarmsOutput
	}
	deleteAlarmsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAlarmsOutput
	}
	DeleteAlarmsWithContextStub        func(context.Context, *cloudwatch.DeleteAlarmsInput, ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error)
	deleteAlarmsWithContextMutex       sync.RWMutex
	deleteAlarmsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteAlarmsInput
		arg3 []request.Option
	}
	deleteAlarmsWithContextReturns struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}
	deleteAlarmsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}
	DeleteAnomalyDetectorStub        func(*cloudwatch.DeleteAnomalyDetectorInput) (*cloudwatch.DeleteAnomalyDetectorOutput, error)
	deleteAnomalyDetectorMutex       sync.RWMutex
	deleteAnomalyDetectorArgsForCall []struct {
		arg1 *cloudwatch.DeleteAnomalyDetectorInput
	}
	deleteAnomalyDetectorReturns struct {
		result1 *cloudwatch.DeleteAnomalyDetectorOutput
		result2 error
	}
	deleteAnomalyDetectorReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteAnomalyDetectorOutput
		result2 error
	}
	DeleteAnomalyDetectorRequestStub        func(*cloudwatch.DeleteAnomalyDetectorInput) (*request.Request, *cloudwatch.DeleteAnomalyDetectorOutput)
	deleteAnomalyDetectorRequestMutex       sync.RWMutex
	deleteAnomalyDetectorRequestArgsForCall []struct {
		arg1 *cloudwatch.DeleteAnomalyDetectorInput
	}
	deleteAnomalyDetectorRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAnomalyDetectorOutput
	}
	deleteAnomalyDetectorRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAnomalyDetectorOutput
	}
	DeleteAnomalyDetectorWithContextStub        func(context.Context, *cloudwatch.DeleteAnomalyDetectorInput, ...request.Option) (*cloudwatch.DeleteAnomalyDetectorOutput, error)
	deleteAnomalyDetectorWithContextMutex       sync.RWMutex
	deleteAnomalyDetectorWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteAnomalyDetectorInput
		arg3 []request.Option
	}
	deleteAnomalyDetectorWithContextReturns struct {
		result1 *cloudwatch.DeleteAnomalyDetectorOutput
		result2 error
	}
	deleteAnomalyDetectorWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteAnomalyDetectorOutput
		result2 error
	}
	DeleteDashboardsStub        func(*cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error)
	deleteDashboardsMutex       sync.RWMutex
	deleteDashboardsArgsForCall []struct {
		arg1 *cloudwatch.DeleteDashboardsInput
	}
	deleteDashboardsReturns struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}
	deleteDashboardsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}
	DeleteDashboardsRequestStub        func(*cloudwatch.DeleteDashboardsInput) (*request.Request, *cloudwatch.DeleteDashboardsOutput)
	deleteDashboardsRequestMutex       sync.RWMutex
	deleteDashboardsRequestArgsForCall []struct {
		arg1 *cloudwatch.DeleteDashboardsInput
	}
	deleteDashboardsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteDashboardsOutput
	}
	deleteDashboardsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteDashboardsOutput
	}
	DeleteDashboardsWithContextStub        func(context.Context, *cloudwatch.DeleteDashboardsInput, ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error)
	deleteDashboardsWithContextMutex       sync.RWMutex
	deleteDashboardsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteDashboardsInput
		arg3 []request.Option
	}
	deleteDashboardsWithContextReturns struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}
	deleteDashboardsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}
	DeleteInsightRulesStub        func(*cloudwatch.DeleteInsightRulesInput) (*cloudwatch.DeleteInsightRulesOutput, error)
	deleteInsightRulesMutex       sync.RWMutex
	deleteInsightRulesArgsForCall []struct {
		arg1 *cloudwatch.DeleteInsightRulesInput
	}
	deleteInsightRulesReturns struct {
		result1 *cloudwatch.DeleteInsightRulesOutput
		result2 error
	}
	deleteInsightRulesReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteInsightRulesOutput
		result2 error
	}
	DeleteInsightRulesRequestStub        func(*cloudwatch.DeleteInsightRulesInput) (*request.Request, *cloudwatch.DeleteInsightRulesOutput)
	deleteInsightRulesRequestMutex       sync.RWMutex
	deleteInsightRulesRequestArgsForCall []struct {
		arg1 *cloudwatch.DeleteInsightRulesInput
	}
	deleteInsightRulesRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteInsightRulesOutput
	}
	deleteInsightRulesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteInsightRulesOutput
	}
	DeleteInsightRulesWithContextStub        func(context.Context, *cloudwatch.DeleteInsightRulesInput, ...request.Option) (*cloudwatch.DeleteInsightRulesOutput, error)
	deleteInsightRulesWithContextMutex       sync.RWMutex
	deleteInsightRulesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteInsightRulesInput
		arg3 []request.Option
	}
	deleteInsightRulesWithContextReturns struct {
		result1 *cloudwatch.DeleteInsightRulesOutput
		result2 error
	}
	deleteInsightRulesWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteInsightRulesOutput
		result2 error
	}
	DeleteMetricStreamStub        func(*cloudwatch.DeleteMetricStreamInput) (*cloudwatch.DeleteMetricStreamOutput, error)
	deleteMetricStreamMutex       sync.RWMutex
	deleteMetricStreamArgsForCall []struct {
		arg1 *cloudwatch.DeleteMetricStreamInput
	}
	deleteMetricStreamReturns struct {
		result1 *cloudwatch.DeleteMetricStreamOutput
		result2 error
	}
	deleteMetricStreamReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteMetricStreamOutput
		result2 error
	}
	DeleteMetricStreamRequestStub        func(*cloudwatch.DeleteMetricStreamInput) (*request.Request, *cloudwatch.DeleteMetricStreamOutput)
	deleteMetricStreamRequestMutex       sync.RWMutex
	deleteMetricStreamRequestArgsForCall []struct {
		arg1 *cloudwatch.DeleteMetricStreamInput
	}
	deleteMetricStreamRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteMetricStreamOutput
	}
	deleteMetricStreamRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteMetricStreamOutput
	}
	DeleteMetricStreamWithContextStub        func(context.Context, *cloudwatch.DeleteMetricStreamInput, ...request.Option) (*cloudwatch.DeleteMetricStreamOutput, error)
	deleteMetricStreamWithContextMutex       sync.RWMutex
	deleteMetricStreamWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteMetricStreamInput
		arg3 []request.Option
	}
	deleteMetricStreamWithContextReturns struct {
		result1 *cloudwatch.DeleteMetricStreamOutput
		result2 error
	}
	deleteMetricStreamWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteMetricStreamOutput
		result2 error
	}
	DescribeAlarmHistoryStub        func(*cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error)
	describeAlarmHistoryMutex       sync.RWMutex
	describeAlarmHistoryArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
	}
	describeAlarmHistoryReturns struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}
	describeAlarmHistoryReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}
	DescribeAlarmHistoryPagesStub        func(*cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) error
	describeAlarmHistoryPagesMutex       sync.RWMutex
	describeAlarmHistoryPagesArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
		arg2 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool
	}
	describeAlarmHistoryPagesReturns struct {
		result1 error
	}
	describeAlarmHistoryPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAlarmHistoryPagesWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, ...request.Option) error
	describeAlarmHistoryPagesWithContextMutex       sync.RWMutex
	describeAlarmHistoryPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmHistoryInput
		arg3 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool
		arg4 []request.Option
	}
	describeAlarmHistoryPagesWithContextReturns struct {
		result1 error
	}
	describeAlarmHistoryPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAlarmHistoryRequestStub        func(*cloudwatch.DescribeAlarmHistoryInput) (*request.Request, *cloudwatch.DescribeAlarmHistoryOutput)
	describeAlarmHistoryRequestMutex       sync.RWMutex
	describeAlarmHistoryRequestArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
	}
	describeAlarmHistoryRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmHistoryOutput
	}
	describeAlarmHistoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmHistoryOutput
	}
	DescribeAlarmHistoryWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error)
	describeAlarmHistoryWithContextMutex       sync.RWMutex
	describeAlarmHistoryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmHistoryInput
		arg3 []request.Option
	}
	describeAlarmHistoryWithContextReturns struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}
	describeAlarmHistoryWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}
	DescribeAlarmsStub        func(*cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error)
	describeAlarmsMutex       sync.RWMutex
	describeAlarmsArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}
	describeAlarmsReturns struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}
	describeAlarmsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}
	DescribeAlarmsForMetricStub        func(*cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error)
	describeAlarmsForMetricMutex       sync.RWMutex
	describeAlarmsForMetricArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsForMetricInput
	}
	describeAlarmsForMetricReturns struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}
	describeAlarmsForMetricReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}
	DescribeAlarmsForMetricRequestStub        func(*cloudwatch.DescribeAlarmsForMetricInput) (*request.Request, *cloudwatch.DescribeAlarmsForMetricOutput)
	describeAlarmsForMetricRequestMutex       sync.RWMutex
	describeAlarmsForMetricRequestArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsForMetricInput
	}
	describeAlarmsForMetricRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsForMetricOutput
	}
	describeAlarmsForMetricRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsForMetricOutput
	}
	DescribeAlarmsForMetricWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsForMetricInput, ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error)
	describeAlarmsForMetricWithContextMutex       sync.RWMutex
	describeAlarmsForMetricWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsForMetricInput
		arg3 []request.Option
	}
	describeAlarmsForMetricWithContextReturns struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}
	describeAlarmsForMetricWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}
	DescribeAlarmsPagesStub        func(*cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool) error
	describeAlarmsPagesMutex       sync.RWMutex
	describeAlarmsPagesArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
		arg2 func(*cloudwatch.DescribeAlarmsOutput, bool) bool
	}
	describeAlarmsPagesReturns struct {
		result1 error
	}
	describeAlarmsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAlarmsPagesWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool, ...request.Option) error
	describeAlarmsPagesWithContextMutex       sync.RWMutex
	describeAlarmsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 func(*cloudwatch.DescribeAlarmsOutput, bool) bool
		arg4 []request.Option
	}
	describeAlarmsPagesWithContextReturns struct {
		result1 error
	}
	describeAlarmsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAlarmsRequestStub        func(*cloudwatch.DescribeAlarmsInput) (*request.Request, *cloudwatch.DescribeAlarmsOutput)
	describeAlarmsRequestMutex       sync.RWMutex
	describeAlarmsRequestArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}
	describeAlarmsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsOutput
	}
	describeAlarmsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsOutput
	}
	DescribeAlarmsWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error)
	describeAlarmsWithContextMutex       sync.RWMutex
	describeAlarmsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.Option
	}
	describeAlarmsWithContextReturns struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}
	describeAlarmsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}
	DescribeAnomalyDetectorsStub        func(*cloudwatch.DescribeAnomalyDetectorsInput) (*cloudwatch.DescribeAnomalyDetectorsOutput, error)
	describeAnomalyDetectorsMutex       sync.RWMutex
	describeAnomalyDetectorsArgsForCall []struct {
		arg1 *cloudwatch.DescribeAnomalyDetectorsInput
	}
	describeAnomalyDetectorsReturns struct {
		result1 *cloudwatch.DescribeAnomalyDetectorsOutput
		result2 error
	}
	describeAnomalyDetectorsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAnomalyDetectorsOutput
		result2 error
	}
	DescribeAnomalyDetectorsPagesStub        func(*cloudwatch.DescribeAnomalyDetectorsInput, func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool) error
	describeAnomalyDetectorsPagesMutex       sync.RWMutex
	describeAnomalyDetectorsPagesArgsForCall []struct {
		arg1 *cloudwatch.DescribeAnomalyDetectorsInput
		arg2 func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool
	}
	describeAnomalyDetectorsPagesReturns struct {
		result1 error
	}
	describeAnomalyDetectorsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAnomalyDetectorsPagesWithContextStub        func(context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool, ...request.Option) error
	describeAnomalyDetectorsPagesWithContextMutex       sync.RWMutex
	describeAnomalyDetectorsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAnomalyDetectorsInput
		arg3 func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool
		arg4 []request.Option
	}
	describeAnomalyDetectorsPagesWithContextReturns struct {
		result1 error
	}
	describeAnomalyDetectorsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAnomalyDetectorsRequestStub        func(*cloudwatch.DescribeAnomalyDetectorsInput) (*request.Request, *cloudwatch.DescribeAnomalyDetectorsOutput)
	describeAnomalyDetectorsRequestMutex       sync.RWMutex
	describeAnomalyDetectorsRequestArgsForCall []struct {
		arg1 *cloudwatch.DescribeAnomalyDetectorsInput
	}
	describeAnomalyDetectorsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAnomalyDetectorsOutput
	}
	describeAnomalyDetectorsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAnomalyDetectorsOutput
	}
	DescribeAnomalyDetectorsWithContextStub        func(context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, ...request.Option) (*cloudwatch.DescribeAnomalyDetectorsOutput, error)
	describeAnomalyDetectorsWithContextMutex       sync.RWMutex
	describeAnomalyDetectorsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAnomalyDetectorsInput
		arg3 []request.Option
	}
	describeAnomalyDetectorsWithContextReturns struct {
		result1 *cloudwatch.DescribeAnomalyDetectorsOutput
		result2 error
	}
	describeAnomalyDetectorsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAnomalyDetectorsOutput
		result2 error
	}
	DescribeInsightRulesStub        func(*cloudwatch.DescribeInsightRulesInput) (*cloudwatch.DescribeInsightRulesOutput, error)
	describeInsightRulesMutex       sync.RWMutex
	describeInsightRulesArgsForCall []struct {
		arg1 *cloudwatch.DescribeInsightRulesInput
	}
	describeInsightRulesReturns struct {
		result1 *cloudwatch.DescribeInsightRulesOutput
		result2 error
	}
	describeInsightRulesReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeInsightRulesOutput
		result2 error
	}
	DescribeInsightRulesPagesStub        func(*cloudwatch.DescribeInsightRulesInput, func(*cloudwatch.DescribeInsightRulesOutput, bool) bool) error
	describeInsightRulesPagesMutex       sync.RWMutex
	describeInsightRulesPagesArgsForCall []struct {
		arg1 *cloudwatch.DescribeInsightRulesInput
		arg2 func(*cloudwatch.DescribeInsightRulesOutput, bool) bool
	}
	describeInsightRulesPagesReturns struct {
		result1 error
	}
	describeInsightRulesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInsightRulesPagesWithContextStub        func(context.Context, *cloudwatch.DescribeInsightRulesInput, func(*cloudwatch.DescribeInsightRulesOutput, bool) bool, ...request.Option) error
	describeInsightRulesPagesWithContextMutex       sync.RWMutex
	describeInsightRulesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeInsightRulesInput
		arg3 func(*cloudwatch.DescribeInsightRulesOutput, bool) bool
		arg4 []request.Option
	}
	describeInsightRulesPagesWithContextReturns struct {
		result1 error
	}
	describeInsightRulesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInsightRulesRequestStub        func(*cloudwatch.DescribeInsightRulesInput) (*request.Request, *cloudwatch.DescribeInsightRulesOutput)
	describeInsightRulesRequestMutex       sync.RWMutex
	describeInsightRulesRequestArgsForCall []struct {
		arg1 *cloudwatch.DescribeInsightRulesInput
	}
	describeInsightRulesRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeInsightRulesOutput
	}
	describeInsightRulesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeInsightRulesOutput
	}
	DescribeInsightRulesWithContextStub        func(context.Context, *cloudwatch.DescribeInsightRulesInput, ...request.Option) (*cloudwatch.DescribeInsightRulesOutput, error)
	describeInsightRulesWithContextMutex       sync.RWMutex
	describeInsightRulesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeInsightRulesInput
		arg3 []request.Option
	}
	describeInsightRulesWithContextReturns struct {
		result1 *cloudwatch.DescribeInsightRulesOutput
		result2 error
	}
	describeInsightRulesWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeInsightRulesOutput
		result2 error
	}
	DisableAlarmActionsStub        func(*cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error)
	disableAlarmActionsMutex       sync.RWMutex
	disableAlarmActionsArgsForCall []struct {
		arg1 *cloudwatch.DisableAlarmActionsInput
	}
	disableAlarmActionsReturns struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}
	disableAlarmActionsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}
	DisableAlarmActionsRequestStub        func(*cloudwatch.DisableAlarmActionsInput) (*request.Request, *cloudwatch.DisableAlarmActionsOutput)
	disableAlarmActionsRequestMutex       sync.RWMutex
	disableAlarmActionsRequestArgsForCall []struct {
		arg1 *cloudwatch.DisableAlarmActionsInput
	}
	disableAlarmActionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DisableAlarmActionsOutput
	}
	disableAlarmActionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DisableAlarmActionsOutput
	}
	DisableAlarmActionsWithContextStub        func(context.Context, *cloudwatch.DisableAlarmActionsInput, ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error)
	disableAlarmActionsWithContextMutex       sync.RWMutex
	disableAlarmActionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DisableAlarmActionsInput
		arg3 []request.Option
	}
	disableAlarmActionsWithContextReturns struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}
	disableAlarmActionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}
	DisableInsightRulesStub        func(*cloudwatch.DisableInsightRulesInput) (*cloudwatch.DisableInsightRulesOutput, error)
	disableInsightRulesMutex       sync.RWMutex
	disableInsightRulesArgsForCall []struct {
		arg1 *cloudwatch.DisableInsightRulesInput
	}
	disableInsightRulesReturns struct {
		result1 *cloudwatch.DisableInsightRulesOutput
		result2 error
	}
	disableInsightRulesReturnsOnCall map[int]struct {
		result1 *cloudwatch.DisableInsightRulesOutput
		result2 error
	}
	DisableInsightRulesRequestStub        func(*cloudwatch.DisableInsightRulesInput) (*request.Request, *cloudwatch.DisableInsightRulesOutput)
	disableInsightRulesRequestMutex       sync.RWMutex
	disableInsightRulesRequestArgsForCall []struct {
		arg1 *cloudwatch.DisableInsightRulesInput
	}
	disableInsightRulesRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DisableInsightRulesOutput
	}
	disableInsightRulesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DisableInsightRulesOutput
	}
	DisableInsightRulesWithContextStub        func(context.Context, *cloudwatch.DisableInsightRulesInput, ...request.Option) (*cloudwatch.DisableInsightRulesOutput, error)
	disableInsightRulesWithContextMutex       sync.RWMutex
	disableInsightRulesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DisableInsightRulesInput
		arg3 []request.Option
	}
	disableInsightRulesWithContextReturns struct {
		result1 *cloudwatch.DisableInsightRulesOutput
		result2 error
	}
	disableInsightRulesWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DisableInsightRulesOutput
		result2 error
	}
	EnableAlarmActionsStub        func(*cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error)
	enableAlarmActionsMutex       sync.RWMutex
	enableAlarmActionsArgsForCall []struct {
		arg1 *cloudwatch.EnableAlarmActionsInput
	}
	enableAlarmActionsReturns struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}
	enableAlarmActionsReturnsOnCall map[int]struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}
	EnableAlarmActionsRequestStub        func(*cloudwatch.EnableAlarmActionsInput) (*request.Request, *cloudwatch.EnableAlarmActionsOutput)
	enableAlarmActionsRequestMutex       sync.RWMutex
	enableAlarmActionsRequestArgsForCall []struct {
		arg1 *cloudwatch.EnableAlarmActionsInput
	}
	enableAlarmActionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.EnableAlarmActionsOutput
	}
	enableAlarmActionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.EnableAlarmActionsOutput
	}
	EnableAlarmActionsWithContextStub        func(context.Context, *cloudwatch.EnableAlarmActionsInput, ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error)
	enableAlarmActionsWithContextMutex       sync.RWMutex
	enableAlarmActionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.EnableAlarmActionsInput
		arg3 []request.Option
	}
	enableAlarmActionsWithContextReturns struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}
	enableAlarmActionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}
	EnableInsightRulesStub        func(*cloudwatch.EnableInsightRulesInput) (*cloudwatch.EnableInsightRulesOutput, error)
	enableInsightRulesMutex       sync.RWMutex
	enableInsightRulesArgsForCall []struct {
		arg1 *cloudwatch.EnableInsightRulesInput
	}
	enableInsightRulesReturns struct {
		result1 *cloudwatch.EnableInsightRulesOutput
		result2 error
	}
	enableInsightRulesReturnsOnCall map[int]struct {
		result1 *cloudwatch.EnableInsightRulesOutput
		result2 error
	}
	EnableInsightRulesRequestStub        func(*cloudwatch.EnableInsightRulesInput) (*request.Request, *cloudwatch.EnableInsightRulesOutput)
	enableInsightRulesRequestMutex       sync.RWMutex
	enableInsightRulesRequestArgsForCall []struct {
		arg1 *cloudwatch.EnableInsightRulesInput
	}
	enableInsightRulesRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.EnableInsightRulesOutput
	}
	enableInsightRulesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.EnableInsightRulesOutput
	}
	EnableInsightRulesWithContextStub        func(context.Context, *cloudwatch.EnableInsightRulesInput, ...request.Option) (*cloudwatch.EnableInsightRulesOutput, error)
	enableInsightRulesWithContextMutex       sync.RWMutex
	enableInsightRulesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.EnableInsightRulesInput
		arg3 []request.Option
	}
	enableInsightRulesWithContextReturns struct {
		result1 *cloudwatch.EnableInsightRulesOutput
		result2 error
	}
	enableInsightRulesWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.EnableInsightRulesOutput
		result2 error
	}
	GetDashboardStub        func(*cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error)
	getDashboardMutex       sync.RWMutex
	getDashboardArgsForCall []struct {
		arg1 *cloudwatch.GetDashboardInput
	}
	getDashboardReturns struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}
	getDashboardReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}
	GetDashboardRequestStub        func(*cloudwatch.GetDashboardInput) (*request.Request, *cloudwatch.GetDashboardOutput)
	getDashboardRequestMutex       sync.RWMutex
	getDashboardRequestArgsForCall []struct {
		arg1 *cloudwatch.GetDashboardInput
	}
	getDashboardRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetDashboardOutput
	}
	getDashboardRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetDashboardOutput
	}
	GetDashboardWithContextStub        func(context.Context, *cloudwatch.GetDashboardInput, ...request.Option) (*cloudwatch.GetDashboardOutput, error)
	getDashboardWithContextMutex       sync.RWMutex
	getDashboardWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetDashboardInput
		arg3 []request.Option
	}
	getDashboardWithContextReturns struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}
	getDashboardWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}
	GetInsightRuleReportStub        func(*cloudwatch.GetInsightRuleReportInput) (*cloudwatch.GetInsightRuleReportOutput, error)
	getInsightRuleReportMutex       sync.RWMutex
	getInsightRuleReportArgsForCall []struct {
		arg1 *cloudwatch.GetInsightRuleReportInput
	}
	getInsightRuleReportReturns struct {
		result1 *cloudwatch.GetInsightRuleReportOutput
		result2 error
	}
	getInsightRuleReportReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetInsightRuleReportOutput
		result2 error
	}
	GetInsightRuleReportRequestStub        func(*cloudwatch.GetInsightRuleReportInput) (*request.Request, *cloudwatch.GetInsightRuleReportOutput)
	getInsightRuleReportRequestMutex       sync.RWMutex
	getInsightRuleReportRequestArgsForCall []struct {
		arg1 *cloudwatch.GetInsightRuleReportInput
	}
	getInsightRuleReportRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetInsightRuleReportOutput
	}
	getInsightRuleReportRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetInsightRuleReportOutput
	}
	GetInsightRuleReportWithContextStub        func(context.Context, *cloudwatch.GetInsightRuleReportInput, ...request.Option) (*cloudwatch.GetInsightRuleReportOutput, error)
	getInsightRuleReportWithContextMutex       sync.RWMutex
	getInsightRuleReportWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetInsightRuleReportInput
		arg3 []request.Option
	}
	getInsightRuleReportWithContextReturns struct {
		result1 *cloudwatch.GetInsightRuleReportOutput
		result2 error
	}
	getInsightRuleReportWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetInsightRuleReportOutput
		result2 error
	}
	GetMetricDataStub        func(*cloudwatch.GetMetricDataInput) (*cloudwatch.GetMetricDataOutput, error)
	getMetricDataMutex       sync.RWMutex
	getMetricDataArgsForCall []struct {
		arg1 *cloudwatch.GetMetricDataInput
	}
	getMetricDataReturns struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}
	getMetricDataReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}
	GetMetricDataPagesStub        func(*cloudwatch.GetMetricDataInput, func(*cloudwatch.GetMetricDataOutput, bool) bool) error
	getMetricDataPagesMutex       sync.RWMutex
	getMetricDataPagesArgsForCall []struct {
		arg1 *cloudwatch.GetMetricDataInput
		arg2 func(*cloudwatch.GetMetricDataOutput, bool) bool
	}
	getMetricDataPagesReturns struct {
		result1 error
	}
	getMetricDataPagesReturnsOnCall map[int]struct {
		result1 error
	}
	GetMetricDataPagesWithContextStub        func(context.Context, *cloudwatch.GetMetricDataInput, func(*cloudwatch.GetMetricDataOutput, bool) bool, ...request.Option) error
	getMetricDataPagesWithContextMutex       sync.RWMutex
	getMetricDataPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricDataInput
		arg3 func(*cloudwatch.GetMetricDataOutput, bool) bool
		arg4 []request.Option
	}
	getMetricDataPagesWithContextReturns struct {
		result1 error
	}
	getMetricDataPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	GetMetricDataRequestStub        func(*cloudwatch.GetMetricDataInput) (*request.Request, *cloudwatch.GetMetricDataOutput)
	getMetricDataRequestMutex       sync.RWMutex
	getMetricDataRequestArgsForCall []struct {
		arg1 *cloudwatch.GetMetricDataInput
	}
	getMetricDataRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricDataOutput
	}
	getMetricDataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricDataOutput
	}
	GetMetricDataWithContextStub        func(context.Context, *cloudwatch.GetMetricDataInput, ...request.Option) (*cloudwatch.GetMetricDataOutput, error)
	getMetricDataWithContextMutex       sync.RWMutex
	getMetricDataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricDataInput
		arg3 []request.Option
	}
	getMetricDataWithContextReturns struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}
	getMetricDataWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}
	GetMetricStatisticsStub        func(*cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error)
	getMetricStatisticsMutex       sync.RWMutex
	getMetricStatisticsArgsForCall []struct {
		arg1 *cloudwatch.GetMetricStatisticsInput
	}
	getMetricStatisticsReturns struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}
	getMetricStatisticsReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}
	GetMetricStatisticsRequestStub        func(*cloudwatch.GetMetricStatisticsInput) (*request.Request, *cloudwatch.GetMetricStatisticsOutput)
	getMetricStatisticsRequestMutex       sync.RWMutex
	getMetricStatisticsRequestArgsForCall []struct {
		arg1 *cloudwatch.GetMetricStatisticsInput
	}
	getMetricStatisticsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStatisticsOutput
	}
	getMetricStatisticsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStatisticsOutput
	}
	GetMetricStatisticsWithContextStub        func(context.Context, *cloudwatch.GetMetricStatisticsInput, ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error)
	getMetricStatisticsWithContextMutex       sync.RWMutex
	getMetricStatisticsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricStatisticsInput
		arg3 []request.Option
	}
	getMetricStatisticsWithContextReturns struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}
	getMetricStatisticsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}
	GetMetricStreamStub        func(*cloudwatch.GetMetricStreamInput) (*cloudwatch.GetMetricStreamOutput, error)
	getMetricStreamMutex       sync.RWMutex
	getMetricStreamArgsForCall []struct {
		arg1 *cloudwatch.GetMetricStreamInput
	}
	getMetricStreamReturns struct {
		result1 *cloudwatch.GetMetricStreamOutput
		result2 error
	}
	getMetricStreamReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricStreamOutput
		result2 error
	}
	GetMetricStreamRequestStub        func(*cloudwatch.GetMetricStreamInput) (*request.Request, *cloudwatch.GetMetricStreamOutput)
	getMetricStreamRequestMutex       sync.RWMutex
	getMetricStreamRequestArgsForCall []struct {
		arg1 *cloudwatch.GetMetricStreamInput
	}
	getMetricStreamRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStreamOutput
	}
	getMetricStreamRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStreamOutput
	}
	GetMetricStreamWithContextStub        func(context.Context, *cloudwatch.GetMetricStreamInput, ...request.Option) (*cloudwatch.GetMetricStreamOutput, error)
	getMetricStreamWithContextMutex       sync.RWMutex
	getMetricStreamWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricStreamInput
		arg3 []request.Option
	}
	getMetricStreamWithContextReturns struct {
		result1 *cloudwatch.GetMetricStreamOutput
		result2 error
	}
	getMetricStreamWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricStreamOutput
		result2 error
	}
	GetMetricWidgetImageStub        func(*cloudwatch.GetMetricWidgetImageInput) (*cloudwatch.GetMetricWidgetImageOutput, error)
	getMetricWidgetImageMutex       sync.RWMutex
	getMetricWidgetImageArgsForCall []struct {
		arg1 *cloudwatch.GetMetricWidgetImageInput
	}
	getMetricWidgetImageReturns struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}
	getMetricWidgetImageReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}
	GetMetricWidgetImageRequestStub        func(*cloudwatch.GetMetricWidgetImageInput) (*request.Request, *cloudwatch.GetMetricWidgetImageOutput)
	getMetricWidgetImageRequestMutex       sync.RWMutex
	getMetricWidgetImageRequestArgsForCall []struct {
		arg1 *cloudwatch.GetMetricWidgetImageInput
	}
	getMetricWidgetImageRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricWidgetImageOutput
	}
	getMetricWidgetImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricWidgetImageOutput
	}
	GetMetricWidgetImageWithContextStub        func(context.Context, *cloudwatch.GetMetricWidgetImageInput, ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error)
	getMetricWidgetImageWithContextMutex       sync.RWMutex
	getMetricWidgetImageWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricWidgetImageInput
		arg3 []request.Option
	}
	getMetricWidgetImageWithContextReturns struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}
	getMetricWidgetImageWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}
	ListDashboardsStub        func(*cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error)
	listDashboardsMutex       sync.RWMutex
	listDashboardsArgsForCall []struct {
		arg1 *cloudwatch.ListDashboardsInput
	}
	listDashboardsReturns struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}
	listDashboardsReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}
	ListDashboardsPagesStub        func(*cloudwatch.ListDashboardsInput, func(*cloudwatch.ListDashboardsOutput, bool) bool) error
	listDashboardsPagesMutex       sync.RWMutex
	listDashboardsPagesArgsForCall []struct {
		arg1 *cloudwatch.ListDashboardsInput
		arg2 func(*cloudwatch.ListDashboardsOutput, bool) bool
	}
	listDashboardsPagesReturns struct {
		result1 error
	}
	listDashboardsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListDashboardsPagesWithContextStub        func(context.Context, *cloudwatch.ListDashboardsInput, func(*cloudwatch.ListDashboardsOutput, bool) bool, ...request.Option) error
	listDashboardsPagesWithContextMutex       sync.RWMutex
	listDashboardsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListDashboardsInput
		arg3 func(*cloudwatch.ListDashboardsOutput, bool) bool
		arg4 []request.Option
	}
	listDashboardsPagesWithContextReturns struct {
		result1 error
	}
	listDashboardsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListDashboardsRequestStub        func(*cloudwatch.ListDashboardsInput) (*request.Request, *cloudwatch.ListDashboardsOutput)
	listDashboardsRequestMutex       sync.RWMutex
	listDashboardsRequestArgsForCall []struct {
		arg1 *cloudwatch.ListDashboardsInput
	}
	listDashboardsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.ListDashboardsOutput
	}
	listDashboardsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.ListDashboardsOutput
	}
	ListDashboardsWithContextStub        func(context.Context, *cloudwatch.ListDashboardsInput, ...request.Option) (*cloudwatch.ListDashboardsOutput, error)
	listDashboardsWithContextMutex       sync.RWMutex
	listDashboardsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListDashboardsInput
		arg3 []request.Option
	}
	listDashboardsWithContextReturns struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}
	listDashboardsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}
	ListManagedInsightRulesStub        func(*cloudwatch.ListManagedInsightRulesInput) (*cloudwatch.ListManagedInsightRulesOutput, error)
	listManagedInsightRulesMutex       sync.RWMutex
	listManagedInsightRulesArgsForCall []struct {
		arg1 *cloudwatch.ListManagedInsightRulesInput
	}
	listManagedInsightRulesReturns struct {
		result1 *cloudwatch.ListManagedInsightRulesOutput
		result2 error
	}
	listManagedInsightRulesReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListManagedInsightRulesOutput
		result2 error
	}
	ListManagedInsightRulesPagesStub        func(*cloudwatch.ListManagedInsightRulesInput, func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool) error
	listManagedInsightRulesPagesMutex       sync.RWMutex
	listManagedInsightRulesPagesArgsForCall []struct {
		arg1 *cloudwatch.ListManagedInsightRulesInput
		arg2 func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool
	}
	listManagedInsightRulesPagesReturns struct {
		result1 error
	}
	listManagedInsightRulesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListManagedInsightRulesPagesWithContextStub        func(context.Context, *cloudwatch.ListManagedInsightRulesInput, func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool, ...request.Option) error
	listManagedInsightRulesPagesWithContextMutex       sync.RWMutex
	listManagedInsightRulesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListManagedInsightRulesInput
		arg3 func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool
		arg4 []request.Option
	}
	listManagedInsightRulesPagesWithContextReturns struct {
		result1 error
	}
	listManagedInsightRulesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListManagedInsightRulesRequestStub        func(*cloudwatch.ListManagedInsightRulesInput) (*request.Request, *cloudwatch.ListManagedInsightRulesOutput)
	listManagedInsightRulesRequestMutex       sync.RWMutex
	listManagedInsightRulesRequestArgsForCall []struct {
		arg1 *cloudwatch.ListManagedInsightRulesInput
	}
	listManagedInsightRulesRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.ListManagedInsightRulesOutput
	}
	listManagedInsightRulesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.ListManagedInsightRulesOutput
	}
	ListManagedInsightRulesWithContextStub        func(context.Context, *cloudwatch.ListManagedInsightRulesInput, ...request.Option) (*cloudwatch.ListManagedInsightRulesOutput, error)
	listManagedInsightRulesWithContextMutex       sync.RWMutex
	listManagedInsightRulesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListManagedInsightRulesInput
		arg3 []request.Option
	}
	listManagedInsightRulesWithContextReturns struct {
		result1 *cloudwatch.ListManagedInsightRulesOutput
		result2 error
	}
	listManagedInsightRulesWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListManagedInsightRulesOutput
		result2 error
	}
	ListMetricStreamsStub        func(*cloudwatch.ListMetricStreamsInput) (*cloudwatch.ListMetricStreamsOutput, error)
	listMetricStreamsMutex       sync.RWMutex
	listMetricStreamsArgsForCall []struct {
		arg1 *cloudwatch.ListMetricStreamsInput
	}
	listMetricStreamsReturns struct {
		result1 *cloudwatch.ListMetricStreamsOutput
		result2 error
	}
	listMetricStreamsReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListMetricStreamsOutput
		result2 error
	}
	ListMetricStreamsPagesStub        func(*cloudwatch.ListMetricStreamsInput, func(*cloudwatch.ListMetricStreamsOutput, bool) bool) error
	listMetricStreamsPagesMutex       sync.RWMutex
	listMetricStreamsPagesArgsForCall []struct {
		arg1 *cloudwatch.ListMetricStreamsInput
		arg2 func(*cloudwatch.ListMetricStreamsOutput, bool) bool
	}
	listMetricStreamsPagesReturns struct {
		result1 error
	}
	listMetricStreamsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListMetricStreamsPagesWithContextStub        func(context.Context, *cloudwatch.ListMetricStreamsInput, func(*cloudwatch.ListMetricStreamsOutput, bool) bool, ...request.Option) error
	listMetricStreamsPagesWithContextMutex       sync.RWMutex
	listMetricStreamsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricStreamsInput
		arg3 func(*cloudwatch.ListMetricStreamsOutput, bool) bool
		arg4 []request.Option
	}
	listMetricStreamsPagesWithContextReturns struct {
		result1 error
	}
	listMetricStreamsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListMetricStreamsRequestStub        func(*cloudwatch.ListMetricStreamsInput) (*request.Request, *cloudwatch.ListMetricStreamsOutput)
	listMetricStreamsRequestMutex       sync.RWMutex
	listMetricStreamsRequestArgsForCall []struct {
		arg1 *cloudwatch.ListMetricStreamsInput
	}
	listMetricStreamsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricStreamsOutput
	}
	listMetricStreamsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricStreamsOutput
	}
	ListMetricStreamsWithContextStub        func(context.Context, *cloudwatch.ListMetricStreamsInput, ...request.Option) (*cloudwatch.ListMetricStreamsOutput, error)
	listMetricStreamsWithContextMutex       sync.RWMutex
	listMetricStreamsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricStreamsInput
		arg3 []request.Option
	}
	listMetricStreamsWithContextReturns struct {
		result1 *cloudwatch.ListMetricStreamsOutput
		result2 error
	}
	listMetricStreamsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListMetricStreamsOutput
		result2 error
	}
	ListMetricsStub        func(*cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error)
	listMetricsMutex       sync.RWMutex
	listMetricsArgsForCall []struct {
		arg1 *cloudwatch.ListMetricsInput
	}
	listMetricsReturns struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}
	listMetricsReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}
	ListMetricsPagesStub        func(*cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool) error
	listMetricsPagesMutex       sync.RWMutex
	listMetricsPagesArgsForCall []struct {
		arg1 *cloudwatch.ListMetricsInput
		arg2 func(*cloudwatch.ListMetricsOutput, bool) bool
	}
	listMetricsPagesReturns struct {
		result1 error
	}
	listMetricsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListMetricsPagesWithContextStub        func(context.Context, *cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool, ...request.Option) error
	listMetricsPagesWithContextMutex       sync.RWMutex
	listMetricsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricsInput
		arg3 func(*cloudwatch.ListMetricsOutput, bool) bool
		arg4 []request.Option
	}
	listMetricsPagesWithContextReturns struct {
		result1 error
	}
	listMetricsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListMetricsRequestStub        func(*cloudwatch.ListMetricsInput) (*request.Request, *cloudwatch.ListMetricsOutput)
	listMetricsRequestMutex       sync.RWMutex
	listMetricsRequestArgsForCall []struct {
		arg1 *cloudwatch.ListMetricsInput
	}
	listMetricsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricsOutput
	}
	listMetricsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricsOutput
	}
	ListMetricsWithContextStub        func(context.Context, *cloudwatch.ListMetricsInput, ...request.Option) (*cloudwatch.ListMetricsOutput, error)
	listMetricsWithContextMutex       sync.RWMutex
	listMetricsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricsInput
		arg3 []request.Option
	}
	listMetricsWithContextReturns struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}
	listMetricsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}
	ListTagsForResourceStub        func(*cloudwatch.ListTagsForResourceInput) (*cloudwatch.ListTagsForResourceOutput, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *cloudwatch.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *cloudwatch.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListTagsForResourceOutput
		result2 error
	}
	ListTagsForResourceRequestStub        func(*cloudwatch.ListTagsForResourceInput) (*request.Request, *cloudwatch.ListTagsForResourceOutput)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *cloudwatch.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.ListTagsForResourceOutput
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.ListTagsForResourceOutput
	}
	ListTagsForResourceWithContextStub        func(context.Context, *cloudwatch.ListTagsForResourceInput, ...request.Option) (*cloudwatch.ListTagsForResourceOutput, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *cloudwatch.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListTagsForResourceOutput
		result2 error
	}
	PutAnomalyDetectorStub        func(*cloudwatch.PutAnomalyDetectorInput) (*cloudwatch.PutAnomalyDetectorOutput, error)
	putAnomalyDetectorMutex       sync.RWMutex
	putAnomalyDetectorArgsForCall []struct {
		arg1 *cloudwatch.PutAnomalyDetectorInput
	}
	putAnomalyDetectorReturns struct {
		result1 *cloudwatch.PutAnomalyDetectorOutput
		result2 error
	}
	putAnomalyDetectorReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutAnomalyDetectorOutput
		result2 error
	}
	PutAnomalyDetectorRequestStub        func(*cloudwatch.PutAnomalyDetectorInput) (*request.Request, *cloudwatch.PutAnomalyDetectorOutput)
	putAnomalyDetectorRequestMutex       sync.RWMutex
	putAnomalyDetectorRequestArgsForCall []struct {
		arg1 *cloudwatch.PutAnomalyDetectorInput
	}
	putAnomalyDetectorRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutAnomalyDetectorOutput
	}
	putAnomalyDetectorRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutAnomalyDetectorOutput
	}
	PutAnomalyDetectorWithContextStub        func(context.Context, *cloudwatch.PutAnomalyDetectorInput, ...request.Option) (*cloudwatch.PutAnomalyDetectorOutput, error)
	putAnomalyDetectorWithContextMutex       sync.RWMutex
	putAnomalyDetectorWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutAnomalyDetectorInput
		arg3 []request.Option
	}
	putAnomalyDetectorWithContextReturns struct {
		result1 *cloudwatch.PutAnomalyDetectorOutput
		result2 error
	}
	putAnomalyDetectorWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutAnomalyDetectorOutput
		result2 error
	}
	PutCompositeAlarmStub        func(*cloudwatch.PutCompositeAlarmInput) (*cloudwatch.PutCompositeAlarmOutput, error)
	putCompositeAlarmMutex       sync.RWMutex
	putCompositeAlarmArgsForCall []struct {
		arg1 *cloudwatch.PutCompositeAlarmInput
	}
	putCompositeAlarmReturns struct {
		result1 *cloudwatch.PutCompositeAlarmOutput
		result2 error
	}
	putCompositeAlarmReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutCompositeAlarmOutput
		result2 error
	}
	PutCompositeAlarmRequestStub        func(*cloudwatch.PutCompositeAlarmInput) (*request.Request, *cloudwatch.PutCompositeAlarmOutput)
	putCompositeAlarmRequestMutex       sync.RWMutex
	putCompositeAlarmRequestArgsForCall []struct {
		arg1 *cloudwatch.PutCompositeAlarmInput
	}
	putCompositeAlarmRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutCompositeAlarmOutput
	}
	putCompositeAlarmRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutCompositeAlarmOutput
	}
	PutCompositeAlarmWithContextStub        func(context.Context, *cloudwatch.PutCompositeAlarmInput, ...request.Option) (*cloudwatch.PutCompositeAlarmOutput, error)
	putCompositeAlarmWithContextMutex       sync.RWMutex
	putCompositeAlarmWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutCompositeAlarmInput
		arg3 []request.Option
	}
	putCompositeAlarmWithContextReturns struct {
		result1 *cloudwatch.PutCompositeAlarmOutput
		result2 error
	}
	putCompositeAlarmWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutCompositeAlarmOutput
		result2 error
	}
	PutDashboardStub        func(*cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error)
	putDashboardMutex       sync.RWMutex
	putDashboardArgsForCall []struct {
		arg1 *cloudwatch.PutDashboardInput
	}
	putDashboardReturns struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}
	putDashboardReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}
	PutDashboardRequestStub        func(*cloudwatch.PutDashboardInput) (*request.Request, *cloudwatch.PutDashboardOutput)
	putDashboardRequestMutex       sync.RWMutex
	putDashboardRequestArgsForCall []struct {
		arg1 *cloudwatch.PutDashboardInput
	}
	putDashboardRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutDashboardOutput
	}
	putDashboardRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutDashboardOutput
	}
	PutDashboardWithContextStub        func(context.Context, *cloudwatch.PutDashboardInput, ...request.Option) (*cloudwatch.PutDashboardOutput, error)
	putDashboardWithContextMutex       sync.RWMutex
	putDashboardWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutDashboardInput
		arg3 []request.Option
	}
	putDashboardWithContextReturns struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}
	putDashboardWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}
	PutInsightRuleStub        func(*cloudwatch.PutInsightRuleInput) (*cloudwatch.PutInsightRuleOutput, error)
	putInsightRuleMutex       sync.RWMutex
	putInsightRuleArgsForCall []struct {
		arg1 *cloudwatch.PutInsightRuleInput
	}
	putInsightRuleReturns struct {
		result1 *cloudwatch.PutInsightRuleOutput
		result2 error
	}
	putInsightRuleReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutInsightRuleOutput
		result2 error
	}
	PutInsightRuleRequestStub        func(*cloudwatch.PutInsightRuleInput) (*request.Request, *cloudwatch.PutInsightRuleOutput)
	putInsightRuleRequestMutex       sync.RWMutex
	putInsightRuleRequestArgsForCall []struct {
		arg1 *cloudwatch.PutInsightRuleInput
	}
	putInsightRuleRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutInsightRuleOutput
	}
	putInsightRuleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutInsightRuleOutput
	}
	PutInsightRuleWithContextStub        func(context.Context, *cloudwatch.PutInsightRuleInput, ...request.Option) (*cloudwatch.PutInsightRuleOutput, error)
	putInsightRuleWithContextMutex       sync.RWMutex
	putInsightRuleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutInsightRuleInput
		arg3 []request.Option
	}
	putInsightRuleWithContextReturns struct {
		result1 *cloudwatch.PutInsightRuleOutput
		result2 error
	}
	putInsightRuleWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutInsightRuleOutput
		result2 error
	}
	PutManagedInsightRulesStub        func(*cloudwatch.PutManagedInsightRulesInput) (*cloudwatch.PutManagedInsightRulesOutput, error)
	putManagedInsightRulesMutex       sync.RWMutex
	putManagedInsightRulesArgsForCall []struct {
		arg1 *cloudwatch.PutManagedInsightRulesInput
	}
	putManagedInsightRulesReturns struct {
		result1 *cloudwatch.PutManagedInsightRulesOutput
		result2 error
	}
	putManagedInsightRulesReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutManagedInsightRulesOutput
		result2 error
	}
	PutManagedInsightRulesRequestStub        func(*cloudwatch.PutManagedInsightRulesInput) (*request.Request, *cloudwatch.PutManagedInsightRulesOutput)
	putManagedInsightRulesRequestMutex       sync.RWMutex
	putManagedInsightRulesRequestArgsForCall []struct {
		arg1 *cloudwatch.PutManagedInsightRulesInput
	}
	putManagedInsightRulesRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutManagedInsightRulesOutput
	}
	putManagedInsightRulesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutManagedInsightRulesOutput
	}
	PutManagedInsightRulesWithContextStub        func(context.Context, *cloudwatch.PutManagedInsightRulesInput, ...request.Option) (*cloudwatch.PutManagedInsightRulesOutput, error)
	putManagedInsightRulesWithContextMutex       sync.RWMutex
	putManagedInsightRulesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutManagedInsightRulesInput
		arg3 []request.Option
	}
	putManagedInsightRulesWithContextReturns struct {
		result1 *cloudwatch.PutManagedInsightRulesOutput
		result2 error
	}
	putManagedInsightRulesWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutManagedInsightRulesOutput
		result2 error
	}
	PutMetricAlarmStub        func(*cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error)
	putMetricAlarmMutex       sync.RWMutex
	putMetricAlarmArgsForCall []struct {
		arg1 *cloudwatch.PutMetricAlarmInput
	}
	putMetricAlarmReturns struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}
	putMetricAlarmReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}
	PutMetricAlarmRequestStub        func(*cloudwatch.PutMetricAlarmInput) (*request.Request, *cloudwatch.PutMetricAlarmOutput)
	putMetricAlarmRequestMutex       sync.RWMutex
	putMetricAlarmRequestArgsForCall []struct {
		arg1 *cloudwatch.PutMetricAlarmInput
	}
	putMetricAlarmRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricAlarmOutput
	}
	putMetricAlarmRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricAlarmOutput
	}
	PutMetricAlarmWithContextStub        func(context.Context, *cloudwatch.PutMetricAlarmInput, ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error)
	putMetricAlarmWithContextMutex       sync.RWMutex
	putMetricAlarmWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricAlarmInput
		arg3 []request.Option
	}
	putMetricAlarmWithContextReturns struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}
	putMetricAlarmWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}
	PutMetricDataStub        func(*cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error)
	putMetricDataMutex       sync.RWMutex
	putMetricDataArgsForCall []struct {
		arg1 *cloudwatch.PutMetricDataInput
	}
	putMetricDataReturns struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	putMetricDataReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	PutMetricDataRequestStub        func(*cloudwatch.PutMetricDataInput) (*request.Request, *cloudwatch.PutMetricDataOutput)
	putMetricDataRequestMutex       sync.RWMutex
	putMetricDataRequestArgsForCall []struct {
		arg1 *cloudwatch.PutMetricDataInput
	}
	putMetricDataRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricDataOutput
	}
	putMetricDataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricDataOutput
	}
	PutMetricDataWithContextStub        func(context.Context, *cloudwatch.PutMetricDataInput, ...request.Option) (*cloudwatch.PutMetricDataOutput, error)
	putMetricDataWithContextMutex       sync.RWMutex
	putMetricDataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricDataInput
		arg3 []request.Option
	}
	putMetricDataWithContextReturns struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	putMetricDataWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	PutMetricStreamStub        func(*cloudwatch.PutMetricStreamInput) (*cloudwatch.PutMetricStreamOutput, error)
	putMetricStreamMutex       sync.RWMutex
	putMetricStreamArgsForCall []struct {
		arg1 *cloudwatch.PutMetricStreamInput
	}
	putMetricStreamReturns struct {
		result1 *cloudwatch.PutMetricStreamOutput
		result2 error
	}
	putMetricStreamReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricStreamOutput
		result2 error
	}
	PutMetricStreamRequestStub        func(*cloudwatch.PutMetricStreamInput) (*request.Request, *cloudwatch.PutMetricStreamOutput)
	putMetricStreamRequestMutex       sync.RWMutex
	putMetricStreamRequestArgsForCall []struct {
		arg1 *cloudwatch.PutMetricStreamInput
	}
	putMetricStreamRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricStreamOutput
	}
	putMetricStreamRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricStreamOutput
	}
	PutMetricStreamWithContextStub        func(context.Context, *cloudwatch.PutMetricStreamInput, ...request.Option) (*cloudwatch.PutMetricStreamOutput, error)
	putMetricStreamWithContextMutex       sync.RWMutex
	putMetricStreamWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricStreamInput
		arg3 []request.Option
	}
	putMetricStreamWithContextReturns struct {
		result1 *cloudwatch.PutMetricStreamOutput
		result2 error
	}
	putMetricStreamWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricStreamOutput
		result2 error
	}
	SetAlarmStateStub        func(*cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error)
	setAlarmStateMutex       sync.RWMutex
	setAlarmStateArgsForCall []struct {
		arg1 *cloudwatch.SetAlarmStateInput
	}
	setAlarmStateReturns struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}
	setAlarmStateReturnsOnCall map[int]struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}
	SetAlarmStateRequestStub        func(*cloudwatch.SetAlarmStateInput) (*request.Request, *cloudwatch.SetAlarmStateOutput)
	setAlarmStateRequestMutex       sync.RWMutex
	setAlarmStateRequestArgsForCall []struct {
		arg1 *cloudwatch.SetAlarmStateInput
	}
	setAlarmStateRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.SetAlarmStateOutput
	}
	setAlarmStateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.SetAlarmStateOutput
	}
	SetAlarmStateWithContextStub        func(context.Context, *cloudwatch.SetAlarmStateInput, ...request.Option) (*cloudwatch.SetAlarmStateOutput, error)
	setAlarmStateWithContextMutex       sync.RWMutex
	setAlarmStateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.SetAlarmStateInput
		arg3 []request.Option
	}
	setAlarmStateWithContextReturns struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}
	setAlarmStateWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}
	StartMetricStreamsStub        func(*cloudwatch.StartMetricStreamsInput) (*cloudwatch.StartMetricStreamsOutput, error)
	startMetricStreamsMutex       sync.RWMutex
	startMetricStreamsArgsForCall []struct {
		arg1 *cloudwatch.StartMetricStreamsInput
	}
	startMetricStreamsReturns struct {
		result1 *cloudwatch.StartMetricStreamsOutput
		result2 error
	}
	startMetricStreamsReturnsOnCall map[int]struct {
		result1 *cloudwatch.StartMetricStreamsOutput
		result2 error
	}
	StartMetricStreamsRequestStub        func(*cloudwatch.StartMetricStreamsInput) (*request.Request, *cloudwatch.StartMetricStreamsOutput)
	startMetricStreamsRequestMutex       sync.RWMutex
	startMetricStreamsRequestArgsForCall []struct {
		arg1 *cloudwatch.StartMetricStreamsInput
	}
	startMetricStreamsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.StartMetricStreamsOutput
	}
	startMetricStreamsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.StartMetricStreamsOutput
	}
	StartMetricStreamsWithContextStub        func(context.Context, *cloudwatch.StartMetricStreamsInput, ...request.Option) (*cloudwatch.StartMetricStreamsOutput, error)
	startMetricStreamsWithContextMutex       sync.RWMutex
	startMetricStreamsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.StartMetricStreamsInput
		arg3 []request.Option
	}
	startMetricStreamsWithContextReturns struct {
		result1 *cloudwatch.StartMetricStreamsOutput
		result2 error
	}
	startMetricStreamsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.StartMetricStreamsOutput
		result2 error
	}
	StopMetricStreamsStub        func(*cloudwatch.StopMetricStreamsInput) (*cloudwatch.StopMetricStreamsOutput, error)
	stopMetricStreamsMutex       sync.RWMutex
	stopMetricStreamsArgsForCall []struct {
		arg1 *cloudwatch.StopMetricStreamsInput
	}
	stopMetricStreamsReturns struct {
		result1 *cloudwatch.StopMetricStreamsOutput
		result2 error
	}
	stopMetricStreamsReturnsOnCall map[int]struct {
		result1 *cloudwatch.StopMetricStreamsOutput
		result2 error
	}
	StopMetricStreamsRequestStub        func(*cloudwatch.StopMetricStreamsInput) (*request.Request, *cloudwatch.StopMetricStreamsOutput)
	stopMetricStreamsRequestMutex       sync.RWMutex
	stopMetricStreamsRequestArgsForCall []struct {
		arg1 *cloudwatch.StopMetricStreamsInput
	}
	stopMetricStreamsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.StopMetricStreamsOutput
	}
	stopMetricStreamsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.StopMetricStreamsOutput
	}
	StopMetricStreamsWithContextStub        func(context.Context, *cloudwatch.StopMetricStreamsInput, ...request.Option) (*cloudwatch.StopMetricStreamsOutput, error)
	stopMetricStreamsWithContextMutex       sync.RWMutex
	stopMetricStreamsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.StopMetricStreamsInput
		arg3 []request.Option
	}
	stopMetricStreamsWithContextReturns struct {
		result1 *cloudwatch.StopMetricStreamsOutput
		result2 error
	}
	stopMetricStreamsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.StopMetricStreamsOutput
		result2 error
	}
	TagResourceStub        func(*cloudwatch.TagResourceInput) (*cloudwatch.TagResourceOutput, error)
	tagResourceMutex       sync.RWMutex
	tagResourceArgsForCall []struct {
		arg1 *cloudwatch.TagResourceInput
	}
	tagResourceReturns struct {
		result1 *cloudwatch.TagResourceOutput
		result2 error
	}
	tagResourceReturnsOnCall map[int]struct {
		result1 *cloudwatch.TagResourceOutput
		result2 error
	}
	TagResourceRequestStub        func(*cloudwatch.TagResourceInput) (*request.Request, *cloudwatch.TagResourceOutput)
	tagResourceRequestMutex       sync.RWMutex
	tagResourceRequestArgsForCall []struct {
		arg1 *cloudwatch.TagResourceInput
	}
	tagResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.TagResourceOutput
	}
	tagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.TagResourceOutput
	}
	TagResourceWithContextStub        func(context.Context, *cloudwatch.TagResourceInput, ...request.Option) (*cloudwatch.TagResourceOutput, error)
	tagResourceWithContextMutex       sync.RWMutex
	tagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.TagResourceInput
		arg3 []request.Option
	}
	tagResourceWithContextReturns struct {
		result1 *cloudwatch.TagResourceOutput
		result2 error
	}
	tagResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.TagResourceOutput
		result2 error
	}
	UntagResourceStub        func(*cloudwatch.UntagResourceInput) (*cloudwatch.UntagResourceOutput, error)
	untagResourceMutex       sync.RWMutex
	untagResourceArgsForCall []struct {
		arg1 *cloudwatch.UntagResourceInput
	}
	untagResourceReturns struct {
		result1 *cloudwatch.UntagResourceOutput
		result2 error
	}
	untagResourceReturnsOnCall map[int]struct {
		result1 *cloudwatch.UntagResourceOutput
		result2 error
	}
	UntagResourceRequestStub        func(*cloudwatch.UntagResourceInput) (*request.Request, *cloudwatch.UntagResourceOutput)
	untagResourceRequestMutex       sync.RWMutex
	untagResourceRequestArgsForCall []struct {
		arg1 *cloudwatch.UntagResourceInput
	}
	untagResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.UntagResourceOutput
	}
	untagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.UntagResourceOutput
	}
	UntagResourceWithContextStub        func(context.Context, *cloudwatch.UntagResourceInput, ...request.Option) (*cloudwatch.UntagResourceOutput, error)
	untagResourceWithContextMutex       sync.RWMutex
	untagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.UntagResourceInput
		arg3 []request.Option
	}
	untagResourceWithContextReturns struct {
		result1 *cloudwatch.UntagResourceOutput
		result2 error
	}
	untagResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.UntagResourceOutput
		result2 error
	}
	WaitUntilAlarmExistsStub        func(*cloudwatch.DescribeAlarmsInput) error
	waitUntilAlarmExistsMutex       sync.RWMutex
	waitUntilAlarmExistsArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}
	waitUntilAlarmExistsReturns struct {
		result1 error
	}
	waitUntilAlarmExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilAlarmExistsWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.WaiterOption) error
	waitUntilAlarmExistsWithContextMutex       sync.RWMutex
	waitUntilAlarmExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.WaiterOption
	}
	waitUntilAlarmExistsWithContextReturns struct {
		result1 error
	}
	waitUntilAlarmExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCompositeAlarmExistsStub        func(*cloudwatch.DescribeAlarmsInput) error
	waitUntilCompositeAlarmExistsMutex       sync.RWMutex
	waitUntilCompositeAlarmExistsArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}
	waitUntilCompositeAlarmExistsReturns struct {
		result1 error
	}
	waitUntilCompositeAlarmExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCompositeAlarmExistsWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.WaiterOption) error
	waitUntilCompositeAlarmExistsWithContextMutex       sync.RWMutex
	waitUntilCompositeAlarmExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.WaiterOption
	}
	waitUntilCompositeAlarmExistsWithContextReturns struct {
		result1 error
	}
	waitUntilCompositeAlarmExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudWatchAPI) DeleteAlarms(arg1 *cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error) {
	fake.deleteAlarmsMutex.Lock()
	ret, specificReturn := fake.deleteAlarmsReturnsOnCall[len(fake.deleteAlarmsArgsForCall)]
	fake.deleteAlarmsArgsForCall = append(fake.deleteAlarmsArgsForCall, struct {
		arg1 *cloudwatch.DeleteAlarmsInput
	}{arg1})
	stub := fake.DeleteAlarmsStub
	fakeReturns := fake.deleteAlarmsReturns
	fake.recordInvocation("DeleteAlarms", []interface{}{arg1})
	fake.deleteAlarmsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsCallCount() int {
	fake.deleteAlarmsMutex.RLock()
	defer fake.deleteAlarmsMutex.RUnlock()
	return len(fake.deleteAlarmsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsCalls(stub func(*cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error)) {
	fake.deleteAlarmsMutex.Lock()
	defer fake.deleteAlarmsMutex.Unlock()
	fake.DeleteAlarmsStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsArgsForCall(i int) *cloudwatch.DeleteAlarmsInput {
	fake.deleteAlarmsMutex.RLock()
	defer fake.deleteAlarmsMutex.RUnlock()
	argsForCall := fake.deleteAlarmsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsReturns(result1 *cloudwatch.DeleteAlarmsOutput, result2 error) {
	fake.deleteAlarmsMutex.Lock()
	defer fake.deleteAlarmsMutex.Unlock()
	fake.DeleteAlarmsStub = nil
	fake.deleteAlarmsReturns = struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsReturnsOnCall(i int, result1 *cloudwatch.DeleteAlarmsOutput, result2 error) {
	fake.deleteAlarmsMutex.Lock()
	defer fake.deleteAlarmsMutex.Unlock()
	fake.DeleteAlarmsStub = nil
	if fake.deleteAlarmsReturnsOnCall == nil {
		fake.deleteAlarmsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteAlarmsOutput
			result2 error
		})
	}
	fake.deleteAlarmsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequest(arg1 *cloudwatch.DeleteAlarmsInput) (*request.Request, *cloudwatch.DeleteAlarmsOutput) {
	fake.deleteAlarmsRequestMutex.Lock()
	ret, specificReturn := fake.deleteAlarmsRequestReturnsOnCall[len(fake.deleteAlarmsRequestArgsForCall)]
	fake.deleteAlarmsRequestArgsForCall = append(fake.deleteAlarmsRequestArgsForCall, struct {
		arg1 *cloudwatch.DeleteAlarmsInput
	}{arg1})
	stub := fake.DeleteAlarmsRequestStub
	fakeReturns := fake.deleteAlarmsRequestReturns
	fake.recordInvocation("DeleteAlarmsRequest", []interface{}{arg1})
	fake.deleteAlarmsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestCallCount() int {
	fake.deleteAlarmsRequestMutex.RLock()
	defer fake.deleteAlarmsRequestMutex.RUnlock()
	return len(fake.deleteAlarmsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestCalls(stub func(*cloudwatch.DeleteAlarmsInput) (*request.Request, *cloudwatch.DeleteAlarmsOutput)) {
	fake.deleteAlarmsRequestMutex.Lock()
	defer fake.deleteAlarmsRequestMutex.Unlock()
	fake.DeleteAlarmsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestArgsForCall(i int) *cloudwatch.DeleteAlarmsInput {
	fake.deleteAlarmsRequestMutex.RLock()
	defer fake.deleteAlarmsRequestMutex.RUnlock()
	argsForCall := fake.deleteAlarmsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestReturns(result1 *request.Request, result2 *cloudwatch.DeleteAlarmsOutput) {
	fake.deleteAlarmsRequestMutex.Lock()
	defer fake.deleteAlarmsRequestMutex.Unlock()
	fake.DeleteAlarmsRequestStub = nil
	fake.deleteAlarmsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAlarmsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DeleteAlarmsOutput) {
	fake.deleteAlarmsRequestMutex.Lock()
	defer fake.deleteAlarmsRequestMutex.Unlock()
	fake.DeleteAlarmsRequestStub = nil
	if fake.deleteAlarmsRequestReturnsOnCall == nil {
		fake.deleteAlarmsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DeleteAlarmsOutput
		})
	}
	fake.deleteAlarmsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAlarmsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContext(arg1 context.Context, arg2 *cloudwatch.DeleteAlarmsInput, arg3 ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error) {
	fake.deleteAlarmsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAlarmsWithContextReturnsOnCall[len(fake.deleteAlarmsWithContextArgsForCall)]
	fake.deleteAlarmsWithContextArgsForCall = append(fake.deleteAlarmsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteAlarmsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteAlarmsWithContextStub
	fakeReturns := fake.deleteAlarmsWithContextReturns
	fake.recordInvocation("DeleteAlarmsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAlarmsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextCallCount() int {
	fake.deleteAlarmsWithContextMutex.RLock()
	defer fake.deleteAlarmsWithContextMutex.RUnlock()
	return len(fake.deleteAlarmsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextCalls(stub func(context.Context, *cloudwatch.DeleteAlarmsInput, ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error)) {
	fake.deleteAlarmsWithContextMutex.Lock()
	defer fake.deleteAlarmsWithContextMutex.Unlock()
	fake.DeleteAlarmsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DeleteAlarmsInput, []request.Option) {
	fake.deleteAlarmsWithContextMutex.RLock()
	defer fake.deleteAlarmsWithContextMutex.RUnlock()
	argsForCall := fake.deleteAlarmsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextReturns(result1 *cloudwatch.DeleteAlarmsOutput, result2 error) {
	fake.deleteAlarmsWithContextMutex.Lock()
	defer fake.deleteAlarmsWithContextMutex.Unlock()
	fake.DeleteAlarmsWithContextStub = nil
	fake.deleteAlarmsWithContextReturns = struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextReturnsOnCall(i int, result1 *cloudwatch.DeleteAlarmsOutput, result2 error) {
	fake.deleteAlarmsWithContextMutex.Lock()
	defer fake.deleteAlarmsWithContextMutex.Unlock()
	fake.DeleteAlarmsWithContextStub = nil
	if fake.deleteAlarmsWithContextReturnsOnCall == nil {
		fake.deleteAlarmsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteAlarmsOutput
			result2 error
		})
	}
	fake.deleteAlarmsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetector(arg1 *cloudwatch.DeleteAnomalyDetectorInput) (*cloudwatch.DeleteAnomalyDetectorOutput, error) {
	fake.deleteAnomalyDetectorMutex.Lock()
	ret, specificReturn := fake.deleteAnomalyDetectorReturnsOnCall[len(fake.deleteAnomalyDetectorArgsForCall)]
	fake.deleteAnomalyDetectorArgsForCall = append(fake.deleteAnomalyDetectorArgsForCall, struct {
		arg1 *cloudwatch.DeleteAnomalyDetectorInput
	}{arg1})
	stub := fake.DeleteAnomalyDetectorStub
	fakeReturns := fake.deleteAnomalyDetectorReturns
	fake.recordInvocation("DeleteAnomalyDetector", []interface{}{arg1})
	fake.deleteAnomalyDetectorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorCallCount() int {
	fake.deleteAnomalyDetectorMutex.RLock()
	defer fake.deleteAnomalyDetectorMutex.RUnlock()
	return len(fake.deleteAnomalyDetectorArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorCalls(stub func(*cloudwatch.DeleteAnomalyDetectorInput) (*cloudwatch.DeleteAnomalyDetectorOutput, error)) {
	fake.deleteAnomalyDetectorMutex.Lock()
	defer fake.deleteAnomalyDetectorMutex.Unlock()
	fake.DeleteAnomalyDetectorStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorArgsForCall(i int) *cloudwatch.DeleteAnomalyDetectorInput {
	fake.deleteAnomalyDetectorMutex.RLock()
	defer fake.deleteAnomalyDetectorMutex.RUnlock()
	argsForCall := fake.deleteAnomalyDetectorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorReturns(result1 *cloudwatch.DeleteAnomalyDetectorOutput, result2 error) {
	fake.deleteAnomalyDetectorMutex.Lock()
	defer fake.deleteAnomalyDetectorMutex.Unlock()
	fake.DeleteAnomalyDetectorStub = nil
	fake.deleteAnomalyDetectorReturns = struct {
		result1 *cloudwatch.DeleteAnomalyDetectorOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorReturnsOnCall(i int, result1 *cloudwatch.DeleteAnomalyDetectorOutput, result2 error) {
	fake.deleteAnomalyDetectorMutex.Lock()
	defer fake.deleteAnomalyDetectorMutex.Unlock()
	fake.DeleteAnomalyDetectorStub = nil
	if fake.deleteAnomalyDetectorReturnsOnCall == nil {
		fake.deleteAnomalyDetectorReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteAnomalyDetectorOutput
			result2 error
		})
	}
	fake.deleteAnomalyDetectorReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteAnomalyDetectorOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorRequest(arg1 *cloudwatch.DeleteAnomalyDetectorInput) (*request.Request, *cloudwatch.DeleteAnomalyDetectorOutput) {
	fake.deleteAnomalyDetectorRequestMutex.Lock()
	ret, specificReturn := fake.deleteAnomalyDetectorRequestReturnsOnCall[len(fake.deleteAnomalyDetectorRequestArgsForCall)]
	fake.deleteAnomalyDetectorRequestArgsForCall = append(fake.deleteAnomalyDetectorRequestArgsForCall, struct {
		arg1 *cloudwatch.DeleteAnomalyDetectorInput
	}{arg1})
	stub := fake.DeleteAnomalyDetectorRequestStub
	fakeReturns := fake.deleteAnomalyDetectorRequestReturns
	fake.recordInvocation("DeleteAnomalyDetectorRequest", []interface{}{arg1})
	fake.deleteAnomalyDetectorRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorRequestCallCount() int {
	fake.deleteAnomalyDetectorRequestMutex.RLock()
	defer fake.deleteAnomalyDetectorRequestMutex.RUnlock()
	return len(fake.deleteAnomalyDetectorRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorRequestCalls(stub func(*cloudwatch.DeleteAnomalyDetectorInput) (*request.Request, *cloudwatch.DeleteAnomalyDetectorOutput)) {
	fake.deleteAnomalyDetectorRequestMutex.Lock()
	defer fake.deleteAnomalyDetectorRequestMutex.Unlock()
	fake.DeleteAnomalyDetectorRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorRequestArgsForCall(i int) *cloudwatch.DeleteAnomalyDetectorInput {
	fake.deleteAnomalyDetectorRequestMutex.RLock()
	defer fake.deleteAnomalyDetectorRequestMutex.RUnlock()
	argsForCall := fake.deleteAnomalyDetectorRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorRequestReturns(result1 *request.Request, result2 *cloudwatch.DeleteAnomalyDetectorOutput) {
	fake.deleteAnomalyDetectorRequestMutex.Lock()
	defer fake.deleteAnomalyDetectorRequestMutex.Unlock()
	fake.DeleteAnomalyDetectorRequestStub = nil
	fake.deleteAnomalyDetectorRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAnomalyDetectorOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DeleteAnomalyDetectorOutput) {
	fake.deleteAnomalyDetectorRequestMutex.Lock()
	defer fake.deleteAnomalyDetectorRequestMutex.Unlock()
	fake.DeleteAnomalyDetectorRequestStub = nil
	if fake.deleteAnomalyDetectorRequestReturnsOnCall == nil {
		fake.deleteAnomalyDetectorRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DeleteAnomalyDetectorOutput
		})
	}
	fake.deleteAnomalyDetectorRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAnomalyDetectorOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorWithContext(arg1 context.Context, arg2 *cloudwatch.DeleteAnomalyDetectorInput, arg3 ...request.Option) (*cloudwatch.DeleteAnomalyDetectorOutput, error) {
	fake.deleteAnomalyDetectorWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAnomalyDetectorWithContextReturnsOnCall[len(fake.deleteAnomalyDetectorWithContextArgsForCall)]
	fake.deleteAnomalyDetectorWithContextArgsForCall = append(fake.deleteAnomalyDetectorWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteAnomalyDetectorInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteAnomalyDetectorWithContextStub
	fakeReturns := fake.deleteAnomalyDetectorWithContextReturns
	fake.recordInvocation("DeleteAnomalyDetectorWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAnomalyDetectorWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorWithContextCallCount() int {
	fake.deleteAnomalyDetectorWithContextMutex.RLock()
	defer fake.deleteAnomalyDetectorWithContextMutex.RUnlock()
	return len(fake.deleteAnomalyDetectorWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorWithContextCalls(stub func(context.Context, *cloudwatch.DeleteAnomalyDetectorInput, ...request.Option) (*cloudwatch.DeleteAnomalyDetectorOutput, error)) {
	fake.deleteAnomalyDetectorWithContextMutex.Lock()
	defer fake.deleteAnomalyDetectorWithContextMutex.Unlock()
	fake.DeleteAnomalyDetectorWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorWithContextArgsForCall(i int) (context.Context, *cloudwatch.DeleteAnomalyDetectorInput, []request.Option) {
	fake.deleteAnomalyDetectorWithContextMutex.RLock()
	defer fake.deleteAnomalyDetectorWithContextMutex.RUnlock()
	argsForCall := fake.deleteAnomalyDetectorWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorWithContextReturns(result1 *cloudwatch.DeleteAnomalyDetectorOutput, result2 error) {
	fake.deleteAnomalyDetectorWithContextMutex.Lock()
	defer fake.deleteAnomalyDetectorWithContextMutex.Unlock()
	fake.DeleteAnomalyDetectorWithContextStub = nil
	fake.deleteAnomalyDetectorWithContextReturns = struct {
		result1 *cloudwatch.DeleteAnomalyDetectorOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAnomalyDetectorWithContextReturnsOnCall(i int, result1 *cloudwatch.DeleteAnomalyDetectorOutput, result2 error) {
	fake.deleteAnomalyDetectorWithContextMutex.Lock()
	defer fake.deleteAnomalyDetectorWithContextMutex.Unlock()
	fake.DeleteAnomalyDetectorWithContextStub = nil
	if fake.deleteAnomalyDetectorWithContextReturnsOnCall == nil {
		fake.deleteAnomalyDetectorWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteAnomalyDetectorOutput
			result2 error
		})
	}
	fake.deleteAnomalyDetectorWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteAnomalyDetectorOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboards(arg1 *cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error) {
	fake.deleteDashboardsMutex.Lock()
	ret, specificReturn := fake.deleteDashboardsReturnsOnCall[len(fake.deleteDashboardsArgsForCall)]
	fake.deleteDashboardsArgsForCall = append(fake.deleteDashboardsArgsForCall, struct {
		arg1 *cloudwatch.DeleteDashboardsInput
	}{arg1})
	stub := fake.DeleteDashboardsStub
	fakeReturns := fake.deleteDashboardsReturns
	fake.recordInvocation("DeleteDashboards", []interface{}{arg1})
	fake.deleteDashboardsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsCallCount() int {
	fake.deleteDashboardsMutex.RLock()
	defer fake.deleteDashboardsMutex.RUnlock()
	return len(fake.deleteDashboardsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsCalls(stub func(*cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error)) {
	fake.deleteDashboardsMutex.Lock()
	defer fake.deleteDashboardsMutex.Unlock()
	fake.DeleteDashboardsStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsArgsForCall(i int) *cloudwatch.DeleteDashboardsInput {
	fake.deleteDashboardsMutex.RLock()
	defer fake.deleteDashboardsMutex.RUnlock()
	argsForCall := fake.deleteDashboardsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsReturns(result1 *cloudwatch.DeleteDashboardsOutput, result2 error) {
	fake.deleteDashboardsMutex.Lock()
	defer fake.deleteDashboardsMutex.Unlock()
	fake.DeleteDashboardsStub = nil
	fake.deleteDashboardsReturns = struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsReturnsOnCall(i int, result1 *cloudwatch.DeleteDashboardsOutput, result2 error) {
	fake.deleteDashboardsMutex.Lock()
	defer fake.deleteDashboardsMutex.Unlock()
	fake.DeleteDashboardsStub = nil
	if fake.deleteDashboardsReturnsOnCall == nil {
		fake.deleteDashboardsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteDashboardsOutput
			result2 error
		})
	}
	fake.deleteDashboardsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequest(arg1 *cloudwatch.DeleteDashboardsInput) (*request.Request, *cloudwatch.DeleteDashboardsOutput) {
	fake.deleteDashboardsRequestMutex.Lock()
	ret, specificReturn := fake.deleteDashboardsRequestReturnsOnCall[len(fake.deleteDashboardsRequestArgsForCall)]
	fake.deleteDashboardsRequestArgsForCall = append(fake.deleteDashboardsRequestArgsForCall, struct {
		arg1 *cloudwatch.DeleteDashboardsInput
	}{arg1})
	stub := fake.DeleteDashboardsRequestStub
	fakeReturns := fake.deleteDashboardsRequestReturns
	fake.recordInvocation("DeleteDashboardsRequest", []interface{}{arg1})
	fake.deleteDashboardsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestCallCount() int {
	fake.deleteDashboardsRequestMutex.RLock()
	defer fake.deleteDashboardsRequestMutex.RUnlock()
	return len(fake.deleteDashboardsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestCalls(stub func(*cloudwatch.DeleteDashboardsInput) (*request.Request, *cloudwatch.DeleteDashboardsOutput)) {
	fake.deleteDashboardsRequestMutex.Lock()
	defer fake.deleteDashboardsRequestMutex.Unlock()
	fake.DeleteDashboardsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestArgsForCall(i int) *cloudwatch.DeleteDashboardsInput {
	fake.deleteDashboardsRequestMutex.RLock()
	defer fake.deleteDashboardsRequestMutex.RUnlock()
	argsForCall := fake.deleteDashboardsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestReturns(result1 *request.Request, result2 *cloudwatch.DeleteDashboardsOutput) {
	fake.deleteDashboardsRequestMutex.Lock()
	defer fake.deleteDashboardsRequestMutex.Unlock()
	fake.DeleteDashboardsRequestStub = nil
	fake.deleteDashboardsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteDashboardsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DeleteDashboardsOutput) {
	fake.deleteDashboardsRequestMutex.Lock()
	defer fake.deleteDashboardsRequestMutex.Unlock()
	fake.DeleteDashboardsRequestStub = nil
	if fake.deleteDashboardsRequestReturnsOnCall == nil {
		fake.deleteDashboardsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DeleteDashboardsOutput
		})
	}
	fake.deleteDashboardsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteDashboardsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContext(arg1 context.Context, arg2 *cloudwatch.DeleteDashboardsInput, arg3 ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error) {
	fake.deleteDashboardsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDashboardsWithContextReturnsOnCall[len(fake.deleteDashboardsWithContextArgsForCall)]
	fake.deleteDashboardsWithContextArgsForCall = append(fake.deleteDashboardsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteDashboardsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDashboardsWithContextStub
	fakeReturns := fake.deleteDashboardsWithContextReturns
	fake.recordInvocation("DeleteDashboardsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDashboardsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextCallCount() int {
	fake.deleteDashboardsWithContextMutex.RLock()
	defer fake.deleteDashboardsWithContextMutex.RUnlock()
	return len(fake.deleteDashboardsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextCalls(stub func(context.Context, *cloudwatch.DeleteDashboardsInput, ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error)) {
	fake.deleteDashboardsWithContextMutex.Lock()
	defer fake.deleteDashboardsWithContextMutex.Unlock()
	fake.DeleteDashboardsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DeleteDashboardsInput, []request.Option) {
	fake.deleteDashboardsWithContextMutex.RLock()
	defer fake.deleteDashboardsWithContextMutex.RUnlock()
	argsForCall := fake.deleteDashboardsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextReturns(result1 *cloudwatch.DeleteDashboardsOutput, result2 error) {
	fake.deleteDashboardsWithContextMutex.Lock()
	defer fake.deleteDashboardsWithContextMutex.Unlock()
	fake.DeleteDashboardsWithContextStub = nil
	fake.deleteDashboardsWithContextReturns = struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextReturnsOnCall(i int, result1 *cloudwatch.DeleteDashboardsOutput, result2 error) {
	fake.deleteDashboardsWithContextMutex.Lock()
	defer fake.deleteDashboardsWithContextMutex.Unlock()
	fake.DeleteDashboardsWithContextStub = nil
	if fake.deleteDashboardsWithContextReturnsOnCall == nil {
		fake.deleteDashboardsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteDashboardsOutput
			result2 error
		})
	}
	fake.deleteDashboardsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteInsightRules(arg1 *cloudwatch.DeleteInsightRulesInput) (*cloudwatch.DeleteInsightRulesOutput, error) {
	fake.deleteInsightRulesMutex.Lock()
	ret, specificReturn := fake.deleteInsightRulesReturnsOnCall[len(fake.deleteInsightRulesArgsForCall)]
	fake.deleteInsightRulesArgsForCall = append(fake.deleteInsightRulesArgsForCall, struct {
		arg1 *cloudwatch.DeleteInsightRulesInput
	}{arg1})
	stub := fake.DeleteInsightRulesStub
	fakeReturns := fake.deleteInsightRulesReturns
	fake.recordInvocation("DeleteInsightRules", []interface{}{arg1})
	fake.deleteInsightRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesCallCount() int {
	fake.deleteInsightRulesMutex.RLock()
	defer fake.deleteInsightRulesMutex.RUnlock()
	return len(fake.deleteInsightRulesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesCalls(stub func(*cloudwatch.DeleteInsightRulesInput) (*cloudwatch.DeleteInsightRulesOutput, error)) {
	fake.deleteInsightRulesMutex.Lock()
	defer fake.deleteInsightRulesMutex.Unlock()
	fake.DeleteInsightRulesStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesArgsForCall(i int) *cloudwatch.DeleteInsightRulesInput {
	fake.deleteInsightRulesMutex.RLock()
	defer fake.deleteInsightRulesMutex.RUnlock()
	argsForCall := fake.deleteInsightRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesReturns(result1 *cloudwatch.DeleteInsightRulesOutput, result2 error) {
	fake.deleteInsightRulesMutex.Lock()
	defer fake.deleteInsightRulesMutex.Unlock()
	fake.DeleteInsightRulesStub = nil
	fake.deleteInsightRulesReturns = struct {
		result1 *cloudwatch.DeleteInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesReturnsOnCall(i int, result1 *cloudwatch.DeleteInsightRulesOutput, result2 error) {
	fake.deleteInsightRulesMutex.Lock()
	defer fake.deleteInsightRulesMutex.Unlock()
	fake.DeleteInsightRulesStub = nil
	if fake.deleteInsightRulesReturnsOnCall == nil {
		fake.deleteInsightRulesReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteInsightRulesOutput
			result2 error
		})
	}
	fake.deleteInsightRulesReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesRequest(arg1 *cloudwatch.DeleteInsightRulesInput) (*request.Request, *cloudwatch.DeleteInsightRulesOutput) {
	fake.deleteInsightRulesRequestMutex.Lock()
	ret, specificReturn := fake.deleteInsightRulesRequestReturnsOnCall[len(fake.deleteInsightRulesRequestArgsForCall)]
	fake.deleteInsightRulesRequestArgsForCall = append(fake.deleteInsightRulesRequestArgsForCall, struct {
		arg1 *cloudwatch.DeleteInsightRulesInput
	}{arg1})
	stub := fake.DeleteInsightRulesRequestStub
	fakeReturns := fake.deleteInsightRulesRequestReturns
	fake.recordInvocation("DeleteInsightRulesRequest", []interface{}{arg1})
	fake.deleteInsightRulesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesRequestCallCount() int {
	fake.deleteInsightRulesRequestMutex.RLock()
	defer fake.deleteInsightRulesRequestMutex.RUnlock()
	return len(fake.deleteInsightRulesRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesRequestCalls(stub func(*cloudwatch.DeleteInsightRulesInput) (*request.Request, *cloudwatch.DeleteInsightRulesOutput)) {
	fake.deleteInsightRulesRequestMutex.Lock()
	defer fake.deleteInsightRulesRequestMutex.Unlock()
	fake.DeleteInsightRulesRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesRequestArgsForCall(i int) *cloudwatch.DeleteInsightRulesInput {
	fake.deleteInsightRulesRequestMutex.RLock()
	defer fake.deleteInsightRulesRequestMutex.RUnlock()
	argsForCall := fake.deleteInsightRulesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesRequestReturns(result1 *request.Request, result2 *cloudwatch.DeleteInsightRulesOutput) {
	fake.deleteInsightRulesRequestMutex.Lock()
	defer fake.deleteInsightRulesRequestMutex.Unlock()
	fake.DeleteInsightRulesRequestStub = nil
	fake.deleteInsightRulesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DeleteInsightRulesOutput) {
	fake.deleteInsightRulesRequestMutex.Lock()
	defer fake.deleteInsightRulesRequestMutex.Unlock()
	fake.DeleteInsightRulesRequestStub = nil
	if fake.deleteInsightRulesRequestReturnsOnCall == nil {
		fake.deleteInsightRulesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DeleteInsightRulesOutput
		})
	}
	fake.deleteInsightRulesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesWithContext(arg1 context.Context, arg2 *cloudwatch.DeleteInsightRulesInput, arg3 ...request.Option) (*cloudwatch.DeleteInsightRulesOutput, error) {
	fake.deleteInsightRulesWithContextMutex.Lock()
	ret, specificReturn := fake.deleteInsightRulesWithContextReturnsOnCall[len(fake.deleteInsightRulesWithContextArgsForCall)]
	fake.deleteInsightRulesWithContextArgsForCall = append(fake.deleteInsightRulesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteInsightRulesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteInsightRulesWithContextStub
	fakeReturns := fake.deleteInsightRulesWithContextReturns
	fake.recordInvocation("DeleteInsightRulesWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteInsightRulesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesWithContextCallCount() int {
	fake.deleteInsightRulesWithContextMutex.RLock()
	defer fake.deleteInsightRulesWithContextMutex.RUnlock()
	return len(fake.deleteInsightRulesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesWithContextCalls(stub func(context.Context, *cloudwatch.DeleteInsightRulesInput, ...request.Option) (*cloudwatch.DeleteInsightRulesOutput, error)) {
	fake.deleteInsightRulesWithContextMutex.Lock()
	defer fake.deleteInsightRulesWithContextMutex.Unlock()
	fake.DeleteInsightRulesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DeleteInsightRulesInput, []request.Option) {
	fake.deleteInsightRulesWithContextMutex.RLock()
	defer fake.deleteInsightRulesWithContextMutex.RUnlock()
	argsForCall := fake.deleteInsightRulesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesWithContextReturns(result1 *cloudwatch.DeleteInsightRulesOutput, result2 error) {
	fake.deleteInsightRulesWithContextMutex.Lock()
	defer fake.deleteInsightRulesWithContextMutex.Unlock()
	fake.DeleteInsightRulesWithContextStub = nil
	fake.deleteInsightRulesWithContextReturns = struct {
		result1 *cloudwatch.DeleteInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteInsightRulesWithContextReturnsOnCall(i int, result1 *cloudwatch.DeleteInsightRulesOutput, result2 error) {
	fake.deleteInsightRulesWithContextMutex.Lock()
	defer fake.deleteInsightRulesWithContextMutex.Unlock()
	fake.DeleteInsightRulesWithContextStub = nil
	if fake.deleteInsightRulesWithContextReturnsOnCall == nil {
		fake.deleteInsightRulesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteInsightRulesOutput
			result2 error
		})
	}
	fake.deleteInsightRulesWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteMetricStream(arg1 *cloudwatch.DeleteMetricStreamInput) (*cloudwatch.DeleteMetricStreamOutput, error) {
	fake.deleteMetricStreamMutex.Lock()
	ret, specificReturn := fake.deleteMetricStreamReturnsOnCall[len(fake.deleteMetricStreamArgsForCall)]
	fake.deleteMetricStreamArgsForCall = append(fake.deleteMetricStreamArgsForCall, struct {
		arg1 *cloudwatch.DeleteMetricStreamInput
	}{arg1})
	stub := fake.DeleteMetricStreamStub
	fakeReturns := fake.deleteMetricStreamReturns
	fake.recordInvocation("DeleteMetricStream", []interface{}{arg1})
	fake.deleteMetricStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamCallCount() int {
	fake.deleteMetricStreamMutex.RLock()
	defer fake.deleteMetricStreamMutex.RUnlock()
	return len(fake.deleteMetricStreamArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamCalls(stub func(*cloudwatch.DeleteMetricStreamInput) (*cloudwatch.DeleteMetricStreamOutput, error)) {
	fake.deleteMetricStreamMutex.Lock()
	defer fake.deleteMetricStreamMutex.Unlock()
	fake.DeleteMetricStreamStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamArgsForCall(i int) *cloudwatch.DeleteMetricStreamInput {
	fake.deleteMetricStreamMutex.RLock()
	defer fake.deleteMetricStreamMutex.RUnlock()
	argsForCall := fake.deleteMetricStreamArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamReturns(result1 *cloudwatch.DeleteMetricStreamOutput, result2 error) {
	fake.deleteMetricStreamMutex.Lock()
	defer fake.deleteMetricStreamMutex.Unlock()
	fake.DeleteMetricStreamStub = nil
	fake.deleteMetricStreamReturns = struct {
		result1 *cloudwatch.DeleteMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamReturnsOnCall(i int, result1 *cloudwatch.DeleteMetricStreamOutput, result2 error) {
	fake.deleteMetricStreamMutex.Lock()
	defer fake.deleteMetricStreamMutex.Unlock()
	fake.DeleteMetricStreamStub = nil
	if fake.deleteMetricStreamReturnsOnCall == nil {
		fake.deleteMetricStreamReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteMetricStreamOutput
			result2 error
		})
	}
	fake.deleteMetricStreamReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamRequest(arg1 *cloudwatch.DeleteMetricStreamInput) (*request.Request, *cloudwatch.DeleteMetricStreamOutput) {
	fake.deleteMetricStreamRequestMutex.Lock()
	ret, specificReturn := fake.deleteMetricStreamRequestReturnsOnCall[len(fake.deleteMetricStreamRequestArgsForCall)]
	fake.deleteMetricStreamRequestArgsForCall = append(fake.deleteMetricStreamRequestArgsForCall, struct {
		arg1 *cloudwatch.DeleteMetricStreamInput
	}{arg1})
	stub := fake.DeleteMetricStreamRequestStub
	fakeReturns := fake.deleteMetricStreamRequestReturns
	fake.recordInvocation("DeleteMetricStreamRequest", []interface{}{arg1})
	fake.deleteMetricStreamRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamRequestCallCount() int {
	fake.deleteMetricStreamRequestMutex.RLock()
	defer fake.deleteMetricStreamRequestMutex.RUnlock()
	return len(fake.deleteMetricStreamRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamRequestCalls(stub func(*cloudwatch.DeleteMetricStreamInput) (*request.Request, *cloudwatch.DeleteMetricStreamOutput)) {
	fake.deleteMetricStreamRequestMutex.Lock()
	defer fake.deleteMetricStreamRequestMutex.Unlock()
	fake.DeleteMetricStreamRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamRequestArgsForCall(i int) *cloudwatch.DeleteMetricStreamInput {
	fake.deleteMetricStreamRequestMutex.RLock()
	defer fake.deleteMetricStreamRequestMutex.RUnlock()
	argsForCall := fake.deleteMetricStreamRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamRequestReturns(result1 *request.Request, result2 *cloudwatch.DeleteMetricStreamOutput) {
	fake.deleteMetricStreamRequestMutex.Lock()
	defer fake.deleteMetricStreamRequestMutex.Unlock()
	fake.DeleteMetricStreamRequestStub = nil
	fake.deleteMetricStreamRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteMetricStreamOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DeleteMetricStreamOutput) {
	fake.deleteMetricStreamRequestMutex.Lock()
	defer fake.deleteMetricStreamRequestMutex.Unlock()
	fake.DeleteMetricStreamRequestStub = nil
	if fake.deleteMetricStreamRequestReturnsOnCall == nil {
		fake.deleteMetricStreamRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DeleteMetricStreamOutput
		})
	}
	fake.deleteMetricStreamRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteMetricStreamOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamWithContext(arg1 context.Context, arg2 *cloudwatch.DeleteMetricStreamInput, arg3 ...request.Option) (*cloudwatch.DeleteMetricStreamOutput, error) {
	fake.deleteMetricStreamWithContextMutex.Lock()
	ret, specificReturn := fake.deleteMetricStreamWithContextReturnsOnCall[len(fake.deleteMetricStreamWithContextArgsForCall)]
	fake.deleteMetricStreamWithContextArgsForCall = append(fake.deleteMetricStreamWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteMetricStreamInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteMetricStreamWithContextStub
	fakeReturns := fake.deleteMetricStreamWithContextReturns
	fake.recordInvocation("DeleteMetricStreamWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteMetricStreamWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamWithContextCallCount() int {
	fake.deleteMetricStreamWithContextMutex.RLock()
	defer fake.deleteMetricStreamWithContextMutex.RUnlock()
	return len(fake.deleteMetricStreamWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamWithContextCalls(stub func(context.Context, *cloudwatch.DeleteMetricStreamInput, ...request.Option) (*cloudwatch.DeleteMetricStreamOutput, error)) {
	fake.deleteMetricStreamWithContextMutex.Lock()
	defer fake.deleteMetricStreamWithContextMutex.Unlock()
	fake.DeleteMetricStreamWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamWithContextArgsForCall(i int) (context.Context, *cloudwatch.DeleteMetricStreamInput, []request.Option) {
	fake.deleteMetricStreamWithContextMutex.RLock()
	defer fake.deleteMetricStreamWithContextMutex.RUnlock()
	argsForCall := fake.deleteMetricStreamWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamWithContextReturns(result1 *cloudwatch.DeleteMetricStreamOutput, result2 error) {
	fake.deleteMetricStreamWithContextMutex.Lock()
	defer fake.deleteMetricStreamWithContextMutex.Unlock()
	fake.DeleteMetricStreamWithContextStub = nil
	fake.deleteMetricStreamWithContextReturns = struct {
		result1 *cloudwatch.DeleteMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteMetricStreamWithContextReturnsOnCall(i int, result1 *cloudwatch.DeleteMetricStreamOutput, result2 error) {
	fake.deleteMetricStreamWithContextMutex.Lock()
	defer fake.deleteMetricStreamWithContextMutex.Unlock()
	fake.DeleteMetricStreamWithContextStub = nil
	if fake.deleteMetricStreamWithContextReturnsOnCall == nil {
		fake.deleteMetricStreamWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteMetricStreamOutput
			result2 error
		})
	}
	fake.deleteMetricStreamWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistory(arg1 *cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	fake.describeAlarmHistoryMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryReturnsOnCall[len(fake.describeAlarmHistoryArgsForCall)]
	fake.describeAlarmHistoryArgsForCall = append(fake.describeAlarmHistoryArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
	}{arg1})
	stub := fake.DescribeAlarmHistoryStub
	fakeReturns := fake.describeAlarmHistoryReturns
	fake.recordInvocation("DescribeAlarmHistory", []interface{}{arg1})
	fake.describeAlarmHistoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryCallCount() int {
	fake.describeAlarmHistoryMutex.RLock()
	defer fake.describeAlarmHistoryMutex.RUnlock()
	return len(fake.describeAlarmHistoryArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryCalls(stub func(*cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error)) {
	fake.describeAlarmHistoryMutex.Lock()
	defer fake.describeAlarmHistoryMutex.Unlock()
	fake.DescribeAlarmHistoryStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryArgsForCall(i int) *cloudwatch.DescribeAlarmHistoryInput {
	fake.describeAlarmHistoryMutex.RLock()
	defer fake.describeAlarmHistoryMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryReturns(result1 *cloudwatch.DescribeAlarmHistoryOutput, result2 error) {
	fake.describeAlarmHistoryMutex.Lock()
	defer fake.describeAlarmHistoryMutex.Unlock()
	fake.DescribeAlarmHistoryStub = nil
	fake.describeAlarmHistoryReturns = struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmHistoryOutput, result2 error) {
	fake.describeAlarmHistoryMutex.Lock()
	defer fake.describeAlarmHistoryMutex.Unlock()
	fake.DescribeAlarmHistoryStub = nil
	if fake.describeAlarmHistoryReturnsOnCall == nil {
		fake.describeAlarmHistoryReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmHistoryOutput
			result2 error
		})
	}
	fake.describeAlarmHistoryReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPages(arg1 *cloudwatch.DescribeAlarmHistoryInput, arg2 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) error {
	fake.describeAlarmHistoryPagesMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryPagesReturnsOnCall[len(fake.describeAlarmHistoryPagesArgsForCall)]
	fake.describeAlarmHistoryPagesArgsForCall = append(fake.describeAlarmHistoryPagesArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
		arg2 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAlarmHistoryPagesStub
	fakeReturns := fake.describeAlarmHistoryPagesReturns
	fake.recordInvocation("DescribeAlarmHistoryPages", []interface{}{arg1, arg2})
	fake.describeAlarmHistoryPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesCallCount() int {
	fake.describeAlarmHistoryPagesMutex.RLock()
	defer fake.describeAlarmHistoryPagesMutex.RUnlock()
	return len(fake.describeAlarmHistoryPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesCalls(stub func(*cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) error) {
	fake.describeAlarmHistoryPagesMutex.Lock()
	defer fake.describeAlarmHistoryPagesMutex.Unlock()
	fake.DescribeAlarmHistoryPagesStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesArgsForCall(i int) (*cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) {
	fake.describeAlarmHistoryPagesMutex.RLock()
	defer fake.describeAlarmHistoryPagesMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesReturns(result1 error) {
	fake.describeAlarmHistoryPagesMutex.Lock()
	defer fake.describeAlarmHistoryPagesMutex.Unlock()
	fake.DescribeAlarmHistoryPagesStub = nil
	fake.describeAlarmHistoryPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesReturnsOnCall(i int, result1 error) {
	fake.describeAlarmHistoryPagesMutex.Lock()
	defer fake.describeAlarmHistoryPagesMutex.Unlock()
	fake.DescribeAlarmHistoryPagesStub = nil
	if fake.describeAlarmHistoryPagesReturnsOnCall == nil {
		fake.describeAlarmHistoryPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAlarmHistoryPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmHistoryInput, arg3 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAlarmHistoryPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryPagesWithContextReturnsOnCall[len(fake.describeAlarmHistoryPagesWithContextArgsForCall)]
	fake.describeAlarmHistoryPagesWithContextArgsForCall = append(fake.describeAlarmHistoryPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmHistoryInput
		arg3 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAlarmHistoryPagesWithContextStub
	fakeReturns := fake.describeAlarmHistoryPagesWithContextReturns
	fake.recordInvocation("DescribeAlarmHistoryPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAlarmHistoryPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextCallCount() int {
	fake.describeAlarmHistoryPagesWithContextMutex.RLock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.RUnlock()
	return len(fake.describeAlarmHistoryPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, ...request.Option) error) {
	fake.describeAlarmHistoryPagesWithContextMutex.Lock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, []request.Option) {
	fake.describeAlarmHistoryPagesWithContextMutex.RLock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextReturns(result1 error) {
	fake.describeAlarmHistoryPagesWithContextMutex.Lock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryPagesWithContextStub = nil
	fake.describeAlarmHistoryPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAlarmHistoryPagesWithContextMutex.Lock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryPagesWithContextStub = nil
	if fake.describeAlarmHistoryPagesWithContextReturnsOnCall == nil {
		fake.describeAlarmHistoryPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAlarmHistoryPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequest(arg1 *cloudwatch.DescribeAlarmHistoryInput) (*request.Request, *cloudwatch.DescribeAlarmHistoryOutput) {
	fake.describeAlarmHistoryRequestMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryRequestReturnsOnCall[len(fake.describeAlarmHistoryRequestArgsForCall)]
	fake.describeAlarmHistoryRequestArgsForCall = append(fake.describeAlarmHistoryRequestArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
	}{arg1})
	stub := fake.DescribeAlarmHistoryRequestStub
	fakeReturns := fake.describeAlarmHistoryRequestReturns
	fake.recordInvocation("DescribeAlarmHistoryRequest", []interface{}{arg1})
	fake.describeAlarmHistoryRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestCallCount() int {
	fake.describeAlarmHistoryRequestMutex.RLock()
	defer fake.describeAlarmHistoryRequestMutex.RUnlock()
	return len(fake.describeAlarmHistoryRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestCalls(stub func(*cloudwatch.DescribeAlarmHistoryInput) (*request.Request, *cloudwatch.DescribeAlarmHistoryOutput)) {
	fake.describeAlarmHistoryRequestMutex.Lock()
	defer fake.describeAlarmHistoryRequestMutex.Unlock()
	fake.DescribeAlarmHistoryRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestArgsForCall(i int) *cloudwatch.DescribeAlarmHistoryInput {
	fake.describeAlarmHistoryRequestMutex.RLock()
	defer fake.describeAlarmHistoryRequestMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestReturns(result1 *request.Request, result2 *cloudwatch.DescribeAlarmHistoryOutput) {
	fake.describeAlarmHistoryRequestMutex.Lock()
	defer fake.describeAlarmHistoryRequestMutex.Unlock()
	fake.DescribeAlarmHistoryRequestStub = nil
	fake.describeAlarmHistoryRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmHistoryOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DescribeAlarmHistoryOutput) {
	fake.describeAlarmHistoryRequestMutex.Lock()
	defer fake.describeAlarmHistoryRequestMutex.Unlock()
	fake.DescribeAlarmHistoryRequestStub = nil
	if fake.describeAlarmHistoryRequestReturnsOnCall == nil {
		fake.describeAlarmHistoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DescribeAlarmHistoryOutput
		})
	}
	fake.describeAlarmHistoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmHistoryOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmHistoryInput, arg3 ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	fake.describeAlarmHistoryWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryWithContextReturnsOnCall[len(fake.describeAlarmHistoryWithContextArgsForCall)]
	fake.describeAlarmHistoryWithContextArgsForCall = append(fake.describeAlarmHistoryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmHistoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAlarmHistoryWithContextStub
	fakeReturns := fake.describeAlarmHistoryWithContextReturns
	fake.recordInvocation("DescribeAlarmHistoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAlarmHistoryWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextCallCount() int {
	fake.describeAlarmHistoryWithContextMutex.RLock()
	defer fake.describeAlarmHistoryWithContextMutex.RUnlock()
	return len(fake.describeAlarmHistoryWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error)) {
	fake.describeAlarmHistoryWithContextMutex.Lock()
	defer fake.describeAlarmHistoryWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmHistoryInput, []request.Option) {
	fake.describeAlarmHistoryWithContextMutex.RLock()
	defer fake.describeAlarmHistoryWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextReturns(result1 *cloudwatch.DescribeAlarmHistoryOutput, result2 error) {
	fake.describeAlarmHistoryWithContextMutex.Lock()
	defer fake.describeAlarmHistoryWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryWithContextStub = nil
	fake.describeAlarmHistoryWithContextReturns = struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmHistoryOutput, result2 error) {
	fake.describeAlarmHistoryWithContextMutex.Lock()
	defer fake.describeAlarmHistoryWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryWithContextStub = nil
	if fake.describeAlarmHistoryWithContextReturnsOnCall == nil {
		fake.describeAlarmHistoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmHistoryOutput
			result2 error
		})
	}
	fake.describeAlarmHistoryWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarms(arg1 *cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error) {
	fake.describeAlarmsMutex.Lock()
	ret, specificReturn := fake.describeAlarmsReturnsOnCall[len(fake.describeAlarmsArgsForCall)]
	fake.describeAlarmsArgsForCall = append(fake.describeAlarmsArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}{arg1})
	stub := fake.DescribeAlarmsStub
	fakeReturns := fake.describeAlarmsReturns
	fake.recordInvocation("DescribeAlarms", []interface{}{arg1})
	fake.describeAlarmsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsCallCount() int {
	fake.describeAlarmsMutex.RLock()
	defer fake.describeAlarmsMutex.RUnlock()
	return len(fake.describeAlarmsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsCalls(stub func(*cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error)) {
	fake.describeAlarmsMutex.Lock()
	defer fake.describeAlarmsMutex.Unlock()
	fake.DescribeAlarmsStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsArgsForCall(i int) *cloudwatch.DescribeAlarmsInput {
	fake.describeAlarmsMutex.RLock()
	defer fake.describeAlarmsMutex.RUnlock()
	argsForCall := fake.describeAlarmsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsReturns(result1 *cloudwatch.DescribeAlarmsOutput, result2 error) {
	fake.describeAlarmsMutex.Lock()
	defer fake.describeAlarmsMutex.Unlock()
	fake.DescribeAlarmsStub = nil
	fake.describeAlarmsReturns = struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmsOutput, result2 error) {
	fake.describeAlarmsMutex.Lock()
	defer fake.describeAlarmsMutex.Unlock()
	fake.DescribeAlarmsStub = nil
	if fake.describeAlarmsReturnsOnCall == nil {
		fake.describeAlarmsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmsOutput
			result2 error
		})
	}
	fake.describeAlarmsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetric(arg1 *cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	fake.describeAlarmsForMetricMutex.Lock()
	ret, specificReturn := fake.describeAlarmsForMetricReturnsOnCall[len(fake.describeAlarmsForMetricArgsForCall)]
	fake.describeAlarmsForMetricArgsForCall = append(fake.describeAlarmsForMetricArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsForMetricInput
	}{arg1})
	stub := fake.DescribeAlarmsForMetricStub
	fakeReturns := fake.describeAlarmsForMetricReturns
	fake.recordInvocation("DescribeAlarmsForMetric", []interface{}{arg1})
	fake.describeAlarmsForMetricMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricCallCount() int {
	fake.describeAlarmsForMetricMutex.RLock()
	defer fake.describeAlarmsForMetricMutex.RUnlock()
	return len(fake.describeAlarmsForMetricArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricCalls(stub func(*cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error)) {
	fake.describeAlarmsForMetricMutex.Lock()
	defer fake.describeAlarmsForMetricMutex.Unlock()
	fake.DescribeAlarmsForMetricStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricArgsForCall(i int) *cloudwatch.DescribeAlarmsForMetricInput {
	fake.describeAlarmsForMetricMutex.RLock()
	defer fake.describeAlarmsForMetricMutex.RUnlock()
	argsForCall := fake.describeAlarmsForMetricArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricReturns(result1 *cloudwatch.DescribeAlarmsForMetricOutput, result2 error) {
	fake.describeAlarmsForMetricMutex.Lock()
	defer fake.describeAlarmsForMetricMutex.Unlock()
	fake.DescribeAlarmsForMetricStub = nil
	fake.describeAlarmsForMetricReturns = struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmsForMetricOutput, result2 error) {
	fake.describeAlarmsForMetricMutex.Lock()
	defer fake.describeAlarmsForMetricMutex.Unlock()
	fake.DescribeAlarmsForMetricStub = nil
	if fake.describeAlarmsForMetricReturnsOnCall == nil {
		fake.describeAlarmsForMetricReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmsForMetricOutput
			result2 error
		})
	}
	fake.describeAlarmsForMetricReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequest(arg1 *cloudwatch.DescribeAlarmsForMetricInput) (*request.Request, *cloudwatch.DescribeAlarmsForMetricOutput) {
	fake.describeAlarmsForMetricRequestMutex.Lock()
	ret, specificReturn := fake.describeAlarmsForMetricRequestReturnsOnCall[len(fake.describeAlarmsForMetricRequestArgsForCall)]
	fake.describeAlarmsForMetricRequestArgsForCall = append(fake.describeAlarmsForMetricRequestArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsForMetricInput
	}{arg1})
	stub := fake.DescribeAlarmsForMetricRequestStub
	fakeReturns := fake.describeAlarmsForMetricRequestReturns
	fake.recordInvocation("DescribeAlarmsForMetricRequest", []interface{}{arg1})
	fake.describeAlarmsForMetricRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestCallCount() int {
	fake.describeAlarmsForMetricRequestMutex.RLock()
	defer fake.describeAlarmsForMetricRequestMutex.RUnlock()
	return len(fake.describeAlarmsForMetricRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestCalls(stub func(*cloudwatch.DescribeAlarmsForMetricInput) (*request.Request, *cloudwatch.DescribeAlarmsForMetricOutput)) {
	fake.describeAlarmsForMetricRequestMutex.Lock()
	defer fake.describeAlarmsForMetricRequestMutex.Unlock()
	fake.DescribeAlarmsForMetricRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestArgsForCall(i int) *cloudwatch.DescribeAlarmsForMetricInput {
	fake.describeAlarmsForMetricRequestMutex.RLock()
	defer fake.describeAlarmsForMetricRequestMutex.RUnlock()
	argsForCall := fake.describeAlarmsForMetricRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestReturns(result1 *request.Request, result2 *cloudwatch.DescribeAlarmsForMetricOutput) {
	fake.describeAlarmsForMetricRequestMutex.Lock()
	defer fake.describeAlarmsForMetricRequestMutex.Unlock()
	fake.DescribeAlarmsForMetricRequestStub = nil
	fake.describeAlarmsForMetricRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsForMetricOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DescribeAlarmsForMetricOutput) {
	fake.describeAlarmsForMetricRequestMutex.Lock()
	defer fake.describeAlarmsForMetricRequestMutex.Unlock()
	fake.DescribeAlarmsForMetricRequestStub = nil
	if fake.describeAlarmsForMetricRequestReturnsOnCall == nil {
		fake.describeAlarmsForMetricRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DescribeAlarmsForMetricOutput
		})
	}
	fake.describeAlarmsForMetricRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsForMetricOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsForMetricInput, arg3 ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	fake.describeAlarmsForMetricWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmsForMetricWithContextReturnsOnCall[len(fake.describeAlarmsForMetricWithContextArgsForCall)]
	fake.describeAlarmsForMetricWithContextArgsForCall = append(fake.describeAlarmsForMetricWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsForMetricInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAlarmsForMetricWithContextStub
	fakeReturns := fake.describeAlarmsForMetricWithContextReturns
	fake.recordInvocation("DescribeAlarmsForMetricWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAlarmsForMetricWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextCallCount() int {
	fake.describeAlarmsForMetricWithContextMutex.RLock()
	defer fake.describeAlarmsForMetricWithContextMutex.RUnlock()
	return len(fake.describeAlarmsForMetricWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsForMetricInput, ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error)) {
	fake.describeAlarmsForMetricWithContextMutex.Lock()
	defer fake.describeAlarmsForMetricWithContextMutex.Unlock()
	fake.DescribeAlarmsForMetricWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsForMetricInput, []request.Option) {
	fake.describeAlarmsForMetricWithContextMutex.RLock()
	defer fake.describeAlarmsForMetricWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmsForMetricWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextReturns(result1 *cloudwatch.DescribeAlarmsForMetricOutput, result2 error) {
	fake.describeAlarmsForMetricWithContextMutex.Lock()
	defer fake.describeAlarmsForMetricWithContextMutex.Unlock()
	fake.DescribeAlarmsForMetricWithContextStub = nil
	fake.describeAlarmsForMetricWithContextReturns = struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmsForMetricOutput, result2 error) {
	fake.describeAlarmsForMetricWithContextMutex.Lock()
	defer fake.describeAlarmsForMetricWithContextMutex.Unlock()
	fake.DescribeAlarmsForMetricWithContextStub = nil
	if fake.describeAlarmsForMetricWithContextReturnsOnCall == nil {
		fake.describeAlarmsForMetricWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmsForMetricOutput
			result2 error
		})
	}
	fake.describeAlarmsForMetricWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPages(arg1 *cloudwatch.DescribeAlarmsInput, arg2 func(*cloudwatch.DescribeAlarmsOutput, bool) bool) error {
	fake.describeAlarmsPagesMutex.Lock()
	ret, specificReturn := fake.describeAlarmsPagesReturnsOnCall[len(fake.describeAlarmsPagesArgsForCall)]
	fake.describeAlarmsPagesArgsForCall = append(fake.describeAlarmsPagesArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
		arg2 func(*cloudwatch.DescribeAlarmsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAlarmsPagesStub
	fakeReturns := fake.describeAlarmsPagesReturns
	fake.recordInvocation("DescribeAlarmsPages", []interface{}{arg1, arg2})
	fake.describeAlarmsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesCallCount() int {
	fake.describeAlarmsPagesMutex.RLock()
	defer fake.describeAlarmsPagesMutex.RUnlock()
	return len(fake.describeAlarmsPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesCalls(stub func(*cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool) error) {
	fake.describeAlarmsPagesMutex.Lock()
	defer fake.describeAlarmsPagesMutex.Unlock()
	fake.DescribeAlarmsPagesStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesArgsForCall(i int) (*cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool) {
	fake.describeAlarmsPagesMutex.RLock()
	defer fake.describeAlarmsPagesMutex.RUnlock()
	argsForCall := fake.describeAlarmsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesReturns(result1 error) {
	fake.describeAlarmsPagesMutex.Lock()
	defer fake.describeAlarmsPagesMutex.Unlock()
	fake.DescribeAlarmsPagesStub = nil
	fake.describeAlarmsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesReturnsOnCall(i int, result1 error) {
	fake.describeAlarmsPagesMutex.Lock()
	defer fake.describeAlarmsPagesMutex.Unlock()
	fake.DescribeAlarmsPagesStub = nil
	if fake.describeAlarmsPagesReturnsOnCall == nil {
		fake.describeAlarmsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAlarmsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsInput, arg3 func(*cloudwatch.DescribeAlarmsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAlarmsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmsPagesWithContextReturnsOnCall[len(fake.describeAlarmsPagesWithContextArgsForCall)]
	fake.describeAlarmsPagesWithContextArgsForCall = append(fake.describeAlarmsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 func(*cloudwatch.DescribeAlarmsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAlarmsPagesWithContextStub
	fakeReturns := fake.describeAlarmsPagesWithContextReturns
	fake.recordInvocation("DescribeAlarmsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAlarmsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextCallCount() int {
	fake.describeAlarmsPagesWithContextMutex.RLock()
	defer fake.describeAlarmsPagesWithContextMutex.RUnlock()
	return len(fake.describeAlarmsPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool, ...request.Option) error) {
	fake.describeAlarmsPagesWithContextMutex.Lock()
	defer fake.describeAlarmsPagesWithContextMutex.Unlock()
	fake.DescribeAlarmsPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool, []request.Option) {
	fake.describeAlarmsPagesWithContextMutex.RLock()
	defer fake.describeAlarmsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextReturns(result1 error) {
	fake.describeAlarmsPagesWithContextMutex.Lock()
	defer fake.describeAlarmsPagesWithContextMutex.Unlock()
	fake.DescribeAlarmsPagesWithContextStub = nil
	fake.describeAlarmsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAlarmsPagesWithContextMutex.Lock()
	defer fake.describeAlarmsPagesWithContextMutex.Unlock()
	fake.DescribeAlarmsPagesWithContextStub = nil
	if fake.describeAlarmsPagesWithContextReturnsOnCall == nil {
		fake.describeAlarmsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAlarmsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequest(arg1 *cloudwatch.DescribeAlarmsInput) (*request.Request, *cloudwatch.DescribeAlarmsOutput) {
	fake.describeAlarmsRequestMutex.Lock()
	ret, specificReturn := fake.describeAlarmsRequestReturnsOnCall[len(fake.describeAlarmsRequestArgsForCall)]
	fake.describeAlarmsRequestArgsForCall = append(fake.describeAlarmsRequestArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}{arg1})
	stub := fake.DescribeAlarmsRequestStub
	fakeReturns := fake.describeAlarmsRequestReturns
	fake.recordInvocation("DescribeAlarmsRequest", []interface{}{arg1})
	fake.describeAlarmsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestCallCount() int {
	fake.describeAlarmsRequestMutex.RLock()
	defer fake.describeAlarmsRequestMutex.RUnlock()
	return len(fake.describeAlarmsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestCalls(stub func(*cloudwatch.DescribeAlarmsInput) (*request.Request, *cloudwatch.DescribeAlarmsOutput)) {
	fake.describeAlarmsRequestMutex.Lock()
	defer fake.describeAlarmsRequestMutex.Unlock()
	fake.DescribeAlarmsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestArgsForCall(i int) *cloudwatch.DescribeAlarmsInput {
	fake.describeAlarmsRequestMutex.RLock()
	defer fake.describeAlarmsRequestMutex.RUnlock()
	argsForCall := fake.describeAlarmsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestReturns(result1 *request.Request, result2 *cloudwatch.DescribeAlarmsOutput) {
	fake.describeAlarmsRequestMutex.Lock()
	defer fake.describeAlarmsRequestMutex.Unlock()
	fake.DescribeAlarmsRequestStub = nil
	fake.describeAlarmsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DescribeAlarmsOutput) {
	fake.describeAlarmsRequestMutex.Lock()
	defer fake.describeAlarmsRequestMutex.Unlock()
	fake.DescribeAlarmsRequestStub = nil
	if fake.describeAlarmsRequestReturnsOnCall == nil {
		fake.describeAlarmsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DescribeAlarmsOutput
		})
	}
	fake.describeAlarmsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsInput, arg3 ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error) {
	fake.describeAlarmsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmsWithContextReturnsOnCall[len(fake.describeAlarmsWithContextArgsForCall)]
	fake.describeAlarmsWithContextArgsForCall = append(fake.describeAlarmsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAlarmsWithContextStub
	fakeReturns := fake.describeAlarmsWithContextReturns
	fake.recordInvocation("DescribeAlarmsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAlarmsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextCallCount() int {
	fake.describeAlarmsWithContextMutex.RLock()
	defer fake.describeAlarmsWithContextMutex.RUnlock()
	return len(fake.describeAlarmsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error)) {
	fake.describeAlarmsWithContextMutex.Lock()
	defer fake.describeAlarmsWithContextMutex.Unlock()
	fake.DescribeAlarmsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsInput, []request.Option) {
	fake.describeAlarmsWithContextMutex.RLock()
	defer fake.describeAlarmsWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextReturns(result1 *cloudwatch.DescribeAlarmsOutput, result2 error) {
	fake.describeAlarmsWithContextMutex.Lock()
	defer fake.describeAlarmsWithContextMutex.Unlock()
	fake.DescribeAlarmsWithContextStub = nil
	fake.describeAlarmsWithContextReturns = struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmsOutput, result2 error) {
	fake.describeAlarmsWithContextMutex.Lock()
	defer fake.describeAlarmsWithContextMutex.Unlock()
	fake.DescribeAlarmsWithContextStub = nil
	if fake.describeAlarmsWithContextReturnsOnCall == nil {
		fake.describeAlarmsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmsOutput
			result2 error
		})
	}
	fake.describeAlarmsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectors(arg1 *cloudwatch.DescribeAnomalyDetectorsInput) (*cloudwatch.DescribeAnomalyDetectorsOutput, error) {
	fake.describeAnomalyDetectorsMutex.Lock()
	ret, specificReturn := fake.describeAnomalyDetectorsReturnsOnCall[len(fake.describeAnomalyDetectorsArgsForCall)]
	fake.describeAnomalyDetectorsArgsForCall = append(fake.describeAnomalyDetectorsArgsForCall, struct {
		arg1 *cloudwatch.DescribeAnomalyDetectorsInput
	}{arg1})
	stub := fake.DescribeAnomalyDetectorsStub
	fakeReturns := fake.describeAnomalyDetectorsReturns
	fake.recordInvocation("DescribeAnomalyDetectors", []interface{}{arg1})
	fake.describeAnomalyDetectorsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsCallCount() int {
	fake.describeAnomalyDetectorsMutex.RLock()
	defer fake.describeAnomalyDetectorsMutex.RUnlock()
	return len(fake.describeAnomalyDetectorsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsCalls(stub func(*cloudwatch.DescribeAnomalyDetectorsInput) (*cloudwatch.DescribeAnomalyDetectorsOutput, error)) {
	fake.describeAnomalyDetectorsMutex.Lock()
	defer fake.describeAnomalyDetectorsMutex.Unlock()
	fake.DescribeAnomalyDetectorsStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsArgsForCall(i int) *cloudwatch.DescribeAnomalyDetectorsInput {
	fake.describeAnomalyDetectorsMutex.RLock()
	defer fake.describeAnomalyDetectorsMutex.RUnlock()
	argsForCall := fake.describeAnomalyDetectorsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsReturns(result1 *cloudwatch.DescribeAnomalyDetectorsOutput, result2 error) {
	fake.describeAnomalyDetectorsMutex.Lock()
	defer fake.describeAnomalyDetectorsMutex.Unlock()
	fake.DescribeAnomalyDetectorsStub = nil
	fake.describeAnomalyDetectorsReturns = struct {
		result1 *cloudwatch.DescribeAnomalyDetectorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsReturnsOnCall(i int, result1 *cloudwatch.DescribeAnomalyDetectorsOutput, result2 error) {
	fake.describeAnomalyDetectorsMutex.Lock()
	defer fake.describeAnomalyDetectorsMutex.Unlock()
	fake.DescribeAnomalyDetectorsStub = nil
	if fake.describeAnomalyDetectorsReturnsOnCall == nil {
		fake.describeAnomalyDetectorsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAnomalyDetectorsOutput
			result2 error
		})
	}
	fake.describeAnomalyDetectorsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAnomalyDetectorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPages(arg1 *cloudwatch.DescribeAnomalyDetectorsInput, arg2 func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool) error {
	fake.describeAnomalyDetectorsPagesMutex.Lock()
	ret, specificReturn := fake.describeAnomalyDetectorsPagesReturnsOnCall[len(fake.describeAnomalyDetectorsPagesArgsForCall)]
	fake.describeAnomalyDetectorsPagesArgsForCall = append(fake.describeAnomalyDetectorsPagesArgsForCall, struct {
		arg1 *cloudwatch.DescribeAnomalyDetectorsInput
		arg2 func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAnomalyDetectorsPagesStub
	fakeReturns := fake.describeAnomalyDetectorsPagesReturns
	fake.recordInvocation("DescribeAnomalyDetectorsPages", []interface{}{arg1, arg2})
	fake.describeAnomalyDetectorsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesCallCount() int {
	fake.describeAnomalyDetectorsPagesMutex.RLock()
	defer fake.describeAnomalyDetectorsPagesMutex.RUnlock()
	return len(fake.describeAnomalyDetectorsPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesCalls(stub func(*cloudwatch.DescribeAnomalyDetectorsInput, func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool) error) {
	fake.describeAnomalyDetectorsPagesMutex.Lock()
	defer fake.describeAnomalyDetectorsPagesMutex.Unlock()
	fake.DescribeAnomalyDetectorsPagesStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesArgsForCall(i int) (*cloudwatch.DescribeAnomalyDetectorsInput, func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool) {
	fake.describeAnomalyDetectorsPagesMutex.RLock()
	defer fake.describeAnomalyDetectorsPagesMutex.RUnlock()
	argsForCall := fake.describeAnomalyDetectorsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesReturns(result1 error) {
	fake.describeAnomalyDetectorsPagesMutex.Lock()
	defer fake.describeAnomalyDetectorsPagesMutex.Unlock()
	fake.DescribeAnomalyDetectorsPagesStub = nil
	fake.describeAnomalyDetectorsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesReturnsOnCall(i int, result1 error) {
	fake.describeAnomalyDetectorsPagesMutex.Lock()
	defer fake.describeAnomalyDetectorsPagesMutex.Unlock()
	fake.DescribeAnomalyDetectorsPagesStub = nil
	if fake.describeAnomalyDetectorsPagesReturnsOnCall == nil {
		fake.describeAnomalyDetectorsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAnomalyDetectorsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAnomalyDetectorsInput, arg3 func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAnomalyDetectorsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAnomalyDetectorsPagesWithContextReturnsOnCall[len(fake.describeAnomalyDetectorsPagesWithContextArgsForCall)]
	fake.describeAnomalyDetectorsPagesWithContextArgsForCall = append(fake.describeAnomalyDetectorsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAnomalyDetectorsInput
		arg3 func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAnomalyDetectorsPagesWithContextStub
	fakeReturns := fake.describeAnomalyDetectorsPagesWithContextReturns
	fake.recordInvocation("DescribeAnomalyDetectorsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAnomalyDetectorsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesWithContextCallCount() int {
	fake.describeAnomalyDetectorsPagesWithContextMutex.RLock()
	defer fake.describeAnomalyDetectorsPagesWithContextMutex.RUnlock()
	return len(fake.describeAnomalyDetectorsPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool, ...request.Option) error) {
	fake.describeAnomalyDetectorsPagesWithContextMutex.Lock()
	defer fake.describeAnomalyDetectorsPagesWithContextMutex.Unlock()
	fake.DescribeAnomalyDetectorsPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, func(*cloudwatch.DescribeAnomalyDetectorsOutput, bool) bool, []request.Option) {
	fake.describeAnomalyDetectorsPagesWithContextMutex.RLock()
	defer fake.describeAnomalyDetectorsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAnomalyDetectorsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesWithContextReturns(result1 error) {
	fake.describeAnomalyDetectorsPagesWithContextMutex.Lock()
	defer fake.describeAnomalyDetectorsPagesWithContextMutex.Unlock()
	fake.DescribeAnomalyDetectorsPagesWithContextStub = nil
	fake.describeAnomalyDetectorsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAnomalyDetectorsPagesWithContextMutex.Lock()
	defer fake.describeAnomalyDetectorsPagesWithContextMutex.Unlock()
	fake.DescribeAnomalyDetectorsPagesWithContextStub = nil
	if fake.describeAnomalyDetectorsPagesWithContextReturnsOnCall == nil {
		fake.describeAnomalyDetectorsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAnomalyDetectorsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsRequest(arg1 *cloudwatch.DescribeAnomalyDetectorsInput) (*request.Request, *cloudwatch.DescribeAnomalyDetectorsOutput) {
	fake.describeAnomalyDetectorsRequestMutex.Lock()
	ret, specificReturn := fake.describeAnomalyDetectorsRequestReturnsOnCall[len(fake.describeAnomalyDetectorsRequestArgsForCall)]
	fake.describeAnomalyDetectorsRequestArgsForCall = append(fake.describeAnomalyDetectorsRequestArgsForCall, struct {
		arg1 *cloudwatch.DescribeAnomalyDetectorsInput
	}{arg1})
	stub := fake.DescribeAnomalyDetectorsRequestStub
	fakeReturns := fake.describeAnomalyDetectorsRequestReturns
	fake.recordInvocation("DescribeAnomalyDetectorsRequest", []interface{}{arg1})
	fake.describeAnomalyDetectorsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsRequestCallCount() int {
	fake.describeAnomalyDetectorsRequestMutex.RLock()
	defer fake.describeAnomalyDetectorsRequestMutex.RUnlock()
	return len(fake.describeAnomalyDetectorsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsRequestCalls(stub func(*cloudwatch.DescribeAnomalyDetectorsInput) (*request.Request, *cloudwatch.DescribeAnomalyDetectorsOutput)) {
	fake.describeAnomalyDetectorsRequestMutex.Lock()
	defer fake.describeAnomalyDetectorsRequestMutex.Unlock()
	fake.DescribeAnomalyDetectorsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsRequestArgsForCall(i int) *cloudwatch.DescribeAnomalyDetectorsInput {
	fake.describeAnomalyDetectorsRequestMutex.RLock()
	defer fake.describeAnomalyDetectorsRequestMutex.RUnlock()
	argsForCall := fake.describeAnomalyDetectorsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsRequestReturns(result1 *request.Request, result2 *cloudwatch.DescribeAnomalyDetectorsOutput) {
	fake.describeAnomalyDetectorsRequestMutex.Lock()
	defer fake.describeAnomalyDetectorsRequestMutex.Unlock()
	fake.DescribeAnomalyDetectorsRequestStub = nil
	fake.describeAnomalyDetectorsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAnomalyDetectorsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DescribeAnomalyDetectorsOutput) {
	fake.describeAnomalyDetectorsRequestMutex.Lock()
	defer fake.describeAnomalyDetectorsRequestMutex.Unlock()
	fake.DescribeAnomalyDetectorsRequestStub = nil
	if fake.describeAnomalyDetectorsRequestReturnsOnCall == nil {
		fake.describeAnomalyDetectorsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DescribeAnomalyDetectorsOutput
		})
	}
	fake.describeAnomalyDetectorsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAnomalyDetectorsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAnomalyDetectorsInput, arg3 ...request.Option) (*cloudwatch.DescribeAnomalyDetectorsOutput, error) {
	fake.describeAnomalyDetectorsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAnomalyDetectorsWithContextReturnsOnCall[len(fake.describeAnomalyDetectorsWithContextArgsForCall)]
	fake.describeAnomalyDetectorsWithContextArgsForCall = append(fake.describeAnomalyDetectorsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAnomalyDetectorsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAnomalyDetectorsWithContextStub
	fakeReturns := fake.describeAnomalyDetectorsWithContextReturns
	fake.recordInvocation("DescribeAnomalyDetectorsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAnomalyDetectorsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsWithContextCallCount() int {
	fake.describeAnomalyDetectorsWithContextMutex.RLock()
	defer fake.describeAnomalyDetectorsWithContextMutex.RUnlock()
	return len(fake.describeAnomalyDetectorsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, ...request.Option) (*cloudwatch.DescribeAnomalyDetectorsOutput, error)) {
	fake.describeAnomalyDetectorsWithContextMutex.Lock()
	defer fake.describeAnomalyDetectorsWithContextMutex.Unlock()
	fake.DescribeAnomalyDetectorsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, []request.Option) {
	fake.describeAnomalyDetectorsWithContextMutex.RLock()
	defer fake.describeAnomalyDetectorsWithContextMutex.RUnlock()
	argsForCall := fake.describeAnomalyDetectorsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsWithContextReturns(result1 *cloudwatch.DescribeAnomalyDetectorsOutput, result2 error) {
	fake.describeAnomalyDetectorsWithContextMutex.Lock()
	defer fake.describeAnomalyDetectorsWithContextMutex.Unlock()
	fake.DescribeAnomalyDetectorsWithContextStub = nil
	fake.describeAnomalyDetectorsWithContextReturns = struct {
		result1 *cloudwatch.DescribeAnomalyDetectorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAnomalyDetectorsWithContextReturnsOnCall(i int, result1 *cloudwatch.DescribeAnomalyDetectorsOutput, result2 error) {
	fake.describeAnomalyDetectorsWithContextMutex.Lock()
	defer fake.describeAnomalyDetectorsWithContextMutex.Unlock()
	fake.DescribeAnomalyDetectorsWithContextStub = nil
	if fake.describeAnomalyDetectorsWithContextReturnsOnCall == nil {
		fake.describeAnomalyDetectorsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAnomalyDetectorsOutput
			result2 error
		})
	}
	fake.describeAnomalyDetectorsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAnomalyDetectorsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRules(arg1 *cloudwatch.DescribeInsightRulesInput) (*cloudwatch.DescribeInsightRulesOutput, error) {
	fake.describeInsightRulesMutex.Lock()
	ret, specificReturn := fake.describeInsightRulesReturnsOnCall[len(fake.describeInsightRulesArgsForCall)]
	fake.describeInsightRulesArgsForCall = append(fake.describeInsightRulesArgsForCall, struct {
		arg1 *cloudwatch.DescribeInsightRulesInput
	}{arg1})
	stub := fake.DescribeInsightRulesStub
	fakeReturns := fake.describeInsightRulesReturns
	fake.recordInvocation("DescribeInsightRules", []interface{}{arg1})
	fake.describeInsightRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesCallCount() int {
	fake.describeInsightRulesMutex.RLock()
	defer fake.describeInsightRulesMutex.RUnlock()
	return len(fake.describeInsightRulesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesCalls(stub func(*cloudwatch.DescribeInsightRulesInput) (*cloudwatch.DescribeInsightRulesOutput, error)) {
	fake.describeInsightRulesMutex.Lock()
	defer fake.describeInsightRulesMutex.Unlock()
	fake.DescribeInsightRulesStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesArgsForCall(i int) *cloudwatch.DescribeInsightRulesInput {
	fake.describeInsightRulesMutex.RLock()
	defer fake.describeInsightRulesMutex.RUnlock()
	argsForCall := fake.describeInsightRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesReturns(result1 *cloudwatch.DescribeInsightRulesOutput, result2 error) {
	fake.describeInsightRulesMutex.Lock()
	defer fake.describeInsightRulesMutex.Unlock()
	fake.DescribeInsightRulesStub = nil
	fake.describeInsightRulesReturns = struct {
		result1 *cloudwatch.DescribeInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesReturnsOnCall(i int, result1 *cloudwatch.DescribeInsightRulesOutput, result2 error) {
	fake.describeInsightRulesMutex.Lock()
	defer fake.describeInsightRulesMutex.Unlock()
	fake.DescribeInsightRulesStub = nil
	if fake.describeInsightRulesReturnsOnCall == nil {
		fake.describeInsightRulesReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeInsightRulesOutput
			result2 error
		})
	}
	fake.describeInsightRulesReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPages(arg1 *cloudwatch.DescribeInsightRulesInput, arg2 func(*cloudwatch.DescribeInsightRulesOutput, bool) bool) error {
	fake.describeInsightRulesPagesMutex.Lock()
	ret, specificReturn := fake.describeInsightRulesPagesReturnsOnCall[len(fake.describeInsightRulesPagesArgsForCall)]
	fake.describeInsightRulesPagesArgsForCall = append(fake.describeInsightRulesPagesArgsForCall, struct {
		arg1 *cloudwatch.DescribeInsightRulesInput
		arg2 func(*cloudwatch.DescribeInsightRulesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeInsightRulesPagesStub
	fakeReturns := fake.describeInsightRulesPagesReturns
	fake.recordInvocation("DescribeInsightRulesPages", []interface{}{arg1, arg2})
	fake.describeInsightRulesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesCallCount() int {
	fake.describeInsightRulesPagesMutex.RLock()
	defer fake.describeInsightRulesPagesMutex.RUnlock()
	return len(fake.describeInsightRulesPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesCalls(stub func(*cloudwatch.DescribeInsightRulesInput, func(*cloudwatch.DescribeInsightRulesOutput, bool) bool) error) {
	fake.describeInsightRulesPagesMutex.Lock()
	defer fake.describeInsightRulesPagesMutex.Unlock()
	fake.DescribeInsightRulesPagesStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesArgsForCall(i int) (*cloudwatch.DescribeInsightRulesInput, func(*cloudwatch.DescribeInsightRulesOutput, bool) bool) {
	fake.describeInsightRulesPagesMutex.RLock()
	defer fake.describeInsightRulesPagesMutex.RUnlock()
	argsForCall := fake.describeInsightRulesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesReturns(result1 error) {
	fake.describeInsightRulesPagesMutex.Lock()
	defer fake.describeInsightRulesPagesMutex.Unlock()
	fake.DescribeInsightRulesPagesStub = nil
	fake.describeInsightRulesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesReturnsOnCall(i int, result1 error) {
	fake.describeInsightRulesPagesMutex.Lock()
	defer fake.describeInsightRulesPagesMutex.Unlock()
	fake.DescribeInsightRulesPagesStub = nil
	if fake.describeInsightRulesPagesReturnsOnCall == nil {
		fake.describeInsightRulesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInsightRulesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeInsightRulesInput, arg3 func(*cloudwatch.DescribeInsightRulesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInsightRulesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInsightRulesPagesWithContextReturnsOnCall[len(fake.describeInsightRulesPagesWithContextArgsForCall)]
	fake.describeInsightRulesPagesWithContextArgsForCall = append(fake.describeInsightRulesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeInsightRulesInput
		arg3 func(*cloudwatch.DescribeInsightRulesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeInsightRulesPagesWithContextStub
	fakeReturns := fake.describeInsightRulesPagesWithContextReturns
	fake.recordInvocation("DescribeInsightRulesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInsightRulesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesWithContextCallCount() int {
	fake.describeInsightRulesPagesWithContextMutex.RLock()
	defer fake.describeInsightRulesPagesWithContextMutex.RUnlock()
	return len(fake.describeInsightRulesPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesWithContextCalls(stub func(context.Context, *cloudwatch.DescribeInsightRulesInput, func(*cloudwatch.DescribeInsightRulesOutput, bool) bool, ...request.Option) error) {
	fake.describeInsightRulesPagesWithContextMutex.Lock()
	defer fake.describeInsightRulesPagesWithContextMutex.Unlock()
	fake.DescribeInsightRulesPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeInsightRulesInput, func(*cloudwatch.DescribeInsightRulesOutput, bool) bool, []request.Option) {
	fake.describeInsightRulesPagesWithContextMutex.RLock()
	defer fake.describeInsightRulesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInsightRulesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesWithContextReturns(result1 error) {
	fake.describeInsightRulesPagesWithContextMutex.Lock()
	defer fake.describeInsightRulesPagesWithContextMutex.Unlock()
	fake.DescribeInsightRulesPagesWithContextStub = nil
	fake.describeInsightRulesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInsightRulesPagesWithContextMutex.Lock()
	defer fake.describeInsightRulesPagesWithContextMutex.Unlock()
	fake.DescribeInsightRulesPagesWithContextStub = nil
	if fake.describeInsightRulesPagesWithContextReturnsOnCall == nil {
		fake.describeInsightRulesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInsightRulesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesRequest(arg1 *cloudwatch.DescribeInsightRulesInput) (*request.Request, *cloudwatch.DescribeInsightRulesOutput) {
	fake.describeInsightRulesRequestMutex.Lock()
	ret, specificReturn := fake.describeInsightRulesRequestReturnsOnCall[len(fake.describeInsightRulesRequestArgsForCall)]
	fake.describeInsightRulesRequestArgsForCall = append(fake.describeInsightRulesRequestArgsForCall, struct {
		arg1 *cloudwatch.DescribeInsightRulesInput
	}{arg1})
	stub := fake.DescribeInsightRulesRequestStub
	fakeReturns := fake.describeInsightRulesRequestReturns
	fake.recordInvocation("DescribeInsightRulesRequest", []interface{}{arg1})
	fake.describeInsightRulesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesRequestCallCount() int {
	fake.describeInsightRulesRequestMutex.RLock()
	defer fake.describeInsightRulesRequestMutex.RUnlock()
	return len(fake.describeInsightRulesRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesRequestCalls(stub func(*cloudwatch.DescribeInsightRulesInput) (*request.Request, *cloudwatch.DescribeInsightRulesOutput)) {
	fake.describeInsightRulesRequestMutex.Lock()
	defer fake.describeInsightRulesRequestMutex.Unlock()
	fake.DescribeInsightRulesRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesRequestArgsForCall(i int) *cloudwatch.DescribeInsightRulesInput {
	fake.describeInsightRulesRequestMutex.RLock()
	defer fake.describeInsightRulesRequestMutex.RUnlock()
	argsForCall := fake.describeInsightRulesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesRequestReturns(result1 *request.Request, result2 *cloudwatch.DescribeInsightRulesOutput) {
	fake.describeInsightRulesRequestMutex.Lock()
	defer fake.describeInsightRulesRequestMutex.Unlock()
	fake.DescribeInsightRulesRequestStub = nil
	fake.describeInsightRulesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DescribeInsightRulesOutput) {
	fake.describeInsightRulesRequestMutex.Lock()
	defer fake.describeInsightRulesRequestMutex.Unlock()
	fake.DescribeInsightRulesRequestStub = nil
	if fake.describeInsightRulesRequestReturnsOnCall == nil {
		fake.describeInsightRulesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DescribeInsightRulesOutput
		})
	}
	fake.describeInsightRulesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeInsightRulesInput, arg3 ...request.Option) (*cloudwatch.DescribeInsightRulesOutput, error) {
	fake.describeInsightRulesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInsightRulesWithContextReturnsOnCall[len(fake.describeInsightRulesWithContextArgsForCall)]
	fake.describeInsightRulesWithContextArgsForCall = append(fake.describeInsightRulesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeInsightRulesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeInsightRulesWithContextStub
	fakeReturns := fake.describeInsightRulesWithContextReturns
	fake.recordInvocation("DescribeInsightRulesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInsightRulesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesWithContextCallCount() int {
	fake.describeInsightRulesWithContextMutex.RLock()
	defer fake.describeInsightRulesWithContextMutex.RUnlock()
	return len(fake.describeInsightRulesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesWithContextCalls(stub func(context.Context, *cloudwatch.DescribeInsightRulesInput, ...request.Option) (*cloudwatch.DescribeInsightRulesOutput, error)) {
	fake.describeInsightRulesWithContextMutex.Lock()
	defer fake.describeInsightRulesWithContextMutex.Unlock()
	fake.DescribeInsightRulesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeInsightRulesInput, []request.Option) {
	fake.describeInsightRulesWithContextMutex.RLock()
	defer fake.describeInsightRulesWithContextMutex.RUnlock()
	argsForCall := fake.describeInsightRulesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesWithContextReturns(result1 *cloudwatch.DescribeInsightRulesOutput, result2 error) {
	fake.describeInsightRulesWithContextMutex.Lock()
	defer fake.describeInsightRulesWithContextMutex.Unlock()
	fake.DescribeInsightRulesWithContextStub = nil
	fake.describeInsightRulesWithContextReturns = struct {
		result1 *cloudwatch.DescribeInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeInsightRulesWithContextReturnsOnCall(i int, result1 *cloudwatch.DescribeInsightRulesOutput, result2 error) {
	fake.describeInsightRulesWithContextMutex.Lock()
	defer fake.describeInsightRulesWithContextMutex.Unlock()
	fake.DescribeInsightRulesWithContextStub = nil
	if fake.describeInsightRulesWithContextReturnsOnCall == nil {
		fake.describeInsightRulesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeInsightRulesOutput
			result2 error
		})
	}
	fake.describeInsightRulesWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActions(arg1 *cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error) {
	fake.disableAlarmActionsMutex.Lock()
	ret, specificReturn := fake.disableAlarmActionsReturnsOnCall[len(fake.disableAlarmActionsArgsForCall)]
	fake.disableAlarmActionsArgsForCall = append(fake.disableAlarmActionsArgsForCall, struct {
		arg1 *cloudwatch.DisableAlarmActionsInput
	}{arg1})
	stub := fake.DisableAlarmActionsStub
	fakeReturns := fake.disableAlarmActionsReturns
	fake.recordInvocation("DisableAlarmActions", []interface{}{arg1})
	fake.disableAlarmActionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsCallCount() int {
	fake.disableAlarmActionsMutex.RLock()
	defer fake.disableAlarmActionsMutex.RUnlock()
	return len(fake.disableAlarmActionsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsCalls(stub func(*cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error)) {
	fake.disableAlarmActionsMutex.Lock()
	defer fake.disableAlarmActionsMutex.Unlock()
	fake.DisableAlarmActionsStub = stub
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsArgsForCall(i int) *cloudwatch.DisableAlarmActionsInput {
	fake.disableAlarmActionsMutex.RLock()
	defer fake.disableAlarmActionsMutex.RUnlock()
	argsForCall := fake.disableAlarmActionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsReturns(result1 *cloudwatch.DisableAlarmActionsOutput, result2 error) {
	fake.disableAlarmActionsMutex.Lock()
	defer fake.disableAlarmActionsMutex.Unlock()
	fake.DisableAlarmActionsStub = nil
	fake.disableAlarmActionsReturns = struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsReturnsOnCall(i int, result1 *cloudwatch.DisableAlarmActionsOutput, result2 error) {
	fake.disableAlarmActionsMutex.Lock()
	defer fake.disableAlarmActionsMutex.Unlock()
	fake.DisableAlarmActionsStub = nil
	if fake.disableAlarmActionsReturnsOnCall == nil {
		fake.disableAlarmActionsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DisableAlarmActionsOutput
			result2 error
		})
	}
	fake.disableAlarmActionsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequest(arg1 *cloudwatch.DisableAlarmActionsInput) (*request.Request, *cloudwatch.DisableAlarmActionsOutput) {
	fake.disableAlarmActionsRequestMutex.Lock()
	ret, specificReturn := fake.disableAlarmActionsRequestReturnsOnCall[len(fake.disableAlarmActionsRequestArgsForCall)]
	fake.disableAlarmActionsRequestArgsForCall = append(fake.disableAlarmActionsRequestArgsForCall, struct {
		arg1 *cloudwatch.DisableAlarmActionsInput
	}{arg1})
	stub := fake.DisableAlarmActionsRequestStub
	fakeReturns := fake.disableAlarmActionsRequestReturns
	fake.recordInvocation("DisableAlarmActionsRequest", []interface{}{arg1})
	fake.disableAlarmActionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestCallCount() int {
	fake.disableAlarmActionsRequestMutex.RLock()
	defer fake.disableAlarmActionsRequestMutex.RUnlock()
	return len(fake.disableAlarmActionsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestCalls(stub func(*cloudwatch.DisableAlarmActionsInput) (*request.Request, *cloudwatch.DisableAlarmActionsOutput)) {
	fake.disableAlarmActionsRequestMutex.Lock()
	defer fake.disableAlarmActionsRequestMutex.Unlock()
	fake.DisableAlarmActionsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestArgsForCall(i int) *cloudwatch.DisableAlarmActionsInput {
	fake.disableAlarmActionsRequestMutex.RLock()
	defer fake.disableAlarmActionsRequestMutex.RUnlock()
	argsForCall := fake.disableAlarmActionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestReturns(result1 *request.Request, result2 *cloudwatch.DisableAlarmActionsOutput) {
	fake.disableAlarmActionsRequestMutex.Lock()
	defer fake.disableAlarmActionsRequestMutex.Unlock()
	fake.DisableAlarmActionsRequestStub = nil
	fake.disableAlarmActionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DisableAlarmActionsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DisableAlarmActionsOutput) {
	fake.disableAlarmActionsRequestMutex.Lock()
	defer fake.disableAlarmActionsRequestMutex.Unlock()
	fake.DisableAlarmActionsRequestStub = nil
	if fake.disableAlarmActionsRequestReturnsOnCall == nil {
		fake.disableAlarmActionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DisableAlarmActionsOutput
		})
	}
	fake.disableAlarmActionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DisableAlarmActionsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContext(arg1 context.Context, arg2 *cloudwatch.DisableAlarmActionsInput, arg3 ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error) {
	fake.disableAlarmActionsWithContextMutex.Lock()
	ret, specificReturn := fake.disableAlarmActionsWithContextReturnsOnCall[len(fake.disableAlarmActionsWithContextArgsForCall)]
	fake.disableAlarmActionsWithContextArgsForCall = append(fake.disableAlarmActionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DisableAlarmActionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisableAlarmActionsWithContextStub
	fakeReturns := fake.disableAlarmActionsWithContextReturns
	fake.recordInvocation("DisableAlarmActionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableAlarmActionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextCallCount() int {
	fake.disableAlarmActionsWithContextMutex.RLock()
	defer fake.disableAlarmActionsWithContextMutex.RUnlock()
	return len(fake.disableAlarmActionsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextCalls(stub func(context.Context, *cloudwatch.DisableAlarmActionsInput, ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error)) {
	fake.disableAlarmActionsWithContextMutex.Lock()
	defer fake.disableAlarmActionsWithContextMutex.Unlock()
	fake.DisableAlarmActionsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DisableAlarmActionsInput, []request.Option) {
	fake.disableAlarmActionsWithContextMutex.RLock()
	defer fake.disableAlarmActionsWithContextMutex.RUnlock()
	argsForCall := fake.disableAlarmActionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextReturns(result1 *cloudwatch.DisableAlarmActionsOutput, result2 error) {
	fake.disableAlarmActionsWithContextMutex.Lock()
	defer fake.disableAlarmActionsWithContextMutex.Unlock()
	fake.DisableAlarmActionsWithContextStub = nil
	fake.disableAlarmActionsWithContextReturns = struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextReturnsOnCall(i int, result1 *cloudwatch.DisableAlarmActionsOutput, result2 error) {
	fake.disableAlarmActionsWithContextMutex.Lock()
	defer fake.disableAlarmActionsWithContextMutex.Unlock()
	fake.DisableAlarmActionsWithContextStub = nil
	if fake.disableAlarmActionsWithContextReturnsOnCall == nil {
		fake.disableAlarmActionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DisableAlarmActionsOutput
			result2 error
		})
	}
	fake.disableAlarmActionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableInsightRules(arg1 *cloudwatch.DisableInsightRulesInput) (*cloudwatch.DisableInsightRulesOutput, error) {
	fake.disableInsightRulesMutex.Lock()
	ret, specificReturn := fake.disableInsightRulesReturnsOnCall[len(fake.disableInsightRulesArgsForCall)]
	fake.disableInsightRulesArgsForCall = append(fake.disableInsightRulesArgsForCall, struct {
		arg1 *cloudwatch.DisableInsightRulesInput
	}{arg1})
	stub := fake.DisableInsightRulesStub
	fakeReturns := fake.disableInsightRulesReturns
	fake.recordInvocation("DisableInsightRules", []interface{}{arg1})
	fake.disableInsightRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesCallCount() int {
	fake.disableInsightRulesMutex.RLock()
	defer fake.disableInsightRulesMutex.RUnlock()
	return len(fake.disableInsightRulesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesCalls(stub func(*cloudwatch.DisableInsightRulesInput) (*cloudwatch.DisableInsightRulesOutput, error)) {
	fake.disableInsightRulesMutex.Lock()
	defer fake.disableInsightRulesMutex.Unlock()
	fake.DisableInsightRulesStub = stub
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesArgsForCall(i int) *cloudwatch.DisableInsightRulesInput {
	fake.disableInsightRulesMutex.RLock()
	defer fake.disableInsightRulesMutex.RUnlock()
	argsForCall := fake.disableInsightRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesReturns(result1 *cloudwatch.DisableInsightRulesOutput, result2 error) {
	fake.disableInsightRulesMutex.Lock()
	defer fake.disableInsightRulesMutex.Unlock()
	fake.DisableInsightRulesStub = nil
	fake.disableInsightRulesReturns = struct {
		result1 *cloudwatch.DisableInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesReturnsOnCall(i int, result1 *cloudwatch.DisableInsightRulesOutput, result2 error) {
	fake.disableInsightRulesMutex.Lock()
	defer fake.disableInsightRulesMutex.Unlock()
	fake.DisableInsightRulesStub = nil
	if fake.disableInsightRulesReturnsOnCall == nil {
		fake.disableInsightRulesReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DisableInsightRulesOutput
			result2 error
		})
	}
	fake.disableInsightRulesReturnsOnCall[i] = struct {
		result1 *cloudwatch.DisableInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesRequest(arg1 *cloudwatch.DisableInsightRulesInput) (*request.Request, *cloudwatch.DisableInsightRulesOutput) {
	fake.disableInsightRulesRequestMutex.Lock()
	ret, specificReturn := fake.disableInsightRulesRequestReturnsOnCall[len(fake.disableInsightRulesRequestArgsForCall)]
	fake.disableInsightRulesRequestArgsForCall = append(fake.disableInsightRulesRequestArgsForCall, struct {
		arg1 *cloudwatch.DisableInsightRulesInput
	}{arg1})
	stub := fake.DisableInsightRulesRequestStub
	fakeReturns := fake.disableInsightRulesRequestReturns
	fake.recordInvocation("DisableInsightRulesRequest", []interface{}{arg1})
	fake.disableInsightRulesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesRequestCallCount() int {
	fake.disableInsightRulesRequestMutex.RLock()
	defer fake.disableInsightRulesRequestMutex.RUnlock()
	return len(fake.disableInsightRulesRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesRequestCalls(stub func(*cloudwatch.DisableInsightRulesInput) (*request.Request, *cloudwatch.DisableInsightRulesOutput)) {
	fake.disableInsightRulesRequestMutex.Lock()
	defer fake.disableInsightRulesRequestMutex.Unlock()
	fake.DisableInsightRulesRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesRequestArgsForCall(i int) *cloudwatch.DisableInsightRulesInput {
	fake.disableInsightRulesRequestMutex.RLock()
	defer fake.disableInsightRulesRequestMutex.RUnlock()
	argsForCall := fake.disableInsightRulesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesRequestReturns(result1 *request.Request, result2 *cloudwatch.DisableInsightRulesOutput) {
	fake.disableInsightRulesRequestMutex.Lock()
	defer fake.disableInsightRulesRequestMutex.Unlock()
	fake.DisableInsightRulesRequestStub = nil
	fake.disableInsightRulesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DisableInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DisableInsightRulesOutput) {
	fake.disableInsightRulesRequestMutex.Lock()
	defer fake.disableInsightRulesRequestMutex.Unlock()
	fake.DisableInsightRulesRequestStub = nil
	if fake.disableInsightRulesRequestReturnsOnCall == nil {
		fake.disableInsightRulesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DisableInsightRulesOutput
		})
	}
	fake.disableInsightRulesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DisableInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesWithContext(arg1 context.Context, arg2 *cloudwatch.DisableInsightRulesInput, arg3 ...request.Option) (*cloudwatch.DisableInsightRulesOutput, error) {
	fake.disableInsightRulesWithContextMutex.Lock()
	ret, specificReturn := fake.disableInsightRulesWithContextReturnsOnCall[len(fake.disableInsightRulesWithContextArgsForCall)]
	fake.disableInsightRulesWithContextArgsForCall = append(fake.disableInsightRulesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DisableInsightRulesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisableInsightRulesWithContextStub
	fakeReturns := fake.disableInsightRulesWithContextReturns
	fake.recordInvocation("DisableInsightRulesWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableInsightRulesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesWithContextCallCount() int {
	fake.disableInsightRulesWithContextMutex.RLock()
	defer fake.disableInsightRulesWithContextMutex.RUnlock()
	return len(fake.disableInsightRulesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesWithContextCalls(stub func(context.Context, *cloudwatch.DisableInsightRulesInput, ...request.Option) (*cloudwatch.DisableInsightRulesOutput, error)) {
	fake.disableInsightRulesWithContextMutex.Lock()
	defer fake.disableInsightRulesWithContextMutex.Unlock()
	fake.DisableInsightRulesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DisableInsightRulesInput, []request.Option) {
	fake.disableInsightRulesWithContextMutex.RLock()
	defer fake.disableInsightRulesWithContextMutex.RUnlock()
	argsForCall := fake.disableInsightRulesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesWithContextReturns(result1 *cloudwatch.DisableInsightRulesOutput, result2 error) {
	fake.disableInsightRulesWithContextMutex.Lock()
	defer fake.disableInsightRulesWithContextMutex.Unlock()
	fake.DisableInsightRulesWithContextStub = nil
	fake.disableInsightRulesWithContextReturns = struct {
		result1 *cloudwatch.DisableInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableInsightRulesWithContextReturnsOnCall(i int, result1 *cloudwatch.DisableInsightRulesOutput, result2 error) {
	fake.disableInsightRulesWithContextMutex.Lock()
	defer fake.disableInsightRulesWithContextMutex.Unlock()
	fake.DisableInsightRulesWithContextStub = nil
	if fake.disableInsightRulesWithContextReturnsOnCall == nil {
		fake.disableInsightRulesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DisableInsightRulesOutput
			result2 error
		})
	}
	fake.disableInsightRulesWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DisableInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActions(arg1 *cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error) {
	fake.enableAlarmActionsMutex.Lock()
	ret, specificReturn := fake.enableAlarmActionsReturnsOnCall[len(fake.enableAlarmActionsArgsForCall)]
	fake.enableAlarmActionsArgsForCall = append(fake.enableAlarmActionsArgsForCall, struct {
		arg1 *cloudwatch.EnableAlarmActionsInput
	}{arg1})
	stub := fake.EnableAlarmActionsStub
	fakeReturns := fake.enableAlarmActionsReturns
	fake.recordInvocation("EnableAlarmActions", []interface{}{arg1})
	fake.enableAlarmActionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsCallCount() int {
	fake.enableAlarmActionsMutex.RLock()
	defer fake.enableAlarmActionsMutex.RUnlock()
	return len(fake.enableAlarmActionsArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsCalls(stub func(*cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error)) {
	fake.enableAlarmActionsMutex.Lock()
	defer fake.enableAlarmActionsMutex.Unlock()
	fake.EnableAlarmActionsStub = stub
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsArgsForCall(i int) *cloudwatch.EnableAlarmActionsInput {
	fake.enableAlarmActionsMutex.RLock()
	defer fake.enableAlarmActionsMutex.RUnlock()
	argsForCall := fake.enableAlarmActionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsReturns(result1 *cloudwatch.EnableAlarmActionsOutput, result2 error) {
	fake.enableAlarmActionsMutex.Lock()
	defer fake.enableAlarmActionsMutex.Unlock()
	fake.EnableAlarmActionsStub = nil
	fake.enableAlarmActionsReturns = struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsReturnsOnCall(i int, result1 *cloudwatch.EnableAlarmActionsOutput, result2 error) {
	fake.enableAlarmActionsMutex.Lock()
	defer fake.enableAlarmActionsMutex.Unlock()
	fake.EnableAlarmActionsStub = nil
	if fake.enableAlarmActionsReturnsOnCall == nil {
		fake.enableAlarmActionsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.EnableAlarmActionsOutput
			result2 error
		})
	}
	fake.enableAlarmActionsReturnsOnCall[i] = struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequest(arg1 *cloudwatch.EnableAlarmActionsInput) (*request.Request, *cloudwatch.EnableAlarmActionsOutput) {
	fake.enableAlarmActionsRequestMutex.Lock()
	ret, specificReturn := fake.enableAlarmActionsRequestReturnsOnCall[len(fake.enableAlarmActionsRequestArgsForCall)]
	fake.enableAlarmActionsRequestArgsForCall = append(fake.enableAlarmActionsRequestArgsForCall, struct {
		arg1 *cloudwatch.EnableAlarmActionsInput
	}{arg1})
	stub := fake.EnableAlarmActionsRequestStub
	fakeReturns := fake.enableAlarmActionsRequestReturns
	fake.recordInvocation("EnableAlarmActionsRequest", []interface{}{arg1})
	fake.enableAlarmActionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestCallCount() int {
	fake.enableAlarmActionsRequestMutex.RLock()
	defer fake.enableAlarmActionsRequestMutex.RUnlock()
	return len(fake.enableAlarmActionsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestCalls(stub func(*cloudwatch.EnableAlarmActionsInput) (*request.Request, *cloudwatch.EnableAlarmActionsOutput)) {
	fake.enableAlarmActionsRequestMutex.Lock()
	defer fake.enableAlarmActionsRequestMutex.Unlock()
	fake.EnableAlarmActionsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestArgsForCall(i int) *cloudwatch.EnableAlarmActionsInput {
	fake.enableAlarmActionsRequestMutex.RLock()
	defer fake.enableAlarmActionsRequestMutex.RUnlock()
	argsForCall := fake.enableAlarmActionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestReturns(result1 *request.Request, result2 *cloudwatch.EnableAlarmActionsOutput) {
	fake.enableAlarmActionsRequestMutex.Lock()
	defer fake.enableAlarmActionsRequestMutex.Unlock()
	fake.EnableAlarmActionsRequestStub = nil
	fake.enableAlarmActionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.EnableAlarmActionsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.EnableAlarmActionsOutput) {
	fake.enableAlarmActionsRequestMutex.Lock()
	defer fake.enableAlarmActionsRequestMutex.Unlock()
	fake.EnableAlarmActionsRequestStub = nil
	if fake.enableAlarmActionsRequestReturnsOnCall == nil {
		fake.enableAlarmActionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.EnableAlarmActionsOutput
		})
	}
	fake.enableAlarmActionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.EnableAlarmActionsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContext(arg1 context.Context, arg2 *cloudwatch.EnableAlarmActionsInput, arg3 ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error) {
	fake.enableAlarmActionsWithContextMutex.Lock()
	ret, specificReturn := fake.enableAlarmActionsWithContextReturnsOnCall[len(fake.enableAlarmActionsWithContextArgsForCall)]
	fake.enableAlarmActionsWithContextArgsForCall = append(fake.enableAlarmActionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.EnableAlarmActionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.EnableAlarmActionsWithContextStub
	fakeReturns := fake.enableAlarmActionsWithContextReturns
	fake.recordInvocation("EnableAlarmActionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableAlarmActionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextCallCount() int {
	fake.enableAlarmActionsWithContextMutex.RLock()
	defer fake.enableAlarmActionsWithContextMutex.RUnlock()
	return len(fake.enableAlarmActionsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextCalls(stub func(context.Context, *cloudwatch.EnableAlarmActionsInput, ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error)) {
	fake.enableAlarmActionsWithContextMutex.Lock()
	defer fake.enableAlarmActionsWithContextMutex.Unlock()
	fake.EnableAlarmActionsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextArgsForCall(i int) (context.Context, *cloudwatch.EnableAlarmActionsInput, []request.Option) {
	fake.enableAlarmActionsWithContextMutex.RLock()
	defer fake.enableAlarmActionsWithContextMutex.RUnlock()
	argsForCall := fake.enableAlarmActionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextReturns(result1 *cloudwatch.EnableAlarmActionsOutput, result2 error) {
	fake.enableAlarmActionsWithContextMutex.Lock()
	defer fake.enableAlarmActionsWithContextMutex.Unlock()
	fake.EnableAlarmActionsWithContextStub = nil
	fake.enableAlarmActionsWithContextReturns = struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextReturnsOnCall(i int, result1 *cloudwatch.EnableAlarmActionsOutput, result2 error) {
	fake.enableAlarmActionsWithContextMutex.Lock()
	defer fake.enableAlarmActionsWithContextMutex.Unlock()
	fake.EnableAlarmActionsWithContextStub = nil
	if fake.enableAlarmActionsWithContextReturnsOnCall == nil {
		fake.enableAlarmActionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.EnableAlarmActionsOutput
			result2 error
		})
	}
	fake.enableAlarmActionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableInsightRules(arg1 *cloudwatch.EnableInsightRulesInput) (*cloudwatch.EnableInsightRulesOutput, error) {
	fake.enableInsightRulesMutex.Lock()
	ret, specificReturn := fake.enableInsightRulesReturnsOnCall[len(fake.enableInsightRulesArgsForCall)]
	fake.enableInsightRulesArgsForCall = append(fake.enableInsightRulesArgsForCall, struct {
		arg1 *cloudwatch.EnableInsightRulesInput
	}{arg1})
	stub := fake.EnableInsightRulesStub
	fakeReturns := fake.enableInsightRulesReturns
	fake.recordInvocation("EnableInsightRules", []interface{}{arg1})
	fake.enableInsightRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesCallCount() int {
	fake.enableInsightRulesMutex.RLock()
	defer fake.enableInsightRulesMutex.RUnlock()
	return len(fake.enableInsightRulesArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesCalls(stub func(*cloudwatch.EnableInsightRulesInput) (*cloudwatch.EnableInsightRulesOutput, error)) {
	fake.enableInsightRulesMutex.Lock()
	defer fake.enableInsightRulesMutex.Unlock()
	fake.EnableInsightRulesStub = stub
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesArgsForCall(i int) *cloudwatch.EnableInsightRulesInput {
	fake.enableInsightRulesMutex.RLock()
	defer fake.enableInsightRulesMutex.RUnlock()
	argsForCall := fake.enableInsightRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesReturns(result1 *cloudwatch.EnableInsightRulesOutput, result2 error) {
	fake.enableInsightRulesMutex.Lock()
	defer fake.enableInsightRulesMutex.Unlock()
	fake.EnableInsightRulesStub = nil
	fake.enableInsightRulesReturns = struct {
		result1 *cloudwatch.EnableInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesReturnsOnCall(i int, result1 *cloudwatch.EnableInsightRulesOutput, result2 error) {
	fake.enableInsightRulesMutex.Lock()
	defer fake.enableInsightRulesMutex.Unlock()
	fake.EnableInsightRulesStub = nil
	if fake.enableInsightRulesReturnsOnCall == nil {
		fake.enableInsightRulesReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.EnableInsightRulesOutput
			result2 error
		})
	}
	fake.enableInsightRulesReturnsOnCall[i] = struct {
		result1 *cloudwatch.EnableInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesRequest(arg1 *cloudwatch.EnableInsightRulesInput) (*request.Request, *cloudwatch.EnableInsightRulesOutput) {
	fake.enableInsightRulesRequestMutex.Lock()
	ret, specificReturn := fake.enableInsightRulesRequestReturnsOnCall[len(fake.enableInsightRulesRequestArgsForCall)]
	fake.enableInsightRulesRequestArgsForCall = append(fake.enableInsightRulesRequestArgsForCall, struct {
		arg1 *cloudwatch.EnableInsightRulesInput
	}{arg1})
	stub := fake.EnableInsightRulesRequestStub
	fakeReturns := fake.enableInsightRulesRequestReturns
	fake.recordInvocation("EnableInsightRulesRequest", []interface{}{arg1})
	fake.enableInsightRulesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesRequestCallCount() int {
	fake.enableInsightRulesRequestMutex.RLock()
	defer fake.enableInsightRulesRequestMutex.RUnlock()
	return len(fake.enableInsightRulesRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesRequestCalls(stub func(*cloudwatch.EnableInsightRulesInput) (*request.Request, *cloudwatch.EnableInsightRulesOutput)) {
	fake.enableInsightRulesRequestMutex.Lock()
	defer fake.enableInsightRulesRequestMutex.Unlock()
	fake.EnableInsightRulesRequestStub = stub
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesRequestArgsForCall(i int) *cloudwatch.EnableInsightRulesInput {
	fake.enableInsightRulesRequestMutex.RLock()
	defer fake.enableInsightRulesRequestMutex.RUnlock()
	argsForCall := fake.enableInsightRulesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesRequestReturns(result1 *request.Request, result2 *cloudwatch.EnableInsightRulesOutput) {
	fake.enableInsightRulesRequestMutex.Lock()
	defer fake.enableInsightRulesRequestMutex.Unlock()
	fake.EnableInsightRulesRequestStub = nil
	fake.enableInsightRulesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.EnableInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.EnableInsightRulesOutput) {
	fake.enableInsightRulesRequestMutex.Lock()
	defer fake.enableInsightRulesRequestMutex.Unlock()
	fake.EnableInsightRulesRequestStub = nil
	if fake.enableInsightRulesRequestReturnsOnCall == nil {
		fake.enableInsightRulesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.EnableInsightRulesOutput
		})
	}
	fake.enableInsightRulesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.EnableInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesWithContext(arg1 context.Context, arg2 *cloudwatch.EnableInsightRulesInput, arg3 ...request.Option) (*cloudwatch.EnableInsightRulesOutput, error) {
	fake.enableInsightRulesWithContextMutex.Lock()
	ret, specificReturn := fake.enableInsightRulesWithContextReturnsOnCall[len(fake.enableInsightRulesWithContextArgsForCall)]
	fake.enableInsightRulesWithContextArgsForCall = append(fake.enableInsightRulesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.EnableInsightRulesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.EnableInsightRulesWithContextStub
	fakeReturns := fake.enableInsightRulesWithContextReturns
	fake.recordInvocation("EnableInsightRulesWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableInsightRulesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesWithContextCallCount() int {
	fake.enableInsightRulesWithContextMutex.RLock()
	defer fake.enableInsightRulesWithContextMutex.RUnlock()
	return len(fake.enableInsightRulesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesWithContextCalls(stub func(context.Context, *cloudwatch.EnableInsightRulesInput, ...request.Option) (*cloudwatch.EnableInsightRulesOutput, error)) {
	fake.enableInsightRulesWithContextMutex.Lock()
	defer fake.enableInsightRulesWithContextMutex.Unlock()
	fake.EnableInsightRulesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesWithContextArgsForCall(i int) (context.Context, *cloudwatch.EnableInsightRulesInput, []request.Option) {
	fake.enableInsightRulesWithContextMutex.RLock()
	defer fake.enableInsightRulesWithContextMutex.RUnlock()
	argsForCall := fake.enableInsightRulesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesWithContextReturns(result1 *cloudwatch.EnableInsightRulesOutput, result2 error) {
	fake.enableInsightRulesWithContextMutex.Lock()
	defer fake.enableInsightRulesWithContextMutex.Unlock()
	fake.EnableInsightRulesWithContextStub = nil
	fake.enableInsightRulesWithContextReturns = struct {
		result1 *cloudwatch.EnableInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableInsightRulesWithContextReturnsOnCall(i int, result1 *cloudwatch.EnableInsightRulesOutput, result2 error) {
	fake.enableInsightRulesWithContextMutex.Lock()
	defer fake.enableInsightRulesWithContextMutex.Unlock()
	fake.EnableInsightRulesWithContextStub = nil
	if fake.enableInsightRulesWithContextReturnsOnCall == nil {
		fake.enableInsightRulesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.EnableInsightRulesOutput
			result2 error
		})
	}
	fake.enableInsightRulesWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.EnableInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboard(arg1 *cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error) {
	fake.getDashboardMutex.Lock()
	ret, specificReturn := fake.getDashboardReturnsOnCall[len(fake.getDashboardArgsForCall)]
	fake.getDashboardArgsForCall = append(fake.getDashboardArgsForCall, struct {
		arg1 *cloudwatch.GetDashboardInput
	}{arg1})
	stub := fake.GetDashboardStub
	fakeReturns := fake.getDashboardReturns
	fake.recordInvocation("GetDashboard", []interface{}{arg1})
	fake.getDashboardMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetDashboardCallCount() int {
	fake.getDashboardMutex.RLock()
	defer fake.getDashboardMutex.RUnlock()
	return len(fake.getDashboardArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetDashboardCalls(stub func(*cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error)) {
	fake.getDashboardMutex.Lock()
	defer fake.getDashboardMutex.Unlock()
	fake.GetDashboardStub = stub
}

func (fake *FakeCloudWatchAPI) GetDashboardArgsForCall(i int) *cloudwatch.GetDashboardInput {
	fake.getDashboardMutex.RLock()
	defer fake.getDashboardMutex.RUnlock()
	argsForCall := fake.getDashboardArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetDashboardReturns(result1 *cloudwatch.GetDashboardOutput, result2 error) {
	fake.getDashboardMutex.Lock()
	defer fake.getDashboardMutex.Unlock()
	fake.GetDashboardStub = nil
	fake.getDashboardReturns = struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardReturnsOnCall(i int, result1 *cloudwatch.GetDashboardOutput, result2 error) {
	fake.getDashboardMutex.Lock()
	defer fake.getDashboardMutex.Unlock()
	fake.GetDashboardStub = nil
	if fake.getDashboardReturnsOnCall == nil {
		fake.getDashboardReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetDashboardOutput
			result2 error
		})
	}
	fake.getDashboardReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardRequest(arg1 *cloudwatch.GetDashboardInput) (*request.Request, *cloudwatch.GetDashboardOutput) {
	fake.getDashboardRequestMutex.Lock()
	ret, specificReturn := fake.getDashboardRequestReturnsOnCall[len(fake.getDashboardRequestArgsForCall)]
	fake.getDashboardRequestArgsForCall = append(fake.getDashboardRequestArgsForCall, struct {
		arg1 *cloudwatch.GetDashboardInput
	}{arg1})
	stub := fake.GetDashboardRequestStub
	fakeReturns := fake.getDashboardRequestReturns
	fake.recordInvocation("GetDashboardRequest", []interface{}{arg1})
	fake.getDashboardRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestCallCount() int {
	fake.getDashboardRequestMutex.RLock()
	defer fake.getDashboardRequestMutex.RUnlock()
	return len(fake.getDashboardRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestCalls(stub func(*cloudwatch.GetDashboardInput) (*request.Request, *cloudwatch.GetDashboardOutput)) {
	fake.getDashboardRequestMutex.Lock()
	defer fake.getDashboardRequestMutex.Unlock()
	fake.GetDashboardRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestArgsForCall(i int) *cloudwatch.GetDashboardInput {
	fake.getDashboardRequestMutex.RLock()
	defer fake.getDashboardRequestMutex.RUnlock()
	argsForCall := fake.getDashboardRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestReturns(result1 *request.Request, result2 *cloudwatch.GetDashboardOutput) {
	fake.getDashboardRequestMutex.Lock()
	defer fake.getDashboardRequestMutex.Unlock()
	fake.GetDashboardRequestStub = nil
	fake.getDashboardRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetDashboardOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetDashboardOutput) {
	fake.getDashboardRequestMutex.Lock()
	defer fake.getDashboardRequestMutex.Unlock()
	fake.GetDashboardRequestStub = nil
	if fake.getDashboardRequestReturnsOnCall == nil {
		fake.getDashboardRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetDashboardOutput
		})
	}
	fake.getDashboardRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetDashboardOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContext(arg1 context.Context, arg2 *cloudwatch.GetDashboardInput, arg3 ...request.Option) (*cloudwatch.GetDashboardOutput, error) {
	fake.getDashboardWithContextMutex.Lock()
	ret, specificReturn := fake.getDashboardWithContextReturnsOnCall[len(fake.getDashboardWithContextArgsForCall)]
	fake.getDashboardWithContextArgsForCall = append(fake.getDashboardWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetDashboardInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetDashboardWithContextStub
	fakeReturns := fake.getDashboardWithContextReturns
	fake.recordInvocation("GetDashboardWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDashboardWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextCallCount() int {
	fake.getDashboardWithContextMutex.RLock()
	defer fake.getDashboardWithContextMutex.RUnlock()
	return len(fake.getDashboardWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextCalls(stub func(context.Context, *cloudwatch.GetDashboardInput, ...request.Option) (*cloudwatch.GetDashboardOutput, error)) {
	fake.getDashboardWithContextMutex.Lock()
	defer fake.getDashboardWithContextMutex.Unlock()
	fake.GetDashboardWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetDashboardInput, []request.Option) {
	fake.getDashboardWithContextMutex.RLock()
	defer fake.getDashboardWithContextMutex.RUnlock()
	argsForCall := fake.getDashboardWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextReturns(result1 *cloudwatch.GetDashboardOutput, result2 error) {
	fake.getDashboardWithContextMutex.Lock()
	defer fake.getDashboardWithContextMutex.Unlock()
	fake.GetDashboardWithContextStub = nil
	fake.getDashboardWithContextReturns = struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextReturnsOnCall(i int, result1 *cloudwatch.GetDashboardOutput, result2 error) {
	fake.getDashboardWithContextMutex.Lock()
	defer fake.getDashboardWithContextMutex.Unlock()
	fake.GetDashboardWithContextStub = nil
	if fake.getDashboardWithContextReturnsOnCall == nil {
		fake.getDashboardWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetDashboardOutput
			result2 error
		})
	}
	fake.getDashboardWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReport(arg1 *cloudwatch.GetInsightRuleReportInput) (*cloudwatch.GetInsightRuleReportOutput, error) {
	fake.getInsightRuleReportMutex.Lock()
	ret, specificReturn := fake.getInsightRuleReportReturnsOnCall[len(fake.getInsightRuleReportArgsForCall)]
	fake.getInsightRuleReportArgsForCall = append(fake.getInsightRuleReportArgsForCall, struct {
		arg1 *cloudwatch.GetInsightRuleReportInput
	}{arg1})
	stub := fake.GetInsightRuleReportStub
	fakeReturns := fake.getInsightRuleReportReturns
	fake.recordInvocation("GetInsightRuleReport", []interface{}{arg1})
	fake.getInsightRuleReportMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportCallCount() int {
	fake.getInsightRuleReportMutex.RLock()
	defer fake.getInsightRuleReportMutex.RUnlock()
	return len(fake.getInsightRuleReportArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportCalls(stub func(*cloudwatch.GetInsightRuleReportInput) (*cloudwatch.GetInsightRuleReportOutput, error)) {
	fake.getInsightRuleReportMutex.Lock()
	defer fake.getInsightRuleReportMutex.Unlock()
	fake.GetInsightRuleReportStub = stub
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportArgsForCall(i int) *cloudwatch.GetInsightRuleReportInput {
	fake.getInsightRuleReportMutex.RLock()
	defer fake.getInsightRuleReportMutex.RUnlock()
	argsForCall := fake.getInsightRuleReportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportReturns(result1 *cloudwatch.GetInsightRuleReportOutput, result2 error) {
	fake.getInsightRuleReportMutex.Lock()
	defer fake.getInsightRuleReportMutex.Unlock()
	fake.GetInsightRuleReportStub = nil
	fake.getInsightRuleReportReturns = struct {
		result1 *cloudwatch.GetInsightRuleReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportReturnsOnCall(i int, result1 *cloudwatch.GetInsightRuleReportOutput, result2 error) {
	fake.getInsightRuleReportMutex.Lock()
	defer fake.getInsightRuleReportMutex.Unlock()
	fake.GetInsightRuleReportStub = nil
	if fake.getInsightRuleReportReturnsOnCall == nil {
		fake.getInsightRuleReportReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetInsightRuleReportOutput
			result2 error
		})
	}
	fake.getInsightRuleReportReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetInsightRuleReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportRequest(arg1 *cloudwatch.GetInsightRuleReportInput) (*request.Request, *cloudwatch.GetInsightRuleReportOutput) {
	fake.getInsightRuleReportRequestMutex.Lock()
	ret, specificReturn := fake.getInsightRuleReportRequestReturnsOnCall[len(fake.getInsightRuleReportRequestArgsForCall)]
	fake.getInsightRuleReportRequestArgsForCall = append(fake.getInsightRuleReportRequestArgsForCall, struct {
		arg1 *cloudwatch.GetInsightRuleReportInput
	}{arg1})
	stub := fake.GetInsightRuleReportRequestStub
	fakeReturns := fake.getInsightRuleReportRequestReturns
	fake.recordInvocation("GetInsightRuleReportRequest", []interface{}{arg1})
	fake.getInsightRuleReportRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportRequestCallCount() int {
	fake.getInsightRuleReportRequestMutex.RLock()
	defer fake.getInsightRuleReportRequestMutex.RUnlock()
	return len(fake.getInsightRuleReportRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportRequestCalls(stub func(*cloudwatch.GetInsightRuleReportInput) (*request.Request, *cloudwatch.GetInsightRuleReportOutput)) {
	fake.getInsightRuleReportRequestMutex.Lock()
	defer fake.getInsightRuleReportRequestMutex.Unlock()
	fake.GetInsightRuleReportRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportRequestArgsForCall(i int) *cloudwatch.GetInsightRuleReportInput {
	fake.getInsightRuleReportRequestMutex.RLock()
	defer fake.getInsightRuleReportRequestMutex.RUnlock()
	argsForCall := fake.getInsightRuleReportRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportRequestReturns(result1 *request.Request, result2 *cloudwatch.GetInsightRuleReportOutput) {
	fake.getInsightRuleReportRequestMutex.Lock()
	defer fake.getInsightRuleReportRequestMutex.Unlock()
	fake.GetInsightRuleReportRequestStub = nil
	fake.getInsightRuleReportRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetInsightRuleReportOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetInsightRuleReportOutput) {
	fake.getInsightRuleReportRequestMutex.Lock()
	defer fake.getInsightRuleReportRequestMutex.Unlock()
	fake.GetInsightRuleReportRequestStub = nil
	if fake.getInsightRuleReportRequestReturnsOnCall == nil {
		fake.getInsightRuleReportRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetInsightRuleReportOutput
		})
	}
	fake.getInsightRuleReportRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetInsightRuleReportOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportWithContext(arg1 context.Context, arg2 *cloudwatch.GetInsightRuleReportInput, arg3 ...request.Option) (*cloudwatch.GetInsightRuleReportOutput, error) {
	fake.getInsightRuleReportWithContextMutex.Lock()
	ret, specificReturn := fake.getInsightRuleReportWithContextReturnsOnCall[len(fake.getInsightRuleReportWithContextArgsForCall)]
	fake.getInsightRuleReportWithContextArgsForCall = append(fake.getInsightRuleReportWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetInsightRuleReportInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetInsightRuleReportWithContextStub
	fakeReturns := fake.getInsightRuleReportWithContextReturns
	fake.recordInvocation("GetInsightRuleReportWithContext", []interface{}{arg1, arg2, arg3})
	fake.getInsightRuleReportWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportWithContextCallCount() int {
	fake.getInsightRuleReportWithContextMutex.RLock()
	defer fake.getInsightRuleReportWithContextMutex.RUnlock()
	return len(fake.getInsightRuleReportWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportWithContextCalls(stub func(context.Context, *cloudwatch.GetInsightRuleReportInput, ...request.Option) (*cloudwatch.GetInsightRuleReportOutput, error)) {
	fake.getInsightRuleReportWithContextMutex.Lock()
	defer fake.getInsightRuleReportWithContextMutex.Unlock()
	fake.GetInsightRuleReportWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetInsightRuleReportInput, []request.Option) {
	fake.getInsightRuleReportWithContextMutex.RLock()
	defer fake.getInsightRuleReportWithContextMutex.RUnlock()
	argsForCall := fake.getInsightRuleReportWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportWithContextReturns(result1 *cloudwatch.GetInsightRuleReportOutput, result2 error) {
	fake.getInsightRuleReportWithContextMutex.Lock()
	defer fake.getInsightRuleReportWithContextMutex.Unlock()
	fake.GetInsightRuleReportWithContextStub = nil
	fake.getInsightRuleReportWithContextReturns = struct {
		result1 *cloudwatch.GetInsightRuleReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetInsightRuleReportWithContextReturnsOnCall(i int, result1 *cloudwatch.GetInsightRuleReportOutput, result2 error) {
	fake.getInsightRuleReportWithContextMutex.Lock()
	defer fake.getInsightRuleReportWithContextMutex.Unlock()
	fake.GetInsightRuleReportWithContextStub = nil
	if fake.getInsightRuleReportWithContextReturnsOnCall == nil {
		fake.getInsightRuleReportWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetInsightRuleReportOutput
			result2 error
		})
	}
	fake.getInsightRuleReportWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetInsightRuleReportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricData(arg1 *cloudwatch.GetMetricDataInput) (*cloudwatch.GetMetricDataOutput, error) {
	fake.getMetricDataMutex.Lock()
	ret, specificReturn := fake.getMetricDataReturnsOnCall[len(fake.getMetricDataArgsForCall)]
	fake.getMetricDataArgsForCall = append(fake.getMetricDataArgsForCall, struct {
		arg1 *cloudwatch.GetMetricDataInput
	}{arg1})
	stub := fake.GetMetricDataStub
	fakeReturns := fake.getMetricDataReturns
	fake.recordInvocation("GetMetricData", []interface{}{arg1})
	fake.getMetricDataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricDataCallCount() int {
	fake.getMetricDataMutex.RLock()
	defer fake.getMetricDataMutex.RUnlock()
	return len(fake.getMetricDataArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricDataCalls(stub func(*cloudwatch.GetMetricDataInput) (*cloudwatch.GetMetricDataOutput, error)) {
	fake.getMetricDataMutex.Lock()
	defer fake.getMetricDataMutex.Unlock()
	fake.GetMetricDataStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricDataArgsForCall(i int) *cloudwatch.GetMetricDataInput {
	fake.getMetricDataMutex.RLock()
	defer fake.getMetricDataMutex.RUnlock()
	argsForCall := fake.getMetricDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricDataReturns(result1 *cloudwatch.GetMetricDataOutput, result2 error) {
	fake.getMetricDataMutex.Lock()
	defer fake.getMetricDataMutex.Unlock()
	fake.GetMetricDataStub = nil
	fake.getMetricDataReturns = struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataReturnsOnCall(i int, result1 *cloudwatch.GetMetricDataOutput, result2 error) {
	fake.getMetricDataMutex.Lock()
	defer fake.getMetricDataMutex.Unlock()
	fake.GetMetricDataStub = nil
	if fake.getMetricDataReturnsOnCall == nil {
		fake.getMetricDataReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricDataOutput
			result2 error
		})
	}
	fake.getMetricDataReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataPages(arg1 *cloudwatch.GetMetricDataInput, arg2 func(*cloudwatch.GetMetricDataOutput, bool) bool) error {
	fake.getMetricDataPagesMutex.Lock()
	ret, specificReturn := fake.getMetricDataPagesReturnsOnCall[len(fake.getMetricDataPagesArgsForCall)]
	fake.getMetricDataPagesArgsForCall = append(fake.getMetricDataPagesArgsForCall, struct {
		arg1 *cloudwatch.GetMetricDataInput
		arg2 func(*cloudwatch.GetMetricDataOutput, bool) bool
	}{arg1, arg2})
	stub := fake.GetMetricDataPagesStub
	fakeReturns := fake.getMetricDataPagesReturns
	fake.recordInvocation("GetMetricDataPages", []interface{}{arg1, arg2})
	fake.getMetricDataPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesCallCount() int {
	fake.getMetricDataPagesMutex.RLock()
	defer fake.getMetricDataPagesMutex.RUnlock()
	return len(fake.getMetricDataPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesCalls(stub func(*cloudwatch.GetMetricDataInput, func(*cloudwatch.GetMetricDataOutput, bool) bool) error) {
	fake.getMetricDataPagesMutex.Lock()
	defer fake.getMetricDataPagesMutex.Unlock()
	fake.GetMetricDataPagesStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesArgsForCall(i int) (*cloudwatch.GetMetricDataInput, func(*cloudwatch.GetMetricDataOutput, bool) bool) {
	fake.getMetricDataPagesMutex.RLock()
	defer fake.getMetricDataPagesMutex.RUnlock()
	argsForCall := fake.getMetricDataPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesReturns(result1 error) {
	fake.getMetricDataPagesMutex.Lock()
	defer fake.getMetricDataPagesMutex.Unlock()
	fake.GetMetricDataPagesStub = nil
	fake.getMetricDataPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesReturnsOnCall(i int, result1 error) {
	fake.getMetricDataPagesMutex.Lock()
	defer fake.getMetricDataPagesMutex.Unlock()
	fake.GetMetricDataPagesStub = nil
	if fake.getMetricDataPagesReturnsOnCall == nil {
		fake.getMetricDataPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getMetricDataPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesWithContext(arg1 context.Context, arg2 *cloudwatch.GetMetricDataInput, arg3 func(*cloudwatch.GetMetricDataOutput, bool) bool, arg4 ...request.Option) error {
	fake.getMetricDataPagesWithContextMutex.Lock()
	ret, specificReturn := fake.getMetricDataPagesWithContextReturnsOnCall[len(fake.getMetricDataPagesWithContextArgsForCall)]
	fake.getMetricDataPagesWithContextArgsForCall = append(fake.getMetricDataPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricDataInput
		arg3 func(*cloudwatch.GetMetricDataOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetMetricDataPagesWithContextStub
	fakeReturns := fake.getMetricDataPagesWithContextReturns
	fake.recordInvocation("GetMetricDataPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.getMetricDataPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesWithContextCallCount() int {
	fake.getMetricDataPagesWithContextMutex.RLock()
	defer fake.getMetricDataPagesWithContextMutex.RUnlock()
	return len(fake.getMetricDataPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesWithContextCalls(stub func(context.Context, *cloudwatch.GetMetricDataInput, func(*cloudwatch.GetMetricDataOutput, bool) bool, ...request.Option) error) {
	fake.getMetricDataPagesWithContextMutex.Lock()
	defer fake.getMetricDataPagesWithContextMutex.Unlock()
	fake.GetMetricDataPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetMetricDataInput, func(*cloudwatch.GetMetricDataOutput, bool) bool, []request.Option) {
	fake.getMetricDataPagesWithContextMutex.RLock()
	defer fake.getMetricDataPagesWithContextMutex.RUnlock()
	argsForCall := fake.getMetricDataPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesWithContextReturns(result1 error) {
	fake.getMetricDataPagesWithContextMutex.Lock()
	defer fake.getMetricDataPagesWithContextMutex.Unlock()
	fake.GetMetricDataPagesWithContextStub = nil
	fake.getMetricDataPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) GetMetricDataPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.getMetricDataPagesWithContextMutex.Lock()
	defer fake.getMetricDataPagesWithContextMutex.Unlock()
	fake.GetMetricDataPagesWithContextStub = nil
	if fake.getMetricDataPagesWithContextReturnsOnCall == nil {
		fake.getMetricDataPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getMetricDataPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequest(arg1 *cloudwatch.GetMetricDataInput) (*request.Request, *cloudwatch.GetMetricDataOutput) {
	fake.getMetricDataRequestMutex.Lock()
	ret, specificReturn := fake.getMetricDataRequestReturnsOnCall[len(fake.getMetricDataRequestArgsForCall)]
	fake.getMetricDataRequestArgsForCall = append(fake.getMetricDataRequestArgsForCall, struct {
		arg1 *cloudwatch.GetMetricDataInput
	}{arg1})
	stub := fake.GetMetricDataRequestStub
	fakeReturns := fake.getMetricDataRequestReturns
	fake.recordInvocation("GetMetricDataRequest", []interface{}{arg1})
	fake.getMetricDataRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestCallCount() int {
	fake.getMetricDataRequestMutex.RLock()
	defer fake.getMetricDataRequestMutex.RUnlock()
	return len(fake.getMetricDataRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestCalls(stub func(*cloudwatch.GetMetricDataInput) (*request.Request, *cloudwatch.GetMetricDataOutput)) {
	fake.getMetricDataRequestMutex.Lock()
	defer fake.getMetricDataRequestMutex.Unlock()
	fake.GetMetricDataRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestArgsForCall(i int) *cloudwatch.GetMetricDataInput {
	fake.getMetricDataRequestMutex.RLock()
	defer fake.getMetricDataRequestMutex.RUnlock()
	argsForCall := fake.getMetricDataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestReturns(result1 *request.Request, result2 *cloudwatch.GetMetricDataOutput) {
	fake.getMetricDataRequestMutex.Lock()
	defer fake.getMetricDataRequestMutex.Unlock()
	fake.GetMetricDataRequestStub = nil
	fake.getMetricDataRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricDataOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetMetricDataOutput) {
	fake.getMetricDataRequestMutex.Lock()
	defer fake.getMetricDataRequestMutex.Unlock()
	fake.GetMetricDataRequestStub = nil
	if fake.getMetricDataRequestReturnsOnCall == nil {
		fake.getMetricDataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetMetricDataOutput
		})
	}
	fake.getMetricDataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricDataOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContext(arg1 context.Context, arg2 *cloudwatch.GetMetricDataInput, arg3 ...request.Option) (*cloudwatch.GetMetricDataOutput, error) {
	fake.getMetricDataWithContextMutex.Lock()
	ret, specificReturn := fake.getMetricDataWithContextReturnsOnCall[len(fake.getMetricDataWithContextArgsForCall)]
	fake.getMetricDataWithContextArgsForCall = append(fake.getMetricDataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricDataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMetricDataWithContextStub
	fakeReturns := fake.getMetricDataWithContextReturns
	fake.recordInvocation("GetMetricDataWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMetricDataWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextCallCount() int {
	fake.getMetricDataWithContextMutex.RLock()
	defer fake.getMetricDataWithContextMutex.RUnlock()
	return len(fake.getMetricDataWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextCalls(stub func(context.Context, *cloudwatch.GetMetricDataInput, ...request.Option) (*cloudwatch.GetMetricDataOutput, error)) {
	fake.getMetricDataWithContextMutex.Lock()
	defer fake.getMetricDataWithContextMutex.Unlock()
	fake.GetMetricDataWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetMetricDataInput, []request.Option) {
	fake.getMetricDataWithContextMutex.RLock()
	defer fake.getMetricDataWithContextMutex.RUnlock()
	argsForCall := fake.getMetricDataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextReturns(result1 *cloudwatch.GetMetricDataOutput, result2 error) {
	fake.getMetricDataWithContextMutex.Lock()
	defer fake.getMetricDataWithContextMutex.Unlock()
	fake.GetMetricDataWithContextStub = nil
	fake.getMetricDataWithContextReturns = struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextReturnsOnCall(i int, result1 *cloudwatch.GetMetricDataOutput, result2 error) {
	fake.getMetricDataWithContextMutex.Lock()
	defer fake.getMetricDataWithContextMutex.Unlock()
	fake.GetMetricDataWithContextStub = nil
	if fake.getMetricDataWithContextReturnsOnCall == nil {
		fake.getMetricDataWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricDataOutput
			result2 error
		})
	}
	fake.getMetricDataWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatistics(arg1 *cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error) {
	fake.getMetricStatisticsMutex.Lock()
	ret, specificReturn := fake.getMetricStatisticsReturnsOnCall[len(fake.getMetricStatisticsArgsForCall)]
	fake.getMetricStatisticsArgsForCall = append(fake.getMetricStatisticsArgsForCall, struct {
		arg1 *cloudwatch.GetMetricStatisticsInput
	}{arg1})
	stub := fake.GetMetricStatisticsStub
	fakeReturns := fake.getMetricStatisticsReturns
	fake.recordInvocation("GetMetricStatistics", []interface{}{arg1})
	fake.getMetricStatisticsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsCallCount() int {
	fake.getMetricStatisticsMutex.RLock()
	defer fake.getMetricStatisticsMutex.RUnlock()
	return len(fake.getMetricStatisticsArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsCalls(stub func(*cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error)) {
	fake.getMetricStatisticsMutex.Lock()
	defer fake.getMetricStatisticsMutex.Unlock()
	fake.GetMetricStatisticsStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsArgsForCall(i int) *cloudwatch.GetMetricStatisticsInput {
	fake.getMetricStatisticsMutex.RLock()
	defer fake.getMetricStatisticsMutex.RUnlock()
	argsForCall := fake.getMetricStatisticsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsReturns(result1 *cloudwatch.GetMetricStatisticsOutput, result2 error) {
	fake.getMetricStatisticsMutex.Lock()
	defer fake.getMetricStatisticsMutex.Unlock()
	fake.GetMetricStatisticsStub = nil
	fake.getMetricStatisticsReturns = struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsReturnsOnCall(i int, result1 *cloudwatch.GetMetricStatisticsOutput, result2 error) {
	fake.getMetricStatisticsMutex.Lock()
	defer fake.getMetricStatisticsMutex.Unlock()
	fake.GetMetricStatisticsStub = nil
	if fake.getMetricStatisticsReturnsOnCall == nil {
		fake.getMetricStatisticsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricStatisticsOutput
			result2 error
		})
	}
	fake.getMetricStatisticsReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequest(arg1 *cloudwatch.GetMetricStatisticsInput) (*request.Request, *cloudwatch.GetMetricStatisticsOutput) {
	fake.getMetricStatisticsRequestMutex.Lock()
	ret, specificReturn := fake.getMetricStatisticsRequestReturnsOnCall[len(fake.getMetricStatisticsRequestArgsForCall)]
	fake.getMetricStatisticsRequestArgsForCall = append(fake.getMetricStatisticsRequestArgsForCall, struct {
		arg1 *cloudwatch.GetMetricStatisticsInput
	}{arg1})
	stub := fake.GetMetricStatisticsRequestStub
	fakeReturns := fake.getMetricStatisticsRequestReturns
	fake.recordInvocation("GetMetricStatisticsRequest", []interface{}{arg1})
	fake.getMetricStatisticsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestCallCount() int {
	fake.getMetricStatisticsRequestMutex.RLock()
	defer fake.getMetricStatisticsRequestMutex.RUnlock()
	return len(fake.getMetricStatisticsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestCalls(stub func(*cloudwatch.GetMetricStatisticsInput) (*request.Request, *cloudwatch.GetMetricStatisticsOutput)) {
	fake.getMetricStatisticsRequestMutex.Lock()
	defer fake.getMetricStatisticsRequestMutex.Unlock()
	fake.GetMetricStatisticsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestArgsForCall(i int) *cloudwatch.GetMetricStatisticsInput {
	fake.getMetricStatisticsRequestMutex.RLock()
	defer fake.getMetricStatisticsRequestMutex.RUnlock()
	argsForCall := fake.getMetricStatisticsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestReturns(result1 *request.Request, result2 *cloudwatch.GetMetricStatisticsOutput) {
	fake.getMetricStatisticsRequestMutex.Lock()
	defer fake.getMetricStatisticsRequestMutex.Unlock()
	fake.GetMetricStatisticsRequestStub = nil
	fake.getMetricStatisticsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStatisticsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetMetricStatisticsOutput) {
	fake.getMetricStatisticsRequestMutex.Lock()
	defer fake.getMetricStatisticsRequestMutex.Unlock()
	fake.GetMetricStatisticsRequestStub = nil
	if fake.getMetricStatisticsRequestReturnsOnCall == nil {
		fake.getMetricStatisticsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetMetricStatisticsOutput
		})
	}
	fake.getMetricStatisticsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStatisticsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContext(arg1 context.Context, arg2 *cloudwatch.GetMetricStatisticsInput, arg3 ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error) {
	fake.getMetricStatisticsWithContextMutex.Lock()
	ret, specificReturn := fake.getMetricStatisticsWithContextReturnsOnCall[len(fake.getMetricStatisticsWithContextArgsForCall)]
	fake.getMetricStatisticsWithContextArgsForCall = append(fake.getMetricStatisticsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricStatisticsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMetricStatisticsWithContextStub
	fakeReturns := fake.getMetricStatisticsWithContextReturns
	fake.recordInvocation("GetMetricStatisticsWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMetricStatisticsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextCallCount() int {
	fake.getMetricStatisticsWithContextMutex.RLock()
	defer fake.getMetricStatisticsWithContextMutex.RUnlock()
	return len(fake.getMetricStatisticsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextCalls(stub func(context.Context, *cloudwatch.GetMetricStatisticsInput, ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error)) {
	fake.getMetricStatisticsWithContextMutex.Lock()
	defer fake.getMetricStatisticsWithContextMutex.Unlock()
	fake.GetMetricStatisticsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetMetricStatisticsInput, []request.Option) {
	fake.getMetricStatisticsWithContextMutex.RLock()
	defer fake.getMetricStatisticsWithContextMutex.RUnlock()
	argsForCall := fake.getMetricStatisticsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextReturns(result1 *cloudwatch.GetMetricStatisticsOutput, result2 error) {
	fake.getMetricStatisticsWithContextMutex.Lock()
	defer fake.getMetricStatisticsWithContextMutex.Unlock()
	fake.GetMetricStatisticsWithContextStub = nil
	fake.getMetricStatisticsWithContextReturns = struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextReturnsOnCall(i int, result1 *cloudwatch.GetMetricStatisticsOutput, result2 error) {
	fake.getMetricStatisticsWithContextMutex.Lock()
	defer fake.getMetricStatisticsWithContextMutex.Unlock()
	fake.GetMetricStatisticsWithContextStub = nil
	if fake.getMetricStatisticsWithContextReturnsOnCall == nil {
		fake.getMetricStatisticsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricStatisticsOutput
			result2 error
		})
	}
	fake.getMetricStatisticsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStream(arg1 *cloudwatch.GetMetricStreamInput) (*cloudwatch.GetMetricStreamOutput, error) {
	fake.getMetricStreamMutex.Lock()
	ret, specificReturn := fake.getMetricStreamReturnsOnCall[len(fake.getMetricStreamArgsForCall)]
	fake.getMetricStreamArgsForCall = append(fake.getMetricStreamArgsForCall, struct {
		arg1 *cloudwatch.GetMetricStreamInput
	}{arg1})
	stub := fake.GetMetricStreamStub
	fakeReturns := fake.getMetricStreamReturns
	fake.recordInvocation("GetMetricStream", []interface{}{arg1})
	fake.getMetricStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStreamCallCount() int {
	fake.getMetricStreamMutex.RLock()
	defer fake.getMetricStreamMutex.RUnlock()
	return len(fake.getMetricStreamArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStreamCalls(stub func(*cloudwatch.GetMetricStreamInput) (*cloudwatch.GetMetricStreamOutput, error)) {
	fake.getMetricStreamMutex.Lock()
	defer fake.getMetricStreamMutex.Unlock()
	fake.GetMetricStreamStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStreamArgsForCall(i int) *cloudwatch.GetMetricStreamInput {
	fake.getMetricStreamMutex.RLock()
	defer fake.getMetricStreamMutex.RUnlock()
	argsForCall := fake.getMetricStreamArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricStreamReturns(result1 *cloudwatch.GetMetricStreamOutput, result2 error) {
	fake.getMetricStreamMutex.Lock()
	defer fake.getMetricStreamMutex.Unlock()
	fake.GetMetricStreamStub = nil
	fake.getMetricStreamReturns = struct {
		result1 *cloudwatch.GetMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStreamReturnsOnCall(i int, result1 *cloudwatch.GetMetricStreamOutput, result2 error) {
	fake.getMetricStreamMutex.Lock()
	defer fake.getMetricStreamMutex.Unlock()
	fake.GetMetricStreamStub = nil
	if fake.getMetricStreamReturnsOnCall == nil {
		fake.getMetricStreamReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricStreamOutput
			result2 error
		})
	}
	fake.getMetricStreamReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStreamRequest(arg1 *cloudwatch.GetMetricStreamInput) (*request.Request, *cloudwatch.GetMetricStreamOutput) {
	fake.getMetricStreamRequestMutex.Lock()
	ret, specificReturn := fake.getMetricStreamRequestReturnsOnCall[len(fake.getMetricStreamRequestArgsForCall)]
	fake.getMetricStreamRequestArgsForCall = append(fake.getMetricStreamRequestArgsForCall, struct {
		arg1 *cloudwatch.GetMetricStreamInput
	}{arg1})
	stub := fake.GetMetricStreamRequestStub
	fakeReturns := fake.getMetricStreamRequestReturns
	fake.recordInvocation("GetMetricStreamRequest", []interface{}{arg1})
	fake.getMetricStreamRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStreamRequestCallCount() int {
	fake.getMetricStreamRequestMutex.RLock()
	defer fake.getMetricStreamRequestMutex.RUnlock()
	return len(fake.getMetricStreamRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStreamRequestCalls(stub func(*cloudwatch.GetMetricStreamInput) (*request.Request, *cloudwatch.GetMetricStreamOutput)) {
	fake.getMetricStreamRequestMutex.Lock()
	defer fake.getMetricStreamRequestMutex.Unlock()
	fake.GetMetricStreamRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStreamRequestArgsForCall(i int) *cloudwatch.GetMetricStreamInput {
	fake.getMetricStreamRequestMutex.RLock()
	defer fake.getMetricStreamRequestMutex.RUnlock()
	argsForCall := fake.getMetricStreamRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricStreamRequestReturns(result1 *request.Request, result2 *cloudwatch.GetMetricStreamOutput) {
	fake.getMetricStreamRequestMutex.Lock()
	defer fake.getMetricStreamRequestMutex.Unlock()
	fake.GetMetricStreamRequestStub = nil
	fake.getMetricStreamRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStreamOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStreamRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetMetricStreamOutput) {
	fake.getMetricStreamRequestMutex.Lock()
	defer fake.getMetricStreamRequestMutex.Unlock()
	fake.GetMetricStreamRequestStub = nil
	if fake.getMetricStreamRequestReturnsOnCall == nil {
		fake.getMetricStreamRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetMetricStreamOutput
		})
	}
	fake.getMetricStreamRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStreamOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStreamWithContext(arg1 context.Context, arg2 *cloudwatch.GetMetricStreamInput, arg3 ...request.Option) (*cloudwatch.GetMetricStreamOutput, error) {
	fake.getMetricStreamWithContextMutex.Lock()
	ret, specificReturn := fake.getMetricStreamWithContextReturnsOnCall[len(fake.getMetricStreamWithContextArgsForCall)]
	fake.getMetricStreamWithContextArgsForCall = append(fake.getMetricStreamWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricStreamInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMetricStreamWithContextStub
	fakeReturns := fake.getMetricStreamWithContextReturns
	fake.recordInvocation("GetMetricStreamWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMetricStreamWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStreamWithContextCallCount() int {
	fake.getMetricStreamWithContextMutex.RLock()
	defer fake.getMetricStreamWithContextMutex.RUnlock()
	return len(fake.getMetricStreamWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStreamWithContextCalls(stub func(context.Context, *cloudwatch.GetMetricStreamInput, ...request.Option) (*cloudwatch.GetMetricStreamOutput, error)) {
	fake.getMetricStreamWithContextMutex.Lock()
	defer fake.getMetricStreamWithContextMutex.Unlock()
	fake.GetMetricStreamWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStreamWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetMetricStreamInput, []request.Option) {
	fake.getMetricStreamWithContextMutex.RLock()
	defer fake.getMetricStreamWithContextMutex.RUnlock()
	argsForCall := fake.getMetricStreamWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetMetricStreamWithContextReturns(result1 *cloudwatch.GetMetricStreamOutput, result2 error) {
	fake.getMetricStreamWithContextMutex.Lock()
	defer fake.getMetricStreamWithContextMutex.Unlock()
	fake.GetMetricStreamWithContextStub = nil
	fake.getMetricStreamWithContextReturns = struct {
		result1 *cloudwatch.GetMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStreamWithContextReturnsOnCall(i int, result1 *cloudwatch.GetMetricStreamOutput, result2 error) {
	fake.getMetricStreamWithContextMutex.Lock()
	defer fake.getMetricStreamWithContextMutex.Unlock()
	fake.GetMetricStreamWithContextStub = nil
	if fake.getMetricStreamWithContextReturnsOnCall == nil {
		fake.getMetricStreamWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricStreamOutput
			result2 error
		})
	}
	fake.getMetricStreamWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImage(arg1 *cloudwatch.GetMetricWidgetImageInput) (*cloudwatch.GetMetricWidgetImageOutput, error) {
	fake.getMetricWidgetImageMutex.Lock()
	ret, specificReturn := fake.getMetricWidgetImageReturnsOnCall[len(fake.getMetricWidgetImageArgsForCall)]
	fake.getMetricWidgetImageArgsForCall = append(fake.getMetricWidgetImageArgsForCall, struct {
		arg1 *cloudwatch.GetMetricWidgetImageInput
	}{arg1})
	stub := fake.GetMetricWidgetImageStub
	fakeReturns := fake.getMetricWidgetImageReturns
	fake.recordInvocation("GetMetricWidgetImage", []interface{}{arg1})
	fake.getMetricWidgetImageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageCallCount() int {
	fake.getMetricWidgetImageMutex.RLock()
	defer fake.getMetricWidgetImageMutex.RUnlock()
	return len(fake.getMetricWidgetImageArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageCalls(stub func(*cloudwatch.GetMetricWidgetImageInput) (*cloudwatch.GetMetricWidgetImageOutput, error)) {
	fake.getMetricWidgetImageMutex.Lock()
	defer fake.getMetricWidgetImageMutex.Unlock()
	fake.GetMetricWidgetImageStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageArgsForCall(i int) *cloudwatch.GetMetricWidgetImageInput {
	fake.getMetricWidgetImageMutex.RLock()
	defer fake.getMetricWidgetImageMutex.RUnlock()
	argsForCall := fake.getMetricWidgetImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageReturns(result1 *cloudwatch.GetMetricWidgetImageOutput, result2 error) {
	fake.getMetricWidgetImageMutex.Lock()
	defer fake.getMetricWidgetImageMutex.Unlock()
	fake.GetMetricWidgetImageStub = nil
	fake.getMetricWidgetImageReturns = struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageReturnsOnCall(i int, result1 *cloudwatch.GetMetricWidgetImageOutput, result2 error) {
	fake.getMetricWidgetImageMutex.Lock()
	defer fake.getMetricWidgetImageMutex.Unlock()
	fake.GetMetricWidgetImageStub = nil
	if fake.getMetricWidgetImageReturnsOnCall == nil {
		fake.getMetricWidgetImageReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricWidgetImageOutput
			result2 error
		})
	}
	fake.getMetricWidgetImageReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequest(arg1 *cloudwatch.GetMetricWidgetImageInput) (*request.Request, *cloudwatch.GetMetricWidgetImageOutput) {
	fake.getMetricWidgetImageRequestMutex.Lock()
	ret, specificReturn := fake.getMetricWidgetImageRequestReturnsOnCall[len(fake.getMetricWidgetImageRequestArgsForCall)]
	fake.getMetricWidgetImageRequestArgsForCall = append(fake.getMetricWidgetImageRequestArgsForCall, struct {
		arg1 *cloudwatch.GetMetricWidgetImageInput
	}{arg1})
	stub := fake.GetMetricWidgetImageRequestStub
	fakeReturns := fake.getMetricWidgetImageRequestReturns
	fake.recordInvocation("GetMetricWidgetImageRequest", []interface{}{arg1})
	fake.getMetricWidgetImageRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestCallCount() int {
	fake.getMetricWidgetImageRequestMutex.RLock()
	defer fake.getMetricWidgetImageRequestMutex.RUnlock()
	return len(fake.getMetricWidgetImageRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestCalls(stub func(*cloudwatch.GetMetricWidgetImageInput) (*request.Request, *cloudwatch.GetMetricWidgetImageOutput)) {
	fake.getMetricWidgetImageRequestMutex.Lock()
	defer fake.getMetricWidgetImageRequestMutex.Unlock()
	fake.GetMetricWidgetImageRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestArgsForCall(i int) *cloudwatch.GetMetricWidgetImageInput {
	fake.getMetricWidgetImageRequestMutex.RLock()
	defer fake.getMetricWidgetImageRequestMutex.RUnlock()
	argsForCall := fake.getMetricWidgetImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestReturns(result1 *request.Request, result2 *cloudwatch.GetMetricWidgetImageOutput) {
	fake.getMetricWidgetImageRequestMutex.Lock()
	defer fake.getMetricWidgetImageRequestMutex.Unlock()
	fake.GetMetricWidgetImageRequestStub = nil
	fake.getMetricWidgetImageRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricWidgetImageOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetMetricWidgetImageOutput) {
	fake.getMetricWidgetImageRequestMutex.Lock()
	defer fake.getMetricWidgetImageRequestMutex.Unlock()
	fake.GetMetricWidgetImageRequestStub = nil
	if fake.getMetricWidgetImageRequestReturnsOnCall == nil {
		fake.getMetricWidgetImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetMetricWidgetImageOutput
		})
	}
	fake.getMetricWidgetImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricWidgetImageOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContext(arg1 context.Context, arg2 *cloudwatch.GetMetricWidgetImageInput, arg3 ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error) {
	fake.getMetricWidgetImageWithContextMutex.Lock()
	ret, specificReturn := fake.getMetricWidgetImageWithContextReturnsOnCall[len(fake.getMetricWidgetImageWithContextArgsForCall)]
	fake.getMetricWidgetImageWithContextArgsForCall = append(fake.getMetricWidgetImageWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricWidgetImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMetricWidgetImageWithContextStub
	fakeReturns := fake.getMetricWidgetImageWithContextReturns
	fake.recordInvocation("GetMetricWidgetImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMetricWidgetImageWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextCallCount() int {
	fake.getMetricWidgetImageWithContextMutex.RLock()
	defer fake.getMetricWidgetImageWithContextMutex.RUnlock()
	return len(fake.getMetricWidgetImageWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextCalls(stub func(context.Context, *cloudwatch.GetMetricWidgetImageInput, ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error)) {
	fake.getMetricWidgetImageWithContextMutex.Lock()
	defer fake.getMetricWidgetImageWithContextMutex.Unlock()
	fake.GetMetricWidgetImageWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetMetricWidgetImageInput, []request.Option) {
	fake.getMetricWidgetImageWithContextMutex.RLock()
	defer fake.getMetricWidgetImageWithContextMutex.RUnlock()
	argsForCall := fake.getMetricWidgetImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextReturns(result1 *cloudwatch.GetMetricWidgetImageOutput, result2 error) {
	fake.getMetricWidgetImageWithContextMutex.Lock()
	defer fake.getMetricWidgetImageWithContextMutex.Unlock()
	fake.GetMetricWidgetImageWithContextStub = nil
	fake.getMetricWidgetImageWithContextReturns = struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextReturnsOnCall(i int, result1 *cloudwatch.GetMetricWidgetImageOutput, result2 error) {
	fake.getMetricWidgetImageWithContextMutex.Lock()
	defer fake.getMetricWidgetImageWithContextMutex.Unlock()
	fake.GetMetricWidgetImageWithContextStub = nil
	if fake.getMetricWidgetImageWithContextReturnsOnCall == nil {
		fake.getMetricWidgetImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricWidgetImageOutput
			result2 error
		})
	}
	fake.getMetricWidgetImageWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboards(arg1 *cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error) {
	fake.listDashboardsMutex.Lock()
	ret, specificReturn := fake.listDashboardsReturnsOnCall[len(fake.listDashboardsArgsForCall)]
	fake.listDashboardsArgsForCall = append(fake.listDashboardsArgsForCall, struct {
		arg1 *cloudwatch.ListDashboardsInput
	}{arg1})
	stub := fake.ListDashboardsStub
	fakeReturns := fake.listDashboardsReturns
	fake.recordInvocation("ListDashboards", []interface{}{arg1})
	fake.listDashboardsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListDashboardsCallCount() int {
	fake.listDashboardsMutex.RLock()
	defer fake.listDashboardsMutex.RUnlock()
	return len(fake.listDashboardsArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListDashboardsCalls(stub func(*cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error)) {
	fake.listDashboardsMutex.Lock()
	defer fake.listDashboardsMutex.Unlock()
	fake.ListDashboardsStub = stub
}

func (fake *FakeCloudWatchAPI) ListDashboardsArgsForCall(i int) *cloudwatch.ListDashboardsInput {
	fake.listDashboardsMutex.RLock()
	defer fake.listDashboardsMutex.RUnlock()
	argsForCall := fake.listDashboardsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListDashboardsReturns(result1 *cloudwatch.ListDashboardsOutput, result2 error) {
	fake.listDashboardsMutex.Lock()
	defer fake.listDashboardsMutex.Unlock()
	fake.ListDashboardsStub = nil
	fake.listDashboardsReturns = struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsReturnsOnCall(i int, result1 *cloudwatch.ListDashboardsOutput, result2 error) {
	fake.listDashboardsMutex.Lock()
	defer fake.listDashboardsMutex.Unlock()
	fake.ListDashboardsStub = nil
	if fake.listDashboardsReturnsOnCall == nil {
		fake.listDashboardsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListDashboardsOutput
			result2 error
		})
	}
	fake.listDashboardsReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsPages(arg1 *cloudwatch.ListDashboardsInput, arg2 func(*cloudwatch.ListDashboardsOutput, bool) bool) error {
	fake.listDashboardsPagesMutex.Lock()
	ret, specificReturn := fake.listDashboardsPagesReturnsOnCall[len(fake.listDashboardsPagesArgsForCall)]
	fake.listDashboardsPagesArgsForCall = append(fake.listDashboardsPagesArgsForCall, struct {
		arg1 *cloudwatch.ListDashboardsInput
		arg2 func(*cloudwatch.ListDashboardsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListDashboardsPagesStub
	fakeReturns := fake.listDashboardsPagesReturns
	fake.recordInvocation("ListDashboardsPages", []interface{}{arg1, arg2})
	fake.listDashboardsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesCallCount() int {
	fake.listDashboardsPagesMutex.RLock()
	defer fake.listDashboardsPagesMutex.RUnlock()
	return len(fake.listDashboardsPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesCalls(stub func(*cloudwatch.ListDashboardsInput, func(*cloudwatch.ListDashboardsOutput, bool) bool) error) {
	fake.listDashboardsPagesMutex.Lock()
	defer fake.listDashboardsPagesMutex.Unlock()
	fake.ListDashboardsPagesStub = stub
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesArgsForCall(i int) (*cloudwatch.ListDashboardsInput, func(*cloudwatch.ListDashboardsOutput, bool) bool) {
	fake.listDashboardsPagesMutex.RLock()
	defer fake.listDashboardsPagesMutex.RUnlock()
	argsForCall := fake.listDashboardsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesReturns(result1 error) {
	fake.listDashboardsPagesMutex.Lock()
	defer fake.listDashboardsPagesMutex.Unlock()
	fake.ListDashboardsPagesStub = nil
	fake.listDashboardsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesReturnsOnCall(i int, result1 error) {
	fake.listDashboardsPagesMutex.Lock()
	defer fake.listDashboardsPagesMutex.Unlock()
	fake.ListDashboardsPagesStub = nil
	if fake.listDashboardsPagesReturnsOnCall == nil {
		fake.listDashboardsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDashboardsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesWithContext(arg1 context.Context, arg2 *cloudwatch.ListDashboardsInput, arg3 func(*cloudwatch.ListDashboardsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listDashboardsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listDashboardsPagesWithContextReturnsOnCall[len(fake.listDashboardsPagesWithContextArgsForCall)]
	fake.listDashboardsPagesWithContextArgsForCall = append(fake.listDashboardsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListDashboardsInput
		arg3 func(*cloudwatch.ListDashboardsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListDashboardsPagesWithContextStub
	fakeReturns := fake.listDashboardsPagesWithContextReturns
	fake.recordInvocation("ListDashboardsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listDashboardsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesWithContextCallCount() int {
	fake.listDashboardsPagesWithContextMutex.RLock()
	defer fake.listDashboardsPagesWithContextMutex.RUnlock()
	return len(fake.listDashboardsPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesWithContextCalls(stub func(context.Context, *cloudwatch.ListDashboardsInput, func(*cloudwatch.ListDashboardsOutput, bool) bool, ...request.Option) error) {
	fake.listDashboardsPagesWithContextMutex.Lock()
	defer fake.listDashboardsPagesWithContextMutex.Unlock()
	fake.ListDashboardsPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListDashboardsInput, func(*cloudwatch.ListDashboardsOutput, bool) bool, []request.Option) {
	fake.listDashboardsPagesWithContextMutex.RLock()
	defer fake.listDashboardsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listDashboardsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesWithContextReturns(result1 error) {
	fake.listDashboardsPagesWithContextMutex.Lock()
	defer fake.listDashboardsPagesWithContextMutex.Unlock()
	fake.ListDashboardsPagesWithContextStub = nil
	fake.listDashboardsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListDashboardsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listDashboardsPagesWithContextMutex.Lock()
	defer fake.listDashboardsPagesWithContextMutex.Unlock()
	fake.ListDashboardsPagesWithContextStub = nil
	if fake.listDashboardsPagesWithContextReturnsOnCall == nil {
		fake.listDashboardsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDashboardsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequest(arg1 *cloudwatch.ListDashboardsInput) (*request.Request, *cloudwatch.ListDashboardsOutput) {
	fake.listDashboardsRequestMutex.Lock()
	ret, specificReturn := fake.listDashboardsRequestReturnsOnCall[len(fake.listDashboardsRequestArgsForCall)]
	fake.listDashboardsRequestArgsForCall = append(fake.listDashboardsRequestArgsForCall, struct {
		arg1 *cloudwatch.ListDashboardsInput
	}{arg1})
	stub := fake.ListDashboardsRequestStub
	fakeReturns := fake.listDashboardsRequestReturns
	fake.recordInvocation("ListDashboardsRequest", []interface{}{arg1})
	fake.listDashboardsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestCallCount() int {
	fake.listDashboardsRequestMutex.RLock()
	defer fake.listDashboardsRequestMutex.RUnlock()
	return len(fake.listDashboardsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestCalls(stub func(*cloudwatch.ListDashboardsInput) (*request.Request, *cloudwatch.ListDashboardsOutput)) {
	fake.listDashboardsRequestMutex.Lock()
	defer fake.listDashboardsRequestMutex.Unlock()
	fake.ListDashboardsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestArgsForCall(i int) *cloudwatch.ListDashboardsInput {
	fake.listDashboardsRequestMutex.RLock()
	defer fake.listDashboardsRequestMutex.RUnlock()
	argsForCall := fake.listDashboardsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestReturns(result1 *request.Request, result2 *cloudwatch.ListDashboardsOutput) {
	fake.listDashboardsRequestMutex.Lock()
	defer fake.listDashboardsRequestMutex.Unlock()
	fake.ListDashboardsRequestStub = nil
	fake.listDashboardsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.ListDashboardsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.ListDashboardsOutput) {
	fake.listDashboardsRequestMutex.Lock()
	defer fake.listDashboardsRequestMutex.Unlock()
	fake.ListDashboardsRequestStub = nil
	if fake.listDashboardsRequestReturnsOnCall == nil {
		fake.listDashboardsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.ListDashboardsOutput
		})
	}
	fake.listDashboardsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.ListDashboardsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContext(arg1 context.Context, arg2 *cloudwatch.ListDashboardsInput, arg3 ...request.Option) (*cloudwatch.ListDashboardsOutput, error) {
	fake.listDashboardsWithContextMutex.Lock()
	ret, specificReturn := fake.listDashboardsWithContextReturnsOnCall[len(fake.listDashboardsWithContextArgsForCall)]
	fake.listDashboardsWithContextArgsForCall = append(fake.listDashboardsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListDashboardsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDashboardsWithContextStub
	fakeReturns := fake.listDashboardsWithContextReturns
	fake.recordInvocation("ListDashboardsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDashboardsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextCallCount() int {
	fake.listDashboardsWithContextMutex.RLock()
	defer fake.listDashboardsWithContextMutex.RUnlock()
	return len(fake.listDashboardsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextCalls(stub func(context.Context, *cloudwatch.ListDashboardsInput, ...request.Option) (*cloudwatch.ListDashboardsOutput, error)) {
	fake.listDashboardsWithContextMutex.Lock()
	defer fake.listDashboardsWithContextMutex.Unlock()
	fake.ListDashboardsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListDashboardsInput, []request.Option) {
	fake.listDashboardsWithContextMutex.RLock()
	defer fake.listDashboardsWithContextMutex.RUnlock()
	argsForCall := fake.listDashboardsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextReturns(result1 *cloudwatch.ListDashboardsOutput, result2 error) {
	fake.listDashboardsWithContextMutex.Lock()
	defer fake.listDashboardsWithContextMutex.Unlock()
	fake.ListDashboardsWithContextStub = nil
	fake.listDashboardsWithContextReturns = struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextReturnsOnCall(i int, result1 *cloudwatch.ListDashboardsOutput, result2 error) {
	fake.listDashboardsWithContextMutex.Lock()
	defer fake.listDashboardsWithContextMutex.Unlock()
	fake.ListDashboardsWithContextStub = nil
	if fake.listDashboardsWithContextReturnsOnCall == nil {
		fake.listDashboardsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListDashboardsOutput
			result2 error
		})
	}
	fake.listDashboardsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRules(arg1 *cloudwatch.ListManagedInsightRulesInput) (*cloudwatch.ListManagedInsightRulesOutput, error) {
	fake.listManagedInsightRulesMutex.Lock()
	ret, specificReturn := fake.listManagedInsightRulesReturnsOnCall[len(fake.listManagedInsightRulesArgsForCall)]
	fake.listManagedInsightRulesArgsForCall = append(fake.listManagedInsightRulesArgsForCall, struct {
		arg1 *cloudwatch.ListManagedInsightRulesInput
	}{arg1})
	stub := fake.ListManagedInsightRulesStub
	fakeReturns := fake.listManagedInsightRulesReturns
	fake.recordInvocation("ListManagedInsightRules", []interface{}{arg1})
	fake.listManagedInsightRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesCallCount() int {
	fake.listManagedInsightRulesMutex.RLock()
	defer fake.listManagedInsightRulesMutex.RUnlock()
	return len(fake.listManagedInsightRulesArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesCalls(stub func(*cloudwatch.ListManagedInsightRulesInput) (*cloudwatch.ListManagedInsightRulesOutput, error)) {
	fake.listManagedInsightRulesMutex.Lock()
	defer fake.listManagedInsightRulesMutex.Unlock()
	fake.ListManagedInsightRulesStub = stub
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesArgsForCall(i int) *cloudwatch.ListManagedInsightRulesInput {
	fake.listManagedInsightRulesMutex.RLock()
	defer fake.listManagedInsightRulesMutex.RUnlock()
	argsForCall := fake.listManagedInsightRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesReturns(result1 *cloudwatch.ListManagedInsightRulesOutput, result2 error) {
	fake.listManagedInsightRulesMutex.Lock()
	defer fake.listManagedInsightRulesMutex.Unlock()
	fake.ListManagedInsightRulesStub = nil
	fake.listManagedInsightRulesReturns = struct {
		result1 *cloudwatch.ListManagedInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesReturnsOnCall(i int, result1 *cloudwatch.ListManagedInsightRulesOutput, result2 error) {
	fake.listManagedInsightRulesMutex.Lock()
	defer fake.listManagedInsightRulesMutex.Unlock()
	fake.ListManagedInsightRulesStub = nil
	if fake.listManagedInsightRulesReturnsOnCall == nil {
		fake.listManagedInsightRulesReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListManagedInsightRulesOutput
			result2 error
		})
	}
	fake.listManagedInsightRulesReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListManagedInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPages(arg1 *cloudwatch.ListManagedInsightRulesInput, arg2 func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool) error {
	fake.listManagedInsightRulesPagesMutex.Lock()
	ret, specificReturn := fake.listManagedInsightRulesPagesReturnsOnCall[len(fake.listManagedInsightRulesPagesArgsForCall)]
	fake.listManagedInsightRulesPagesArgsForCall = append(fake.listManagedInsightRulesPagesArgsForCall, struct {
		arg1 *cloudwatch.ListManagedInsightRulesInput
		arg2 func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListManagedInsightRulesPagesStub
	fakeReturns := fake.listManagedInsightRulesPagesReturns
	fake.recordInvocation("ListManagedInsightRulesPages", []interface{}{arg1, arg2})
	fake.listManagedInsightRulesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesCallCount() int {
	fake.listManagedInsightRulesPagesMutex.RLock()
	defer fake.listManagedInsightRulesPagesMutex.RUnlock()
	return len(fake.listManagedInsightRulesPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesCalls(stub func(*cloudwatch.ListManagedInsightRulesInput, func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool) error) {
	fake.listManagedInsightRulesPagesMutex.Lock()
	defer fake.listManagedInsightRulesPagesMutex.Unlock()
	fake.ListManagedInsightRulesPagesStub = stub
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesArgsForCall(i int) (*cloudwatch.ListManagedInsightRulesInput, func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool) {
	fake.listManagedInsightRulesPagesMutex.RLock()
	defer fake.listManagedInsightRulesPagesMutex.RUnlock()
	argsForCall := fake.listManagedInsightRulesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesReturns(result1 error) {
	fake.listManagedInsightRulesPagesMutex.Lock()
	defer fake.listManagedInsightRulesPagesMutex.Unlock()
	fake.ListManagedInsightRulesPagesStub = nil
	fake.listManagedInsightRulesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesReturnsOnCall(i int, result1 error) {
	fake.listManagedInsightRulesPagesMutex.Lock()
	defer fake.listManagedInsightRulesPagesMutex.Unlock()
	fake.ListManagedInsightRulesPagesStub = nil
	if fake.listManagedInsightRulesPagesReturnsOnCall == nil {
		fake.listManagedInsightRulesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listManagedInsightRulesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesWithContext(arg1 context.Context, arg2 *cloudwatch.ListManagedInsightRulesInput, arg3 func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listManagedInsightRulesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listManagedInsightRulesPagesWithContextReturnsOnCall[len(fake.listManagedInsightRulesPagesWithContextArgsForCall)]
	fake.listManagedInsightRulesPagesWithContextArgsForCall = append(fake.listManagedInsightRulesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListManagedInsightRulesInput
		arg3 func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListManagedInsightRulesPagesWithContextStub
	fakeReturns := fake.listManagedInsightRulesPagesWithContextReturns
	fake.recordInvocation("ListManagedInsightRulesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listManagedInsightRulesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesWithContextCallCount() int {
	fake.listManagedInsightRulesPagesWithContextMutex.RLock()
	defer fake.listManagedInsightRulesPagesWithContextMutex.RUnlock()
	return len(fake.listManagedInsightRulesPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesWithContextCalls(stub func(context.Context, *cloudwatch.ListManagedInsightRulesInput, func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool, ...request.Option) error) {
	fake.listManagedInsightRulesPagesWithContextMutex.Lock()
	defer fake.listManagedInsightRulesPagesWithContextMutex.Unlock()
	fake.ListManagedInsightRulesPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListManagedInsightRulesInput, func(*cloudwatch.ListManagedInsightRulesOutput, bool) bool, []request.Option) {
	fake.listManagedInsightRulesPagesWithContextMutex.RLock()
	defer fake.listManagedInsightRulesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listManagedInsightRulesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesWithContextReturns(result1 error) {
	fake.listManagedInsightRulesPagesWithContextMutex.Lock()
	defer fake.listManagedInsightRulesPagesWithContextMutex.Unlock()
	fake.ListManagedInsightRulesPagesWithContextStub = nil
	fake.listManagedInsightRulesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listManagedInsightRulesPagesWithContextMutex.Lock()
	defer fake.listManagedInsightRulesPagesWithContextMutex.Unlock()
	fake.ListManagedInsightRulesPagesWithContextStub = nil
	if fake.listManagedInsightRulesPagesWithContextReturnsOnCall == nil {
		fake.listManagedInsightRulesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listManagedInsightRulesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesRequest(arg1 *cloudwatch.ListManagedInsightRulesInput) (*request.Request, *cloudwatch.ListManagedInsightRulesOutput) {
	fake.listManagedInsightRulesRequestMutex.Lock()
	ret, specificReturn := fake.listManagedInsightRulesRequestReturnsOnCall[len(fake.listManagedInsightRulesRequestArgsForCall)]
	fake.listManagedInsightRulesRequestArgsForCall = append(fake.listManagedInsightRulesRequestArgsForCall, struct {
		arg1 *cloudwatch.ListManagedInsightRulesInput
	}{arg1})
	stub := fake.ListManagedInsightRulesRequestStub
	fakeReturns := fake.listManagedInsightRulesRequestReturns
	fake.recordInvocation("ListManagedInsightRulesRequest", []interface{}{arg1})
	fake.listManagedInsightRulesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesRequestCallCount() int {
	fake.listManagedInsightRulesRequestMutex.RLock()
	defer fake.listManagedInsightRulesRequestMutex.RUnlock()
	return len(fake.listManagedInsightRulesRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesRequestCalls(stub func(*cloudwatch.ListManagedInsightRulesInput) (*request.Request, *cloudwatch.ListManagedInsightRulesOutput)) {
	fake.listManagedInsightRulesRequestMutex.Lock()
	defer fake.listManagedInsightRulesRequestMutex.Unlock()
	fake.ListManagedInsightRulesRequestStub = stub
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesRequestArgsForCall(i int) *cloudwatch.ListManagedInsightRulesInput {
	fake.listManagedInsightRulesRequestMutex.RLock()
	defer fake.listManagedInsightRulesRequestMutex.RUnlock()
	argsForCall := fake.listManagedInsightRulesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesRequestReturns(result1 *request.Request, result2 *cloudwatch.ListManagedInsightRulesOutput) {
	fake.listManagedInsightRulesRequestMutex.Lock()
	defer fake.listManagedInsightRulesRequestMutex.Unlock()
	fake.ListManagedInsightRulesRequestStub = nil
	fake.listManagedInsightRulesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.ListManagedInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.ListManagedInsightRulesOutput) {
	fake.listManagedInsightRulesRequestMutex.Lock()
	defer fake.listManagedInsightRulesRequestMutex.Unlock()
	fake.ListManagedInsightRulesRequestStub = nil
	if fake.listManagedInsightRulesRequestReturnsOnCall == nil {
		fake.listManagedInsightRulesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.ListManagedInsightRulesOutput
		})
	}
	fake.listManagedInsightRulesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.ListManagedInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesWithContext(arg1 context.Context, arg2 *cloudwatch.ListManagedInsightRulesInput, arg3 ...request.Option) (*cloudwatch.ListManagedInsightRulesOutput, error) {
	fake.listManagedInsightRulesWithContextMutex.Lock()
	ret, specificReturn := fake.listManagedInsightRulesWithContextReturnsOnCall[len(fake.listManagedInsightRulesWithContextArgsForCall)]
	fake.listManagedInsightRulesWithContextArgsForCall = append(fake.listManagedInsightRulesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListManagedInsightRulesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListManagedInsightRulesWithContextStub
	fakeReturns := fake.listManagedInsightRulesWithContextReturns
	fake.recordInvocation("ListManagedInsightRulesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listManagedInsightRulesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesWithContextCallCount() int {
	fake.listManagedInsightRulesWithContextMutex.RLock()
	defer fake.listManagedInsightRulesWithContextMutex.RUnlock()
	return len(fake.listManagedInsightRulesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesWithContextCalls(stub func(context.Context, *cloudwatch.ListManagedInsightRulesInput, ...request.Option) (*cloudwatch.ListManagedInsightRulesOutput, error)) {
	fake.listManagedInsightRulesWithContextMutex.Lock()
	defer fake.listManagedInsightRulesWithContextMutex.Unlock()
	fake.ListManagedInsightRulesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListManagedInsightRulesInput, []request.Option) {
	fake.listManagedInsightRulesWithContextMutex.RLock()
	defer fake.listManagedInsightRulesWithContextMutex.RUnlock()
	argsForCall := fake.listManagedInsightRulesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesWithContextReturns(result1 *cloudwatch.ListManagedInsightRulesOutput, result2 error) {
	fake.listManagedInsightRulesWithContextMutex.Lock()
	defer fake.listManagedInsightRulesWithContextMutex.Unlock()
	fake.ListManagedInsightRulesWithContextStub = nil
	fake.listManagedInsightRulesWithContextReturns = struct {
		result1 *cloudwatch.ListManagedInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListManagedInsightRulesWithContextReturnsOnCall(i int, result1 *cloudwatch.ListManagedInsightRulesOutput, result2 error) {
	fake.listManagedInsightRulesWithContextMutex.Lock()
	defer fake.listManagedInsightRulesWithContextMutex.Unlock()
	fake.ListManagedInsightRulesWithContextStub = nil
	if fake.listManagedInsightRulesWithContextReturnsOnCall == nil {
		fake.listManagedInsightRulesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListManagedInsightRulesOutput
			result2 error
		})
	}
	fake.listManagedInsightRulesWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListManagedInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricStreams(arg1 *cloudwatch.ListMetricStreamsInput) (*cloudwatch.ListMetricStreamsOutput, error) {
	fake.listMetricStreamsMutex.Lock()
	ret, specificReturn := fake.listMetricStreamsReturnsOnCall[len(fake.listMetricStreamsArgsForCall)]
	fake.listMetricStreamsArgsForCall = append(fake.listMetricStreamsArgsForCall, struct {
		arg1 *cloudwatch.ListMetricStreamsInput
	}{arg1})
	stub := fake.ListMetricStreamsStub
	fakeReturns := fake.listMetricStreamsReturns
	fake.recordInvocation("ListMetricStreams", []interface{}{arg1})
	fake.listMetricStreamsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsCallCount() int {
	fake.listMetricStreamsMutex.RLock()
	defer fake.listMetricStreamsMutex.RUnlock()
	return len(fake.listMetricStreamsArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsCalls(stub func(*cloudwatch.ListMetricStreamsInput) (*cloudwatch.ListMetricStreamsOutput, error)) {
	fake.listMetricStreamsMutex.Lock()
	defer fake.listMetricStreamsMutex.Unlock()
	fake.ListMetricStreamsStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsArgsForCall(i int) *cloudwatch.ListMetricStreamsInput {
	fake.listMetricStreamsMutex.RLock()
	defer fake.listMetricStreamsMutex.RUnlock()
	argsForCall := fake.listMetricStreamsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsReturns(result1 *cloudwatch.ListMetricStreamsOutput, result2 error) {
	fake.listMetricStreamsMutex.Lock()
	defer fake.listMetricStreamsMutex.Unlock()
	fake.ListMetricStreamsStub = nil
	fake.listMetricStreamsReturns = struct {
		result1 *cloudwatch.ListMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsReturnsOnCall(i int, result1 *cloudwatch.ListMetricStreamsOutput, result2 error) {
	fake.listMetricStreamsMutex.Lock()
	defer fake.listMetricStreamsMutex.Unlock()
	fake.ListMetricStreamsStub = nil
	if fake.listMetricStreamsReturnsOnCall == nil {
		fake.listMetricStreamsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListMetricStreamsOutput
			result2 error
		})
	}
	fake.listMetricStreamsReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPages(arg1 *cloudwatch.ListMetricStreamsInput, arg2 func(*cloudwatch.ListMetricStreamsOutput, bool) bool) error {
	fake.listMetricStreamsPagesMutex.Lock()
	ret, specificReturn := fake.listMetricStreamsPagesReturnsOnCall[len(fake.listMetricStreamsPagesArgsForCall)]
	fake.listMetricStreamsPagesArgsForCall = append(fake.listMetricStreamsPagesArgsForCall, struct {
		arg1 *cloudwatch.ListMetricStreamsInput
		arg2 func(*cloudwatch.ListMetricStreamsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListMetricStreamsPagesStub
	fakeReturns := fake.listMetricStreamsPagesReturns
	fake.recordInvocation("ListMetricStreamsPages", []interface{}{arg1, arg2})
	fake.listMetricStreamsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesCallCount() int {
	fake.listMetricStreamsPagesMutex.RLock()
	defer fake.listMetricStreamsPagesMutex.RUnlock()
	return len(fake.listMetricStreamsPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesCalls(stub func(*cloudwatch.ListMetricStreamsInput, func(*cloudwatch.ListMetricStreamsOutput, bool) bool) error) {
	fake.listMetricStreamsPagesMutex.Lock()
	defer fake.listMetricStreamsPagesMutex.Unlock()
	fake.ListMetricStreamsPagesStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesArgsForCall(i int) (*cloudwatch.ListMetricStreamsInput, func(*cloudwatch.ListMetricStreamsOutput, bool) bool) {
	fake.listMetricStreamsPagesMutex.RLock()
	defer fake.listMetricStreamsPagesMutex.RUnlock()
	argsForCall := fake.listMetricStreamsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesReturns(result1 error) {
	fake.listMetricStreamsPagesMutex.Lock()
	defer fake.listMetricStreamsPagesMutex.Unlock()
	fake.ListMetricStreamsPagesStub = nil
	fake.listMetricStreamsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesReturnsOnCall(i int, result1 error) {
	fake.listMetricStreamsPagesMutex.Lock()
	defer fake.listMetricStreamsPagesMutex.Unlock()
	fake.ListMetricStreamsPagesStub = nil
	if fake.listMetricStreamsPagesReturnsOnCall == nil {
		fake.listMetricStreamsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMetricStreamsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesWithContext(arg1 context.Context, arg2 *cloudwatch.ListMetricStreamsInput, arg3 func(*cloudwatch.ListMetricStreamsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listMetricStreamsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listMetricStreamsPagesWithContextReturnsOnCall[len(fake.listMetricStreamsPagesWithContextArgsForCall)]
	fake.listMetricStreamsPagesWithContextArgsForCall = append(fake.listMetricStreamsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricStreamsInput
		arg3 func(*cloudwatch.ListMetricStreamsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListMetricStreamsPagesWithContextStub
	fakeReturns := fake.listMetricStreamsPagesWithContextReturns
	fake.recordInvocation("ListMetricStreamsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMetricStreamsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesWithContextCallCount() int {
	fake.listMetricStreamsPagesWithContextMutex.RLock()
	defer fake.listMetricStreamsPagesWithContextMutex.RUnlock()
	return len(fake.listMetricStreamsPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesWithContextCalls(stub func(context.Context, *cloudwatch.ListMetricStreamsInput, func(*cloudwatch.ListMetricStreamsOutput, bool) bool, ...request.Option) error) {
	fake.listMetricStreamsPagesWithContextMutex.Lock()
	defer fake.listMetricStreamsPagesWithContextMutex.Unlock()
	fake.ListMetricStreamsPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListMetricStreamsInput, func(*cloudwatch.ListMetricStreamsOutput, bool) bool, []request.Option) {
	fake.listMetricStreamsPagesWithContextMutex.RLock()
	defer fake.listMetricStreamsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listMetricStreamsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesWithContextReturns(result1 error) {
	fake.listMetricStreamsPagesWithContextMutex.Lock()
	defer fake.listMetricStreamsPagesWithContextMutex.Unlock()
	fake.ListMetricStreamsPagesWithContextStub = nil
	fake.listMetricStreamsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listMetricStreamsPagesWithContextMutex.Lock()
	defer fake.listMetricStreamsPagesWithContextMutex.Unlock()
	fake.ListMetricStreamsPagesWithContextStub = nil
	if fake.listMetricStreamsPagesWithContextReturnsOnCall == nil {
		fake.listMetricStreamsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMetricStreamsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsRequest(arg1 *cloudwatch.ListMetricStreamsInput) (*request.Request, *cloudwatch.ListMetricStreamsOutput) {
	fake.listMetricStreamsRequestMutex.Lock()
	ret, specificReturn := fake.listMetricStreamsRequestReturnsOnCall[len(fake.listMetricStreamsRequestArgsForCall)]
	fake.listMetricStreamsRequestArgsForCall = append(fake.listMetricStreamsRequestArgsForCall, struct {
		arg1 *cloudwatch.ListMetricStreamsInput
	}{arg1})
	stub := fake.ListMetricStreamsRequestStub
	fakeReturns := fake.listMetricStreamsRequestReturns
	fake.recordInvocation("ListMetricStreamsRequest", []interface{}{arg1})
	fake.listMetricStreamsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsRequestCallCount() int {
	fake.listMetricStreamsRequestMutex.RLock()
	defer fake.listMetricStreamsRequestMutex.RUnlock()
	return len(fake.listMetricStreamsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsRequestCalls(stub func(*cloudwatch.ListMetricStreamsInput) (*request.Request, *cloudwatch.ListMetricStreamsOutput)) {
	fake.listMetricStreamsRequestMutex.Lock()
	defer fake.listMetricStreamsRequestMutex.Unlock()
	fake.ListMetricStreamsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsRequestArgsForCall(i int) *cloudwatch.ListMetricStreamsInput {
	fake.listMetricStreamsRequestMutex.RLock()
	defer fake.listMetricStreamsRequestMutex.RUnlock()
	argsForCall := fake.listMetricStreamsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsRequestReturns(result1 *request.Request, result2 *cloudwatch.ListMetricStreamsOutput) {
	fake.listMetricStreamsRequestMutex.Lock()
	defer fake.listMetricStreamsRequestMutex.Unlock()
	fake.ListMetricStreamsRequestStub = nil
	fake.listMetricStreamsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricStreamsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.ListMetricStreamsOutput) {
	fake.listMetricStreamsRequestMutex.Lock()
	defer fake.listMetricStreamsRequestMutex.Unlock()
	fake.ListMetricStreamsRequestStub = nil
	if fake.listMetricStreamsRequestReturnsOnCall == nil {
		fake.listMetricStreamsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.ListMetricStreamsOutput
		})
	}
	fake.listMetricStreamsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricStreamsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsWithContext(arg1 context.Context, arg2 *cloudwatch.ListMetricStreamsInput, arg3 ...request.Option) (*cloudwatch.ListMetricStreamsOutput, error) {
	fake.listMetricStreamsWithContextMutex.Lock()
	ret, specificReturn := fake.listMetricStreamsWithContextReturnsOnCall[len(fake.listMetricStreamsWithContextArgsForCall)]
	fake.listMetricStreamsWithContextArgsForCall = append(fake.listMetricStreamsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricStreamsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListMetricStreamsWithContextStub
	fakeReturns := fake.listMetricStreamsWithContextReturns
	fake.recordInvocation("ListMetricStreamsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listMetricStreamsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsWithContextCallCount() int {
	fake.listMetricStreamsWithContextMutex.RLock()
	defer fake.listMetricStreamsWithContextMutex.RUnlock()
	return len(fake.listMetricStreamsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsWithContextCalls(stub func(context.Context, *cloudwatch.ListMetricStreamsInput, ...request.Option) (*cloudwatch.ListMetricStreamsOutput, error)) {
	fake.listMetricStreamsWithContextMutex.Lock()
	defer fake.listMetricStreamsWithContextMutex.Unlock()
	fake.ListMetricStreamsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListMetricStreamsInput, []request.Option) {
	fake.listMetricStreamsWithContextMutex.RLock()
	defer fake.listMetricStreamsWithContextMutex.RUnlock()
	argsForCall := fake.listMetricStreamsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsWithContextReturns(result1 *cloudwatch.ListMetricStreamsOutput, result2 error) {
	fake.listMetricStreamsWithContextMutex.Lock()
	defer fake.listMetricStreamsWithContextMutex.Unlock()
	fake.ListMetricStreamsWithContextStub = nil
	fake.listMetricStreamsWithContextReturns = struct {
		result1 *cloudwatch.ListMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricStreamsWithContextReturnsOnCall(i int, result1 *cloudwatch.ListMetricStreamsOutput, result2 error) {
	fake.listMetricStreamsWithContextMutex.Lock()
	defer fake.listMetricStreamsWithContextMutex.Unlock()
	fake.ListMetricStreamsWithContextStub = nil
	if fake.listMetricStreamsWithContextReturnsOnCall == nil {
		fake.listMetricStreamsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListMetricStreamsOutput
			result2 error
		})
	}
	fake.listMetricStreamsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetrics(arg1 *cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error) {
	fake.listMetricsMutex.Lock()
	ret, specificReturn := fake.listMetricsReturnsOnCall[len(fake.listMetricsArgsForCall)]
	fake.listMetricsArgsForCall = append(fake.listMetricsArgsForCall, struct {
		arg1 *cloudwatch.ListMetricsInput
	}{arg1})
	stub := fake.ListMetricsStub
	fakeReturns := fake.listMetricsReturns
	fake.recordInvocation("ListMetrics", []interface{}{arg1})
	fake.listMetricsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricsCallCount() int {
	fake.listMetricsMutex.RLock()
	defer fake.listMetricsMutex.RUnlock()
	return len(fake.listMetricsArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsCalls(stub func(*cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error)) {
	fake.listMetricsMutex.Lock()
	defer fake.listMetricsMutex.Unlock()
	fake.ListMetricsStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsArgsForCall(i int) *cloudwatch.ListMetricsInput {
	fake.listMetricsMutex.RLock()
	defer fake.listMetricsMutex.RUnlock()
	argsForCall := fake.listMetricsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListMetricsReturns(result1 *cloudwatch.ListMetricsOutput, result2 error) {
	fake.listMetricsMutex.Lock()
	defer fake.listMetricsMutex.Unlock()
	fake.ListMetricsStub = nil
	fake.listMetricsReturns = struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsReturnsOnCall(i int, result1 *cloudwatch.ListMetricsOutput, result2 error) {
	fake.listMetricsMutex.Lock()
	defer fake.listMetricsMutex.Unlock()
	fake.ListMetricsStub = nil
	if fake.listMetricsReturnsOnCall == nil {
		fake.listMetricsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListMetricsOutput
			result2 error
		})
	}
	fake.listMetricsReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsPages(arg1 *cloudwatch.ListMetricsInput, arg2 func(*cloudwatch.ListMetricsOutput, bool) bool) error {
	fake.listMetricsPagesMutex.Lock()
	ret, specificReturn := fake.listMetricsPagesReturnsOnCall[len(fake.listMetricsPagesArgsForCall)]
	fake.listMetricsPagesArgsForCall = append(fake.listMetricsPagesArgsForCall, struct {
		arg1 *cloudwatch.ListMetricsInput
		arg2 func(*cloudwatch.ListMetricsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListMetricsPagesStub
	fakeReturns := fake.listMetricsPagesReturns
	fake.recordInvocation("ListMetricsPages", []interface{}{arg1, arg2})
	fake.listMetricsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesCallCount() int {
	fake.listMetricsPagesMutex.RLock()
	defer fake.listMetricsPagesMutex.RUnlock()
	return len(fake.listMetricsPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesCalls(stub func(*cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool) error) {
	fake.listMetricsPagesMutex.Lock()
	defer fake.listMetricsPagesMutex.Unlock()
	fake.ListMetricsPagesStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesArgsForCall(i int) (*cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool) {
	fake.listMetricsPagesMutex.RLock()
	defer fake.listMetricsPagesMutex.RUnlock()
	argsForCall := fake.listMetricsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesReturns(result1 error) {
	fake.listMetricsPagesMutex.Lock()
	defer fake.listMetricsPagesMutex.Unlock()
	fake.ListMetricsPagesStub = nil
	fake.listMetricsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesReturnsOnCall(i int, result1 error) {
	fake.listMetricsPagesMutex.Lock()
	defer fake.listMetricsPagesMutex.Unlock()
	fake.ListMetricsPagesStub = nil
	if fake.listMetricsPagesReturnsOnCall == nil {
		fake.listMetricsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMetricsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContext(arg1 context.Context, arg2 *cloudwatch.ListMetricsInput, arg3 func(*cloudwatch.ListMetricsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listMetricsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listMetricsPagesWithContextReturnsOnCall[len(fake.listMetricsPagesWithContextArgsForCall)]
	fake.listMetricsPagesWithContextArgsForCall = append(fake.listMetricsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricsInput
		arg3 func(*cloudwatch.ListMetricsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListMetricsPagesWithContextStub
	fakeReturns := fake.listMetricsPagesWithContextReturns
	fake.recordInvocation("ListMetricsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMetricsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextCallCount() int {
	fake.listMetricsPagesWithContextMutex.RLock()
	defer fake.listMetricsPagesWithContextMutex.RUnlock()
	return len(fake.listMetricsPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextCalls(stub func(context.Context, *cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool, ...request.Option) error) {
	fake.listMetricsPagesWithContextMutex.Lock()
	defer fake.listMetricsPagesWithContextMutex.Unlock()
	fake.ListMetricsPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool, []request.Option) {
	fake.listMetricsPagesWithContextMutex.RLock()
	defer fake.listMetricsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listMetricsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextReturns(result1 error) {
	fake.listMetricsPagesWithContextMutex.Lock()
	defer fake.listMetricsPagesWithContextMutex.Unlock()
	fake.ListMetricsPagesWithContextStub = nil
	fake.listMetricsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listMetricsPagesWithContextMutex.Lock()
	defer fake.listMetricsPagesWithContextMutex.Unlock()
	fake.ListMetricsPagesWithContextStub = nil
	if fake.listMetricsPagesWithContextReturnsOnCall == nil {
		fake.listMetricsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMetricsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricsRequest(arg1 *cloudwatch.ListMetricsInput) (*request.Request, *cloudwatch.ListMetricsOutput) {
	fake.listMetricsRequestMutex.Lock()
	ret, specificReturn := fake.listMetricsRequestReturnsOnCall[len(fake.listMetricsRequestArgsForCall)]
	fake.listMetricsRequestArgsForCall = append(fake.listMetricsRequestArgsForCall, struct {
		arg1 *cloudwatch.ListMetricsInput
	}{arg1})
	stub := fake.ListMetricsRequestStub
	fakeReturns := fake.listMetricsRequestReturns
	fake.recordInvocation("ListMetricsRequest", []interface{}{arg1})
	fake.listMetricsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestCallCount() int {
	fake.listMetricsRequestMutex.RLock()
	defer fake.listMetricsRequestMutex.RUnlock()
	return len(fake.listMetricsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestCalls(stub func(*cloudwatch.ListMetricsInput) (*request.Request, *cloudwatch.ListMetricsOutput)) {
	fake.listMetricsRequestMutex.Lock()
	defer fake.listMetricsRequestMutex.Unlock()
	fake.ListMetricsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestArgsForCall(i int) *cloudwatch.ListMetricsInput {
	fake.listMetricsRequestMutex.RLock()
	defer fake.listMetricsRequestMutex.RUnlock()
	argsForCall := fake.listMetricsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestReturns(result1 *request.Request, result2 *cloudwatch.ListMetricsOutput) {
	fake.listMetricsRequestMutex.Lock()
	defer fake.listMetricsRequestMutex.Unlock()
	fake.ListMetricsRequestStub = nil
	fake.listMetricsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.ListMetricsOutput) {
	fake.listMetricsRequestMutex.Lock()
	defer fake.listMetricsRequestMutex.Unlock()
	fake.ListMetricsRequestStub = nil
	if fake.listMetricsRequestReturnsOnCall == nil {
		fake.listMetricsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.ListMetricsOutput
		})
	}
	fake.listMetricsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContext(arg1 context.Context, arg2 *cloudwatch.ListMetricsInput, arg3 ...request.Option) (*cloudwatch.ListMetricsOutput, error) {
	fake.listMetricsWithContextMutex.Lock()
	ret, specificReturn := fake.listMetricsWithContextReturnsOnCall[len(fake.listMetricsWithContextArgsForCall)]
	fake.listMetricsWithContextArgsForCall = append(fake.listMetricsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListMetricsWithContextStub
	fakeReturns := fake.listMetricsWithContextReturns
	fake.recordInvocation("ListMetricsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listMetricsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextCallCount() int {
	fake.listMetricsWithContextMutex.RLock()
	defer fake.listMetricsWithContextMutex.RUnlock()
	return len(fake.listMetricsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextCalls(stub func(context.Context, *cloudwatch.ListMetricsInput, ...request.Option) (*cloudwatch.ListMetricsOutput, error)) {
	fake.listMetricsWithContextMutex.Lock()
	defer fake.listMetricsWithContextMutex.Unlock()
	fake.ListMetricsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListMetricsInput, []request.Option) {
	fake.listMetricsWithContextMutex.RLock()
	defer fake.listMetricsWithContextMutex.RUnlock()
	argsForCall := fake.listMetricsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextReturns(result1 *cloudwatch.ListMetricsOutput, result2 error) {
	fake.listMetricsWithContextMutex.Lock()
	defer fake.listMetricsWithContextMutex.Unlock()
	fake.ListMetricsWithContextStub = nil
	fake.listMetricsWithContextReturns = struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextReturnsOnCall(i int, result1 *cloudwatch.ListMetricsOutput, result2 error) {
	fake.listMetricsWithContextMutex.Lock()
	defer fake.listMetricsWithContextMutex.Unlock()
	fake.ListMetricsWithContextStub = nil
	if fake.listMetricsWithContextReturnsOnCall == nil {
		fake.listMetricsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListMetricsOutput
			result2 error
		})
	}
	fake.listMetricsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListTagsForResource(arg1 *cloudwatch.ListTagsForResourceInput) (*cloudwatch.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *cloudwatch.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceStub
	fakeReturns := fake.listTagsForResourceReturns
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceCalls(stub func(*cloudwatch.ListTagsForResourceInput) (*cloudwatch.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = stub
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceArgsForCall(i int) *cloudwatch.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	argsForCall := fake.listTagsForResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceReturns(result1 *cloudwatch.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *cloudwatch.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceReturnsOnCall(i int, result1 *cloudwatch.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceRequest(arg1 *cloudwatch.ListTagsForResourceInput) (*request.Request, *cloudwatch.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *cloudwatch.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceRequestStub
	fakeReturns := fake.listTagsForResourceRequestReturns
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceRequestCalls(stub func(*cloudwatch.ListTagsForResourceInput) (*request.Request, *cloudwatch.ListTagsForResourceOutput)) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = stub
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceRequestArgsForCall(i int) *cloudwatch.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	argsForCall := fake.listTagsForResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *cloudwatch.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.ListTagsForResourceOutput
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceWithContext(arg1 context.Context, arg2 *cloudwatch.ListTagsForResourceInput, arg3 ...request.Option) (*cloudwatch.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListTagsForResourceWithContextStub
	fakeReturns := fake.listTagsForResourceWithContextReturns
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceWithContextCalls(stub func(context.Context, *cloudwatch.ListTagsForResourceInput, ...request.Option) (*cloudwatch.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	argsForCall := fake.listTagsForResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceWithContextReturns(result1 *cloudwatch.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *cloudwatch.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *cloudwatch.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetector(arg1 *cloudwatch.PutAnomalyDetectorInput) (*cloudwatch.PutAnomalyDetectorOutput, error) {
	fake.putAnomalyDetectorMutex.Lock()
	ret, specificReturn := fake.putAnomalyDetectorReturnsOnCall[len(fake.putAnomalyDetectorArgsForCall)]
	fake.putAnomalyDetectorArgsForCall = append(fake.putAnomalyDetectorArgsForCall, struct {
		arg1 *cloudwatch.PutAnomalyDetectorInput
	}{arg1})
	stub := fake.PutAnomalyDetectorStub
	fakeReturns := fake.putAnomalyDetectorReturns
	fake.recordInvocation("PutAnomalyDetector", []interface{}{arg1})
	fake.putAnomalyDetectorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorCallCount() int {
	fake.putAnomalyDetectorMutex.RLock()
	defer fake.putAnomalyDetectorMutex.RUnlock()
	return len(fake.putAnomalyDetectorArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorCalls(stub func(*cloudwatch.PutAnomalyDetectorInput) (*cloudwatch.PutAnomalyDetectorOutput, error)) {
	fake.putAnomalyDetectorMutex.Lock()
	defer fake.putAnomalyDetectorMutex.Unlock()
	fake.PutAnomalyDetectorStub = stub
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorArgsForCall(i int) *cloudwatch.PutAnomalyDetectorInput {
	fake.putAnomalyDetectorMutex.RLock()
	defer fake.putAnomalyDetectorMutex.RUnlock()
	argsForCall := fake.putAnomalyDetectorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorReturns(result1 *cloudwatch.PutAnomalyDetectorOutput, result2 error) {
	fake.putAnomalyDetectorMutex.Lock()
	defer fake.putAnomalyDetectorMutex.Unlock()
	fake.PutAnomalyDetectorStub = nil
	fake.putAnomalyDetectorReturns = struct {
		result1 *cloudwatch.PutAnomalyDetectorOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorReturnsOnCall(i int, result1 *cloudwatch.PutAnomalyDetectorOutput, result2 error) {
	fake.putAnomalyDetectorMutex.Lock()
	defer fake.putAnomalyDetectorMutex.Unlock()
	fake.PutAnomalyDetectorStub = nil
	if fake.putAnomalyDetectorReturnsOnCall == nil {
		fake.putAnomalyDetectorReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutAnomalyDetectorOutput
			result2 error
		})
	}
	fake.putAnomalyDetectorReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutAnomalyDetectorOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorRequest(arg1 *cloudwatch.PutAnomalyDetectorInput) (*request.Request, *cloudwatch.PutAnomalyDetectorOutput) {
	fake.putAnomalyDetectorRequestMutex.Lock()
	ret, specificReturn := fake.putAnomalyDetectorRequestReturnsOnCall[len(fake.putAnomalyDetectorRequestArgsForCall)]
	fake.putAnomalyDetectorRequestArgsForCall = append(fake.putAnomalyDetectorRequestArgsForCall, struct {
		arg1 *cloudwatch.PutAnomalyDetectorInput
	}{arg1})
	stub := fake.PutAnomalyDetectorRequestStub
	fakeReturns := fake.putAnomalyDetectorRequestReturns
	fake.recordInvocation("PutAnomalyDetectorRequest", []interface{}{arg1})
	fake.putAnomalyDetectorRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorRequestCallCount() int {
	fake.putAnomalyDetectorRequestMutex.RLock()
	defer fake.putAnomalyDetectorRequestMutex.RUnlock()
	return len(fake.putAnomalyDetectorRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorRequestCalls(stub func(*cloudwatch.PutAnomalyDetectorInput) (*request.Request, *cloudwatch.PutAnomalyDetectorOutput)) {
	fake.putAnomalyDetectorRequestMutex.Lock()
	defer fake.putAnomalyDetectorRequestMutex.Unlock()
	fake.PutAnomalyDetectorRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorRequestArgsForCall(i int) *cloudwatch.PutAnomalyDetectorInput {
	fake.putAnomalyDetectorRequestMutex.RLock()
	defer fake.putAnomalyDetectorRequestMutex.RUnlock()
	argsForCall := fake.putAnomalyDetectorRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorRequestReturns(result1 *request.Request, result2 *cloudwatch.PutAnomalyDetectorOutput) {
	fake.putAnomalyDetectorRequestMutex.Lock()
	defer fake.putAnomalyDetectorRequestMutex.Unlock()
	fake.PutAnomalyDetectorRequestStub = nil
	fake.putAnomalyDetectorRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutAnomalyDetectorOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutAnomalyDetectorOutput) {
	fake.putAnomalyDetectorRequestMutex.Lock()
	defer fake.putAnomalyDetectorRequestMutex.Unlock()
	fake.PutAnomalyDetectorRequestStub = nil
	if fake.putAnomalyDetectorRequestReturnsOnCall == nil {
		fake.putAnomalyDetectorRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutAnomalyDetectorOutput
		})
	}
	fake.putAnomalyDetectorRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutAnomalyDetectorOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorWithContext(arg1 context.Context, arg2 *cloudwatch.PutAnomalyDetectorInput, arg3 ...request.Option) (*cloudwatch.PutAnomalyDetectorOutput, error) {
	fake.putAnomalyDetectorWithContextMutex.Lock()
	ret, specificReturn := fake.putAnomalyDetectorWithContextReturnsOnCall[len(fake.putAnomalyDetectorWithContextArgsForCall)]
	fake.putAnomalyDetectorWithContextArgsForCall = append(fake.putAnomalyDetectorWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutAnomalyDetectorInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutAnomalyDetectorWithContextStub
	fakeReturns := fake.putAnomalyDetectorWithContextReturns
	fake.recordInvocation("PutAnomalyDetectorWithContext", []interface{}{arg1, arg2, arg3})
	fake.putAnomalyDetectorWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorWithContextCallCount() int {
	fake.putAnomalyDetectorWithContextMutex.RLock()
	defer fake.putAnomalyDetectorWithContextMutex.RUnlock()
	return len(fake.putAnomalyDetectorWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorWithContextCalls(stub func(context.Context, *cloudwatch.PutAnomalyDetectorInput, ...request.Option) (*cloudwatch.PutAnomalyDetectorOutput, error)) {
	fake.putAnomalyDetectorWithContextMutex.Lock()
	defer fake.putAnomalyDetectorWithContextMutex.Unlock()
	fake.PutAnomalyDetectorWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutAnomalyDetectorInput, []request.Option) {
	fake.putAnomalyDetectorWithContextMutex.RLock()
	defer fake.putAnomalyDetectorWithContextMutex.RUnlock()
	argsForCall := fake.putAnomalyDetectorWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorWithContextReturns(result1 *cloudwatch.PutAnomalyDetectorOutput, result2 error) {
	fake.putAnomalyDetectorWithContextMutex.Lock()
	defer fake.putAnomalyDetectorWithContextMutex.Unlock()
	fake.PutAnomalyDetectorWithContextStub = nil
	fake.putAnomalyDetectorWithContextReturns = struct {
		result1 *cloudwatch.PutAnomalyDetectorOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutAnomalyDetectorWithContextReturnsOnCall(i int, result1 *cloudwatch.PutAnomalyDetectorOutput, result2 error) {
	fake.putAnomalyDetectorWithContextMutex.Lock()
	defer fake.putAnomalyDetectorWithContextMutex.Unlock()
	fake.PutAnomalyDetectorWithContextStub = nil
	if fake.putAnomalyDetectorWithContextReturnsOnCall == nil {
		fake.putAnomalyDetectorWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutAnomalyDetectorOutput
			result2 error
		})
	}
	fake.putAnomalyDetectorWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutAnomalyDetectorOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarm(arg1 *cloudwatch.PutCompositeAlarmInput) (*cloudwatch.PutCompositeAlarmOutput, error) {
	fake.putCompositeAlarmMutex.Lock()
	ret, specificReturn := fake.putCompositeAlarmReturnsOnCall[len(fake.putCompositeAlarmArgsForCall)]
	fake.putCompositeAlarmArgsForCall = append(fake.putCompositeAlarmArgsForCall, struct {
		arg1 *cloudwatch.PutCompositeAlarmInput
	}{arg1})
	stub := fake.PutCompositeAlarmStub
	fakeReturns := fake.putCompositeAlarmReturns
	fake.recordInvocation("PutCompositeAlarm", []interface{}{arg1})
	fake.putCompositeAlarmMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmCallCount() int {
	fake.putCompositeAlarmMutex.RLock()
	defer fake.putCompositeAlarmMutex.RUnlock()
	return len(fake.putCompositeAlarmArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmCalls(stub func(*cloudwatch.PutCompositeAlarmInput) (*cloudwatch.PutCompositeAlarmOutput, error)) {
	fake.putCompositeAlarmMutex.Lock()
	defer fake.putCompositeAlarmMutex.Unlock()
	fake.PutCompositeAlarmStub = stub
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmArgsForCall(i int) *cloudwatch.PutCompositeAlarmInput {
	fake.putCompositeAlarmMutex.RLock()
	defer fake.putCompositeAlarmMutex.RUnlock()
	argsForCall := fake.putCompositeAlarmArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmReturns(result1 *cloudwatch.PutCompositeAlarmOutput, result2 error) {
	fake.putCompositeAlarmMutex.Lock()
	defer fake.putCompositeAlarmMutex.Unlock()
	fake.PutCompositeAlarmStub = nil
	fake.putCompositeAlarmReturns = struct {
		result1 *cloudwatch.PutCompositeAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmReturnsOnCall(i int, result1 *cloudwatch.PutCompositeAlarmOutput, result2 error) {
	fake.putCompositeAlarmMutex.Lock()
	defer fake.putCompositeAlarmMutex.Unlock()
	fake.PutCompositeAlarmStub = nil
	if fake.putCompositeAlarmReturnsOnCall == nil {
		fake.putCompositeAlarmReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutCompositeAlarmOutput
			result2 error
		})
	}
	fake.putCompositeAlarmReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutCompositeAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmRequest(arg1 *cloudwatch.PutCompositeAlarmInput) (*request.Request, *cloudwatch.PutCompositeAlarmOutput) {
	fake.putCompositeAlarmRequestMutex.Lock()
	ret, specificReturn := fake.putCompositeAlarmRequestReturnsOnCall[len(fake.putCompositeAlarmRequestArgsForCall)]
	fake.putCompositeAlarmRequestArgsForCall = append(fake.putCompositeAlarmRequestArgsForCall, struct {
		arg1 *cloudwatch.PutCompositeAlarmInput
	}{arg1})
	stub := fake.PutCompositeAlarmRequestStub
	fakeReturns := fake.putCompositeAlarmRequestReturns
	fake.recordInvocation("PutCompositeAlarmRequest", []interface{}{arg1})
	fake.putCompositeAlarmRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmRequestCallCount() int {
	fake.putCompositeAlarmRequestMutex.RLock()
	defer fake.putCompositeAlarmRequestMutex.RUnlock()
	return len(fake.putCompositeAlarmRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmRequestCalls(stub func(*cloudwatch.PutCompositeAlarmInput) (*request.Request, *cloudwatch.PutCompositeAlarmOutput)) {
	fake.putCompositeAlarmRequestMutex.Lock()
	defer fake.putCompositeAlarmRequestMutex.Unlock()
	fake.PutCompositeAlarmRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmRequestArgsForCall(i int) *cloudwatch.PutCompositeAlarmInput {
	fake.putCompositeAlarmRequestMutex.RLock()
	defer fake.putCompositeAlarmRequestMutex.RUnlock()
	argsForCall := fake.putCompositeAlarmRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmRequestReturns(result1 *request.Request, result2 *cloudwatch.PutCompositeAlarmOutput) {
	fake.putCompositeAlarmRequestMutex.Lock()
	defer fake.putCompositeAlarmRequestMutex.Unlock()
	fake.PutCompositeAlarmRequestStub = nil
	fake.putCompositeAlarmRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutCompositeAlarmOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutCompositeAlarmOutput) {
	fake.putCompositeAlarmRequestMutex.Lock()
	defer fake.putCompositeAlarmRequestMutex.Unlock()
	fake.PutCompositeAlarmRequestStub = nil
	if fake.putCompositeAlarmRequestReturnsOnCall == nil {
		fake.putCompositeAlarmRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutCompositeAlarmOutput
		})
	}
	fake.putCompositeAlarmRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutCompositeAlarmOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmWithContext(arg1 context.Context, arg2 *cloudwatch.PutCompositeAlarmInput, arg3 ...request.Option) (*cloudwatch.PutCompositeAlarmOutput, error) {
	fake.putCompositeAlarmWithContextMutex.Lock()
	ret, specificReturn := fake.putCompositeAlarmWithContextReturnsOnCall[len(fake.putCompositeAlarmWithContextArgsForCall)]
	fake.putCompositeAlarmWithContextArgsForCall = append(fake.putCompositeAlarmWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutCompositeAlarmInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutCompositeAlarmWithContextStub
	fakeReturns := fake.putCompositeAlarmWithContextReturns
	fake.recordInvocation("PutCompositeAlarmWithContext", []interface{}{arg1, arg2, arg3})
	fake.putCompositeAlarmWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmWithContextCallCount() int {
	fake.putCompositeAlarmWithContextMutex.RLock()
	defer fake.putCompositeAlarmWithContextMutex.RUnlock()
	return len(fake.putCompositeAlarmWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmWithContextCalls(stub func(context.Context, *cloudwatch.PutCompositeAlarmInput, ...request.Option) (*cloudwatch.PutCompositeAlarmOutput, error)) {
	fake.putCompositeAlarmWithContextMutex.Lock()
	defer fake.putCompositeAlarmWithContextMutex.Unlock()
	fake.PutCompositeAlarmWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutCompositeAlarmInput, []request.Option) {
	fake.putCompositeAlarmWithContextMutex.RLock()
	defer fake.putCompositeAlarmWithContextMutex.RUnlock()
	argsForCall := fake.putCompositeAlarmWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmWithContextReturns(result1 *cloudwatch.PutCompositeAlarmOutput, result2 error) {
	fake.putCompositeAlarmWithContextMutex.Lock()
	defer fake.putCompositeAlarmWithContextMutex.Unlock()
	fake.PutCompositeAlarmWithContextStub = nil
	fake.putCompositeAlarmWithContextReturns = struct {
		result1 *cloudwatch.PutCompositeAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutCompositeAlarmWithContextReturnsOnCall(i int, result1 *cloudwatch.PutCompositeAlarmOutput, result2 error) {
	fake.putCompositeAlarmWithContextMutex.Lock()
	defer fake.putCompositeAlarmWithContextMutex.Unlock()
	fake.PutCompositeAlarmWithContextStub = nil
	if fake.putCompositeAlarmWithContextReturnsOnCall == nil {
		fake.putCompositeAlarmWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutCompositeAlarmOutput
			result2 error
		})
	}
	fake.putCompositeAlarmWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutCompositeAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboard(arg1 *cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error) {
	fake.putDashboardMutex.Lock()
	ret, specificReturn := fake.putDashboardReturnsOnCall[len(fake.putDashboardArgsForCall)]
	fake.putDashboardArgsForCall = append(fake.putDashboardArgsForCall, struct {
		arg1 *cloudwatch.PutDashboardInput
	}{arg1})
	stub := fake.PutDashboardStub
	fakeReturns := fake.putDashboardReturns
	fake.recordInvocation("PutDashboard", []interface{}{arg1})
	fake.putDashboardMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutDashboardCallCount() int {
	fake.putDashboardMutex.RLock()
	defer fake.putDashboardMutex.RUnlock()
	return len(fake.putDashboardArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutDashboardCalls(stub func(*cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error)) {
	fake.putDashboardMutex.Lock()
	defer fake.putDashboardMutex.Unlock()
	fake.PutDashboardStub = stub
}

func (fake *FakeCloudWatchAPI) PutDashboardArgsForCall(i int) *cloudwatch.PutDashboardInput {
	fake.putDashboardMutex.RLock()
	defer fake.putDashboardMutex.RUnlock()
	argsForCall := fake.putDashboardArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutDashboardReturns(result1 *cloudwatch.PutDashboardOutput, result2 error) {
	fake.putDashboardMutex.Lock()
	defer fake.putDashboardMutex.Unlock()
	fake.PutDashboardStub = nil
	fake.putDashboardReturns = struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardReturnsOnCall(i int, result1 *cloudwatch.PutDashboardOutput, result2 error) {
	fake.putDashboardMutex.Lock()
	defer fake.putDashboardMutex.Unlock()
	fake.PutDashboardStub = nil
	if fake.putDashboardReturnsOnCall == nil {
		fake.putDashboardReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutDashboardOutput
			result2 error
		})
	}
	fake.putDashboardReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardRequest(arg1 *cloudwatch.PutDashboardInput) (*request.Request, *cloudwatch.PutDashboardOutput) {
	fake.putDashboardRequestMutex.Lock()
	ret, specificReturn := fake.putDashboardRequestReturnsOnCall[len(fake.putDashboardRequestArgsForCall)]
	fake.putDashboardRequestArgsForCall = append(fake.putDashboardRequestArgsForCall, struct {
		arg1 *cloudwatch.PutDashboardInput
	}{arg1})
	stub := fake.PutDashboardRequestStub
	fakeReturns := fake.putDashboardRequestReturns
	fake.recordInvocation("PutDashboardRequest", []interface{}{arg1})
	fake.putDashboardRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestCallCount() int {
	fake.putDashboardRequestMutex.RLock()
	defer fake.putDashboardRequestMutex.RUnlock()
	return len(fake.putDashboardRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestCalls(stub func(*cloudwatch.PutDashboardInput) (*request.Request, *cloudwatch.PutDashboardOutput)) {
	fake.putDashboardRequestMutex.Lock()
	defer fake.putDashboardRequestMutex.Unlock()
	fake.PutDashboardRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestArgsForCall(i int) *cloudwatch.PutDashboardInput {
	fake.putDashboardRequestMutex.RLock()
	defer fake.putDashboardRequestMutex.RUnlock()
	argsForCall := fake.putDashboardRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestReturns(result1 *request.Request, result2 *cloudwatch.PutDashboardOutput) {
	fake.putDashboardRequestMutex.Lock()
	defer fake.putDashboardRequestMutex.Unlock()
	fake.PutDashboardRequestStub = nil
	fake.putDashboardRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutDashboardOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutDashboardOutput) {
	fake.putDashboardRequestMutex.Lock()
	defer fake.putDashboardRequestMutex.Unlock()
	fake.PutDashboardRequestStub = nil
	if fake.putDashboardRequestReturnsOnCall == nil {
		fake.putDashboardRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutDashboardOutput
		})
	}
	fake.putDashboardRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutDashboardOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContext(arg1 context.Context, arg2 *cloudwatch.PutDashboardInput, arg3 ...request.Option) (*cloudwatch.PutDashboardOutput, error) {
	fake.putDashboardWithContextMutex.Lock()
	ret, specificReturn := fake.putDashboardWithContextReturnsOnCall[len(fake.putDashboardWithContextArgsForCall)]
	fake.putDashboardWithContextArgsForCall = append(fake.putDashboardWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutDashboardInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutDashboardWithContextStub
	fakeReturns := fake.putDashboardWithContextReturns
	fake.recordInvocation("PutDashboardWithContext", []interface{}{arg1, arg2, arg3})
	fake.putDashboardWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextCallCount() int {
	fake.putDashboardWithContextMutex.RLock()
	defer fake.putDashboardWithContextMutex.RUnlock()
	return len(fake.putDashboardWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextCalls(stub func(context.Context, *cloudwatch.PutDashboardInput, ...request.Option) (*cloudwatch.PutDashboardOutput, error)) {
	fake.putDashboardWithContextMutex.Lock()
	defer fake.putDashboardWithContextMutex.Unlock()
	fake.PutDashboardWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutDashboardInput, []request.Option) {
	fake.putDashboardWithContextMutex.RLock()
	defer fake.putDashboardWithContextMutex.RUnlock()
	argsForCall := fake.putDashboardWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextReturns(result1 *cloudwatch.PutDashboardOutput, result2 error) {
	fake.putDashboardWithContextMutex.Lock()
	defer fake.putDashboardWithContextMutex.Unlock()
	fake.PutDashboardWithContextStub = nil
	fake.putDashboardWithContextReturns = struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextReturnsOnCall(i int, result1 *cloudwatch.PutDashboardOutput, result2 error) {
	fake.putDashboardWithContextMutex.Lock()
	defer fake.putDashboardWithContextMutex.Unlock()
	fake.PutDashboardWithContextStub = nil
	if fake.putDashboardWithContextReturnsOnCall == nil {
		fake.putDashboardWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutDashboardOutput
			result2 error
		})
	}
	fake.putDashboardWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutInsightRule(arg1 *cloudwatch.PutInsightRuleInput) (*cloudwatch.PutInsightRuleOutput, error) {
	fake.putInsightRuleMutex.Lock()
	ret, specificReturn := fake.putInsightRuleReturnsOnCall[len(fake.putInsightRuleArgsForCall)]
	fake.putInsightRuleArgsForCall = append(fake.putInsightRuleArgsForCall, struct {
		arg1 *cloudwatch.PutInsightRuleInput
	}{arg1})
	stub := fake.PutInsightRuleStub
	fakeReturns := fake.putInsightRuleReturns
	fake.recordInvocation("PutInsightRule", []interface{}{arg1})
	fake.putInsightRuleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutInsightRuleCallCount() int {
	fake.putInsightRuleMutex.RLock()
	defer fake.putInsightRuleMutex.RUnlock()
	return len(fake.putInsightRuleArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutInsightRuleCalls(stub func(*cloudwatch.PutInsightRuleInput) (*cloudwatch.PutInsightRuleOutput, error)) {
	fake.putInsightRuleMutex.Lock()
	defer fake.putInsightRuleMutex.Unlock()
	fake.PutInsightRuleStub = stub
}

func (fake *FakeCloudWatchAPI) PutInsightRuleArgsForCall(i int) *cloudwatch.PutInsightRuleInput {
	fake.putInsightRuleMutex.RLock()
	defer fake.putInsightRuleMutex.RUnlock()
	argsForCall := fake.putInsightRuleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutInsightRuleReturns(result1 *cloudwatch.PutInsightRuleOutput, result2 error) {
	fake.putInsightRuleMutex.Lock()
	defer fake.putInsightRuleMutex.Unlock()
	fake.PutInsightRuleStub = nil
	fake.putInsightRuleReturns = struct {
		result1 *cloudwatch.PutInsightRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutInsightRuleReturnsOnCall(i int, result1 *cloudwatch.PutInsightRuleOutput, result2 error) {
	fake.putInsightRuleMutex.Lock()
	defer fake.putInsightRuleMutex.Unlock()
	fake.PutInsightRuleStub = nil
	if fake.putInsightRuleReturnsOnCall == nil {
		fake.putInsightRuleReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutInsightRuleOutput
			result2 error
		})
	}
	fake.putInsightRuleReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutInsightRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutInsightRuleRequest(arg1 *cloudwatch.PutInsightRuleInput) (*request.Request, *cloudwatch.PutInsightRuleOutput) {
	fake.putInsightRuleRequestMutex.Lock()
	ret, specificReturn := fake.putInsightRuleRequestReturnsOnCall[len(fake.putInsightRuleRequestArgsForCall)]
	fake.putInsightRuleRequestArgsForCall = append(fake.putInsightRuleRequestArgsForCall, struct {
		arg1 *cloudwatch.PutInsightRuleInput
	}{arg1})
	stub := fake.PutInsightRuleRequestStub
	fakeReturns := fake.putInsightRuleRequestReturns
	fake.recordInvocation("PutInsightRuleRequest", []interface{}{arg1})
	fake.putInsightRuleRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutInsightRuleRequestCallCount() int {
	fake.putInsightRuleRequestMutex.RLock()
	defer fake.putInsightRuleRequestMutex.RUnlock()
	return len(fake.putInsightRuleRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutInsightRuleRequestCalls(stub func(*cloudwatch.PutInsightRuleInput) (*request.Request, *cloudwatch.PutInsightRuleOutput)) {
	fake.putInsightRuleRequestMutex.Lock()
	defer fake.putInsightRuleRequestMutex.Unlock()
	fake.PutInsightRuleRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutInsightRuleRequestArgsForCall(i int) *cloudwatch.PutInsightRuleInput {
	fake.putInsightRuleRequestMutex.RLock()
	defer fake.putInsightRuleRequestMutex.RUnlock()
	argsForCall := fake.putInsightRuleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutInsightRuleRequestReturns(result1 *request.Request, result2 *cloudwatch.PutInsightRuleOutput) {
	fake.putInsightRuleRequestMutex.Lock()
	defer fake.putInsightRuleRequestMutex.Unlock()
	fake.PutInsightRuleRequestStub = nil
	fake.putInsightRuleRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutInsightRuleOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutInsightRuleRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutInsightRuleOutput) {
	fake.putInsightRuleRequestMutex.Lock()
	defer fake.putInsightRuleRequestMutex.Unlock()
	fake.PutInsightRuleRequestStub = nil
	if fake.putInsightRuleRequestReturnsOnCall == nil {
		fake.putInsightRuleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutInsightRuleOutput
		})
	}
	fake.putInsightRuleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutInsightRuleOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutInsightRuleWithContext(arg1 context.Context, arg2 *cloudwatch.PutInsightRuleInput, arg3 ...request.Option) (*cloudwatch.PutInsightRuleOutput, error) {
	fake.putInsightRuleWithContextMutex.Lock()
	ret, specificReturn := fake.putInsightRuleWithContextReturnsOnCall[len(fake.putInsightRuleWithContextArgsForCall)]
	fake.putInsightRuleWithContextArgsForCall = append(fake.putInsightRuleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutInsightRuleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutInsightRuleWithContextStub
	fakeReturns := fake.putInsightRuleWithContextReturns
	fake.recordInvocation("PutInsightRuleWithContext", []interface{}{arg1, arg2, arg3})
	fake.putInsightRuleWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutInsightRuleWithContextCallCount() int {
	fake.putInsightRuleWithContextMutex.RLock()
	defer fake.putInsightRuleWithContextMutex.RUnlock()
	return len(fake.putInsightRuleWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutInsightRuleWithContextCalls(stub func(context.Context, *cloudwatch.PutInsightRuleInput, ...request.Option) (*cloudwatch.PutInsightRuleOutput, error)) {
	fake.putInsightRuleWithContextMutex.Lock()
	defer fake.putInsightRuleWithContextMutex.Unlock()
	fake.PutInsightRuleWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutInsightRuleWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutInsightRuleInput, []request.Option) {
	fake.putInsightRuleWithContextMutex.RLock()
	defer fake.putInsightRuleWithContextMutex.RUnlock()
	argsForCall := fake.putInsightRuleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutInsightRuleWithContextReturns(result1 *cloudwatch.PutInsightRuleOutput, result2 error) {
	fake.putInsightRuleWithContextMutex.Lock()
	defer fake.putInsightRuleWithContextMutex.Unlock()
	fake.PutInsightRuleWithContextStub = nil
	fake.putInsightRuleWithContextReturns = struct {
		result1 *cloudwatch.PutInsightRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutInsightRuleWithContextReturnsOnCall(i int, result1 *cloudwatch.PutInsightRuleOutput, result2 error) {
	fake.putInsightRuleWithContextMutex.Lock()
	defer fake.putInsightRuleWithContextMutex.Unlock()
	fake.PutInsightRuleWithContextStub = nil
	if fake.putInsightRuleWithContextReturnsOnCall == nil {
		fake.putInsightRuleWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutInsightRuleOutput
			result2 error
		})
	}
	fake.putInsightRuleWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutInsightRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRules(arg1 *cloudwatch.PutManagedInsightRulesInput) (*cloudwatch.PutManagedInsightRulesOutput, error) {
	fake.putManagedInsightRulesMutex.Lock()
	ret, specificReturn := fake.putManagedInsightRulesReturnsOnCall[len(fake.putManagedInsightRulesArgsForCall)]
	fake.putManagedInsightRulesArgsForCall = append(fake.putManagedInsightRulesArgsForCall, struct {
		arg1 *cloudwatch.PutManagedInsightRulesInput
	}{arg1})
	stub := fake.PutManagedInsightRulesStub
	fakeReturns := fake.putManagedInsightRulesReturns
	fake.recordInvocation("PutManagedInsightRules", []interface{}{arg1})
	fake.putManagedInsightRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesCallCount() int {
	fake.putManagedInsightRulesMutex.RLock()
	defer fake.putManagedInsightRulesMutex.RUnlock()
	return len(fake.putManagedInsightRulesArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesCalls(stub func(*cloudwatch.PutManagedInsightRulesInput) (*cloudwatch.PutManagedInsightRulesOutput, error)) {
	fake.putManagedInsightRulesMutex.Lock()
	defer fake.putManagedInsightRulesMutex.Unlock()
	fake.PutManagedInsightRulesStub = stub
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesArgsForCall(i int) *cloudwatch.PutManagedInsightRulesInput {
	fake.putManagedInsightRulesMutex.RLock()
	defer fake.putManagedInsightRulesMutex.RUnlock()
	argsForCall := fake.putManagedInsightRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesReturns(result1 *cloudwatch.PutManagedInsightRulesOutput, result2 error) {
	fake.putManagedInsightRulesMutex.Lock()
	defer fake.putManagedInsightRulesMutex.Unlock()
	fake.PutManagedInsightRulesStub = nil
	fake.putManagedInsightRulesReturns = struct {
		result1 *cloudwatch.PutManagedInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesReturnsOnCall(i int, result1 *cloudwatch.PutManagedInsightRulesOutput, result2 error) {
	fake.putManagedInsightRulesMutex.Lock()
	defer fake.putManagedInsightRulesMutex.Unlock()
	fake.PutManagedInsightRulesStub = nil
	if fake.putManagedInsightRulesReturnsOnCall == nil {
		fake.putManagedInsightRulesReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutManagedInsightRulesOutput
			result2 error
		})
	}
	fake.putManagedInsightRulesReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutManagedInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesRequest(arg1 *cloudwatch.PutManagedInsightRulesInput) (*request.Request, *cloudwatch.PutManagedInsightRulesOutput) {
	fake.putManagedInsightRulesRequestMutex.Lock()
	ret, specificReturn := fake.putManagedInsightRulesRequestReturnsOnCall[len(fake.putManagedInsightRulesRequestArgsForCall)]
	fake.putManagedInsightRulesRequestArgsForCall = append(fake.putManagedInsightRulesRequestArgsForCall, struct {
		arg1 *cloudwatch.PutManagedInsightRulesInput
	}{arg1})
	stub := fake.PutManagedInsightRulesRequestStub
	fakeReturns := fake.putManagedInsightRulesRequestReturns
	fake.recordInvocation("PutManagedInsightRulesRequest", []interface{}{arg1})
	fake.putManagedInsightRulesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesRequestCallCount() int {
	fake.putManagedInsightRulesRequestMutex.RLock()
	defer fake.putManagedInsightRulesRequestMutex.RUnlock()
	return len(fake.putManagedInsightRulesRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesRequestCalls(stub func(*cloudwatch.PutManagedInsightRulesInput) (*request.Request, *cloudwatch.PutManagedInsightRulesOutput)) {
	fake.putManagedInsightRulesRequestMutex.Lock()
	defer fake.putManagedInsightRulesRequestMutex.Unlock()
	fake.PutManagedInsightRulesRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesRequestArgsForCall(i int) *cloudwatch.PutManagedInsightRulesInput {
	fake.putManagedInsightRulesRequestMutex.RLock()
	defer fake.putManagedInsightRulesRequestMutex.RUnlock()
	argsForCall := fake.putManagedInsightRulesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesRequestReturns(result1 *request.Request, result2 *cloudwatch.PutManagedInsightRulesOutput) {
	fake.putManagedInsightRulesRequestMutex.Lock()
	defer fake.putManagedInsightRulesRequestMutex.Unlock()
	fake.PutManagedInsightRulesRequestStub = nil
	fake.putManagedInsightRulesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutManagedInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutManagedInsightRulesOutput) {
	fake.putManagedInsightRulesRequestMutex.Lock()
	defer fake.putManagedInsightRulesRequestMutex.Unlock()
	fake.PutManagedInsightRulesRequestStub = nil
	if fake.putManagedInsightRulesRequestReturnsOnCall == nil {
		fake.putManagedInsightRulesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutManagedInsightRulesOutput
		})
	}
	fake.putManagedInsightRulesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutManagedInsightRulesOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesWithContext(arg1 context.Context, arg2 *cloudwatch.PutManagedInsightRulesInput, arg3 ...request.Option) (*cloudwatch.PutManagedInsightRulesOutput, error) {
	fake.putManagedInsightRulesWithContextMutex.Lock()
	ret, specificReturn := fake.putManagedInsightRulesWithContextReturnsOnCall[len(fake.putManagedInsightRulesWithContextArgsForCall)]
	fake.putManagedInsightRulesWithContextArgsForCall = append(fake.putManagedInsightRulesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutManagedInsightRulesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutManagedInsightRulesWithContextStub
	fakeReturns := fake.putManagedInsightRulesWithContextReturns
	fake.recordInvocation("PutManagedInsightRulesWithContext", []interface{}{arg1, arg2, arg3})
	fake.putManagedInsightRulesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesWithContextCallCount() int {
	fake.putManagedInsightRulesWithContextMutex.RLock()
	defer fake.putManagedInsightRulesWithContextMutex.RUnlock()
	return len(fake.putManagedInsightRulesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesWithContextCalls(stub func(context.Context, *cloudwatch.PutManagedInsightRulesInput, ...request.Option) (*cloudwatch.PutManagedInsightRulesOutput, error)) {
	fake.putManagedInsightRulesWithContextMutex.Lock()
	defer fake.putManagedInsightRulesWithContextMutex.Unlock()
	fake.PutManagedInsightRulesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutManagedInsightRulesInput, []request.Option) {
	fake.putManagedInsightRulesWithContextMutex.RLock()
	defer fake.putManagedInsightRulesWithContextMutex.RUnlock()
	argsForCall := fake.putManagedInsightRulesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesWithContextReturns(result1 *cloudwatch.PutManagedInsightRulesOutput, result2 error) {
	fake.putManagedInsightRulesWithContextMutex.Lock()
	defer fake.putManagedInsightRulesWithContextMutex.Unlock()
	fake.PutManagedInsightRulesWithContextStub = nil
	fake.putManagedInsightRulesWithContextReturns = struct {
		result1 *cloudwatch.PutManagedInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutManagedInsightRulesWithContextReturnsOnCall(i int, result1 *cloudwatch.PutManagedInsightRulesOutput, result2 error) {
	fake.putManagedInsightRulesWithContextMutex.Lock()
	defer fake.putManagedInsightRulesWithContextMutex.Unlock()
	fake.PutManagedInsightRulesWithContextStub = nil
	if fake.putManagedInsightRulesWithContextReturnsOnCall == nil {
		fake.putManagedInsightRulesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutManagedInsightRulesOutput
			result2 error
		})
	}
	fake.putManagedInsightRulesWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutManagedInsightRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarm(arg1 *cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error) {
	fake.putMetricAlarmMutex.Lock()
	ret, specificReturn := fake.putMetricAlarmReturnsOnCall[len(fake.putMetricAlarmArgsForCall)]
	fake.putMetricAlarmArgsForCall = append(fake.putMetricAlarmArgsForCall, struct {
		arg1 *cloudwatch.PutMetricAlarmInput
	}{arg1})
	stub := fake.PutMetricAlarmStub
	fakeReturns := fake.putMetricAlarmReturns
	fake.recordInvocation("PutMetricAlarm", []interface{}{arg1})
	fake.putMetricAlarmMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmCallCount() int {
	fake.putMetricAlarmMutex.RLock()
	defer fake.putMetricAlarmMutex.RUnlock()
	return len(fake.putMetricAlarmArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmCalls(stub func(*cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error)) {
	fake.putMetricAlarmMutex.Lock()
	defer fake.putMetricAlarmMutex.Unlock()
	fake.PutMetricAlarmStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmArgsForCall(i int) *cloudwatch.PutMetricAlarmInput {
	fake.putMetricAlarmMutex.RLock()
	defer fake.putMetricAlarmMutex.RUnlock()
	argsForCall := fake.putMetricAlarmArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmReturns(result1 *cloudwatch.PutMetricAlarmOutput, result2 error) {
	fake.putMetricAlarmMutex.Lock()
	defer fake.putMetricAlarmMutex.Unlock()
	fake.PutMetricAlarmStub = nil
	fake.putMetricAlarmReturns = struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmReturnsOnCall(i int, result1 *cloudwatch.PutMetricAlarmOutput, result2 error) {
	fake.putMetricAlarmMutex.Lock()
	defer fake.putMetricAlarmMutex.Unlock()
	fake.PutMetricAlarmStub = nil
	if fake.putMetricAlarmReturnsOnCall == nil {
		fake.putMetricAlarmReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricAlarmOutput
			result2 error
		})
	}
	fake.putMetricAlarmReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequest(arg1 *cloudwatch.PutMetricAlarmInput) (*request.Request, *cloudwatch.PutMetricAlarmOutput) {
	fake.putMetricAlarmRequestMutex.Lock()
	ret, specificReturn := fake.putMetricAlarmRequestReturnsOnCall[len(fake.putMetricAlarmRequestArgsForCall)]
	fake.putMetricAlarmRequestArgsForCall = append(fake.putMetricAlarmRequestArgsForCall, struct {
		arg1 *cloudwatch.PutMetricAlarmInput
	}{arg1})
	stub := fake.PutMetricAlarmRequestStub
	fakeReturns := fake.putMetricAlarmRequestReturns
	fake.recordInvocation("PutMetricAlarmRequest", []interface{}{arg1})
	fake.putMetricAlarmRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestCallCount() int {
	fake.putMetricAlarmRequestMutex.RLock()
	defer fake.putMetricAlarmRequestMutex.RUnlock()
	return len(fake.putMetricAlarmRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestCalls(stub func(*cloudwatch.PutMetricAlarmInput) (*request.Request, *cloudwatch.PutMetricAlarmOutput)) {
	fake.putMetricAlarmRequestMutex.Lock()
	defer fake.putMetricAlarmRequestMutex.Unlock()
	fake.PutMetricAlarmRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestArgsForCall(i int) *cloudwatch.PutMetricAlarmInput {
	fake.putMetricAlarmRequestMutex.RLock()
	defer fake.putMetricAlarmRequestMutex.RUnlock()
	argsForCall := fake.putMetricAlarmRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestReturns(result1 *request.Request, result2 *cloudwatch.PutMetricAlarmOutput) {
	fake.putMetricAlarmRequestMutex.Lock()
	defer fake.putMetricAlarmRequestMutex.Unlock()
	fake.PutMetricAlarmRequestStub = nil
	fake.putMetricAlarmRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricAlarmOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutMetricAlarmOutput) {
	fake.putMetricAlarmRequestMutex.Lock()
	defer fake.putMetricAlarmRequestMutex.Unlock()
	fake.PutMetricAlarmRequestStub = nil
	if fake.putMetricAlarmRequestReturnsOnCall == nil {
		fake.putMetricAlarmRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutMetricAlarmOutput
		})
	}
	fake.putMetricAlarmRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricAlarmOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContext(arg1 context.Context, arg2 *cloudwatch.PutMetricAlarmInput, arg3 ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error) {
	fake.putMetricAlarmWithContextMutex.Lock()
	ret, specificReturn := fake.putMetricAlarmWithContextReturnsOnCall[len(fake.putMetricAlarmWithContextArgsForCall)]
	fake.putMetricAlarmWithContextArgsForCall = append(fake.putMetricAlarmWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricAlarmInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutMetricAlarmWithContextStub
	fakeReturns := fake.putMetricAlarmWithContextReturns
	fake.recordInvocation("PutMetricAlarmWithContext", []interface{}{arg1, arg2, arg3})
	fake.putMetricAlarmWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextCallCount() int {
	fake.putMetricAlarmWithContextMutex.RLock()
	defer fake.putMetricAlarmWithContextMutex.RUnlock()
	return len(fake.putMetricAlarmWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextCalls(stub func(context.Context, *cloudwatch.PutMetricAlarmInput, ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error)) {
	fake.putMetricAlarmWithContextMutex.Lock()
	defer fake.putMetricAlarmWithContextMutex.Unlock()
	fake.PutMetricAlarmWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutMetricAlarmInput, []request.Option) {
	fake.putMetricAlarmWithContextMutex.RLock()
	defer fake.putMetricAlarmWithContextMutex.RUnlock()
	argsForCall := fake.putMetricAlarmWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextReturns(result1 *cloudwatch.PutMetricAlarmOutput, result2 error) {
	fake.putMetricAlarmWithContextMutex.Lock()
	defer fake.putMetricAlarmWithContextMutex.Unlock()
	fake.PutMetricAlarmWithContextStub = nil
	fake.putMetricAlarmWithContextReturns = struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextReturnsOnCall(i int, result1 *cloudwatch.PutMetricAlarmOutput, result2 error) {
	fake.putMetricAlarmWithContextMutex.Lock()
	defer fake.putMetricAlarmWithContextMutex.Unlock()
	fake.PutMetricAlarmWithContextStub = nil
	if fake.putMetricAlarmWithContextReturnsOnCall == nil {
		fake.putMetricAlarmWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricAlarmOutput
			result2 error
		})
	}
	fake.putMetricAlarmWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricData(arg1 *cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error) {
	fake.putMetricDataMutex.Lock()
	ret, specificReturn := fake.putMetricDataReturnsOnCall[len(fake.putMetricDataArgsForCall)]
	fake.putMetricDataArgsForCall = append(fake.putMetricDataArgsForCall, struct {
		arg1 *cloudwatch.PutMetricDataInput
	}{arg1})
	stub := fake.PutMetricDataStub
	fakeReturns := fake.putMetricDataReturns
	fake.recordInvocation("PutMetricData", []interface{}{arg1})
	fake.putMetricDataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricDataCallCount() int {
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	return len(fake.putMetricDataArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricDataCalls(stub func(*cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error)) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricDataArgsForCall(i int) *cloudwatch.PutMetricDataInput {
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	argsForCall := fake.putMetricDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricDataReturns(result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = nil
	fake.putMetricDataReturns = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataReturnsOnCall(i int, result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = nil
	if fake.putMetricDataReturnsOnCall == nil {
		fake.putMetricDataReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricDataOutput
			result2 error
		})
	}
	fake.putMetricDataReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequest(arg1 *cloudwatch.PutMetricDataInput) (*request.Request, *cloudwatch.PutMetricDataOutput) {
	fake.putMetricDataRequestMutex.Lock()
	ret, specificReturn := fake.putMetricDataRequestReturnsOnCall[len(fake.putMetricDataRequestArgsForCall)]
	fake.putMetricDataRequestArgsForCall = append(fake.putMetricDataRequestArgsForCall, struct {
		arg1 *cloudwatch.PutMetricDataInput
	}{arg1})
	stub := fake.PutMetricDataRequestStub
	fakeReturns := fake.putMetricDataRequestReturns
	fake.recordInvocation("PutMetricDataRequest", []interface{}{arg1})
	fake.putMetricDataRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestCallCount() int {
	fake.putMetricDataRequestMutex.RLock()
	defer fake.putMetricDataRequestMutex.RUnlock()
	return len(fake.putMetricDataRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestCalls(stub func(*cloudwatch.PutMetricDataInput) (*request.Request, *cloudwatch.PutMetricDataOutput)) {
	fake.putMetricDataRequestMutex.Lock()
	defer fake.putMetricDataRequestMutex.Unlock()
	fake.PutMetricDataRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestArgsForCall(i int) *cloudwatch.PutMetricDataInput {
	fake.putMetricDataRequestMutex.RLock()
	defer fake.putMetricDataRequestMutex.RUnlock()
	argsForCall := fake.putMetricDataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestReturns(result1 *request.Request, result2 *cloudwatch.PutMetricDataOutput) {
	fake.putMetricDataRequestMutex.Lock()
	defer fake.putMetricDataRequestMutex.Unlock()
	fake.PutMetricDataRequestStub = nil
	fake.putMetricDataRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricDataOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutMetricDataOutput) {
	fake.putMetricDataRequestMutex.Lock()
	defer fake.putMetricDataRequestMutex.Unlock()
	fake.PutMetricDataRequestStub = nil
	if fake.putMetricDataRequestReturnsOnCall == nil {
		fake.putMetricDataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutMetricDataOutput
		})
	}
	fake.putMetricDataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricDataOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContext(arg1 context.Context, arg2 *cloudwatch.PutMetricDataInput, arg3 ...request.Option) (*cloudwatch.PutMetricDataOutput, error) {
	fake.putMetricDataWithContextMutex.Lock()
	ret, specificReturn := fake.putMetricDataWithContextReturnsOnCall[len(fake.putMetricDataWithContextArgsForCall)]
	fake.putMetricDataWithContextArgsForCall = append(fake.putMetricDataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricDataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutMetricDataWithContextStub
	fakeReturns := fake.putMetricDataWithContextReturns
	fake.recordInvocation("PutMetricDataWithContext", []interface{}{arg1, arg2, arg3})
	fake.putMetricDataWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextCallCount() int {
	fake.putMetricDataWithContextMutex.RLock()
	defer fake.putMetricDataWithContextMutex.RUnlock()
	return len(fake.putMetricDataWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextCalls(stub func(context.Context, *cloudwatch.PutMetricDataInput, ...request.Option) (*cloudwatch.PutMetricDataOutput, error)) {
	fake.putMetricDataWithContextMutex.Lock()
	defer fake.putMetricDataWithContextMutex.Unlock()
	fake.PutMetricDataWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutMetricDataInput, []request.Option) {
	fake.putMetricDataWithContextMutex.RLock()
	defer fake.putMetricDataWithContextMutex.RUnlock()
	argsForCall := fake.putMetricDataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextReturns(result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataWithContextMutex.Lock()
	defer fake.putMetricDataWithContextMutex.Unlock()
	fake.PutMetricDataWithContextStub = nil
	fake.putMetricDataWithContextReturns = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextReturnsOnCall(i int, result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataWithContextMutex.Lock()
	defer fake.putMetricDataWithContextMutex.Unlock()
	fake.PutMetricDataWithContextStub = nil
	if fake.putMetricDataWithContextReturnsOnCall == nil {
		fake.putMetricDataWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricDataOutput
			result2 error
		})
	}
	fake.putMetricDataWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricStream(arg1 *cloudwatch.PutMetricStreamInput) (*cloudwatch.PutMetricStreamOutput, error) {
	fake.putMetricStreamMutex.Lock()
	ret, specificReturn := fake.putMetricStreamReturnsOnCall[len(fake.putMetricStreamArgsForCall)]
	fake.putMetricStreamArgsForCall = append(fake.putMetricStreamArgsForCall, struct {
		arg1 *cloudwatch.PutMetricStreamInput
	}{arg1})
	stub := fake.PutMetricStreamStub
	fakeReturns := fake.putMetricStreamReturns
	fake.recordInvocation("PutMetricStream", []interface{}{arg1})
	fake.putMetricStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricStreamCallCount() int {
	fake.putMetricStreamMutex.RLock()
	defer fake.putMetricStreamMutex.RUnlock()
	return len(fake.putMetricStreamArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricStreamCalls(stub func(*cloudwatch.PutMetricStreamInput) (*cloudwatch.PutMetricStreamOutput, error)) {
	fake.putMetricStreamMutex.Lock()
	defer fake.putMetricStreamMutex.Unlock()
	fake.PutMetricStreamStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricStreamArgsForCall(i int) *cloudwatch.PutMetricStreamInput {
	fake.putMetricStreamMutex.RLock()
	defer fake.putMetricStreamMutex.RUnlock()
	argsForCall := fake.putMetricStreamArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricStreamReturns(result1 *cloudwatch.PutMetricStreamOutput, result2 error) {
	fake.putMetricStreamMutex.Lock()
	defer fake.putMetricStreamMutex.Unlock()
	fake.PutMetricStreamStub = nil
	fake.putMetricStreamReturns = struct {
		result1 *cloudwatch.PutMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricStreamReturnsOnCall(i int, result1 *cloudwatch.PutMetricStreamOutput, result2 error) {
	fake.putMetricStreamMutex.Lock()
	defer fake.putMetricStreamMutex.Unlock()
	fake.PutMetricStreamStub = nil
	if fake.putMetricStreamReturnsOnCall == nil {
		fake.putMetricStreamReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricStreamOutput
			result2 error
		})
	}
	fake.putMetricStreamReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricStreamRequest(arg1 *cloudwatch.PutMetricStreamInput) (*request.Request, *cloudwatch.PutMetricStreamOutput) {
	fake.putMetricStreamRequestMutex.Lock()
	ret, specificReturn := fake.putMetricStreamRequestReturnsOnCall[len(fake.putMetricStreamRequestArgsForCall)]
	fake.putMetricStreamRequestArgsForCall = append(fake.putMetricStreamRequestArgsForCall, struct {
		arg1 *cloudwatch.PutMetricStreamInput
	}{arg1})
	stub := fake.PutMetricStreamRequestStub
	fakeReturns := fake.putMetricStreamRequestReturns
	fake.recordInvocation("PutMetricStreamRequest", []interface{}{arg1})
	fake.putMetricStreamRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricStreamRequestCallCount() int {
	fake.putMetricStreamRequestMutex.RLock()
	defer fake.putMetricStreamRequestMutex.RUnlock()
	return len(fake.putMetricStreamRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricStreamRequestCalls(stub func(*cloudwatch.PutMetricStreamInput) (*request.Request, *cloudwatch.PutMetricStreamOutput)) {
	fake.putMetricStreamRequestMutex.Lock()
	defer fake.putMetricStreamRequestMutex.Unlock()
	fake.PutMetricStreamRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricStreamRequestArgsForCall(i int) *cloudwatch.PutMetricStreamInput {
	fake.putMetricStreamRequestMutex.RLock()
	defer fake.putMetricStreamRequestMutex.RUnlock()
	argsForCall := fake.putMetricStreamRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricStreamRequestReturns(result1 *request.Request, result2 *cloudwatch.PutMetricStreamOutput) {
	fake.putMetricStreamRequestMutex.Lock()
	defer fake.putMetricStreamRequestMutex.Unlock()
	fake.PutMetricStreamRequestStub = nil
	fake.putMetricStreamRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricStreamOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricStreamRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutMetricStreamOutput) {
	fake.putMetricStreamRequestMutex.Lock()
	defer fake.putMetricStreamRequestMutex.Unlock()
	fake.PutMetricStreamRequestStub = nil
	if fake.putMetricStreamRequestReturnsOnCall == nil {
		fake.putMetricStreamRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutMetricStreamOutput
		})
	}
	fake.putMetricStreamRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricStreamOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricStreamWithContext(arg1 context.Context, arg2 *cloudwatch.PutMetricStreamInput, arg3 ...request.Option) (*cloudwatch.PutMetricStreamOutput, error) {
	fake.putMetricStreamWithContextMutex.Lock()
	ret, specificReturn := fake.putMetricStreamWithContextReturnsOnCall[len(fake.putMetricStreamWithContextArgsForCall)]
	fake.putMetricStreamWithContextArgsForCall = append(fake.putMetricStreamWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricStreamInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutMetricStreamWithContextStub
	fakeReturns := fake.putMetricStreamWithContextReturns
	fake.recordInvocation("PutMetricStreamWithContext", []interface{}{arg1, arg2, arg3})
	fake.putMetricStreamWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricStreamWithContextCallCount() int {
	fake.putMetricStreamWithContextMutex.RLock()
	defer fake.putMetricStreamWithContextMutex.RUnlock()
	return len(fake.putMetricStreamWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricStreamWithContextCalls(stub func(context.Context, *cloudwatch.PutMetricStreamInput, ...request.Option) (*cloudwatch.PutMetricStreamOutput, error)) {
	fake.putMetricStreamWithContextMutex.Lock()
	defer fake.putMetricStreamWithContextMutex.Unlock()
	fake.PutMetricStreamWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricStreamWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutMetricStreamInput, []request.Option) {
	fake.putMetricStreamWithContextMutex.RLock()
	defer fake.putMetricStreamWithContextMutex.RUnlock()
	argsForCall := fake.putMetricStreamWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutMetricStreamWithContextReturns(result1 *cloudwatch.PutMetricStreamOutput, result2 error) {
	fake.putMetricStreamWithContextMutex.Lock()
	defer fake.putMetricStreamWithContextMutex.Unlock()
	fake.PutMetricStreamWithContextStub = nil
	fake.putMetricStreamWithContextReturns = struct {
		result1 *cloudwatch.PutMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricStreamWithContextReturnsOnCall(i int, result1 *cloudwatch.PutMetricStreamOutput, result2 error) {
	fake.putMetricStreamWithContextMutex.Lock()
	defer fake.putMetricStreamWithContextMutex.Unlock()
	fake.PutMetricStreamWithContextStub = nil
	if fake.putMetricStreamWithContextReturnsOnCall == nil {
		fake.putMetricStreamWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricStreamOutput
			result2 error
		})
	}
	fake.putMetricStreamWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmState(arg1 *cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error) {
	fake.setAlarmStateMutex.Lock()
	ret, specificReturn := fake.setAlarmStateReturnsOnCall[len(fake.setAlarmStateArgsForCall)]
	fake.setAlarmStateArgsForCall = append(fake.setAlarmStateArgsForCall, struct {
		arg1 *cloudwatch.SetAlarmStateInput
	}{arg1})
	stub := fake.SetAlarmStateStub
	fakeReturns := fake.setAlarmStateReturns
	fake.recordInvocation("SetAlarmState", []interface{}{arg1})
	fake.setAlarmStateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) SetAlarmStateCallCount() int {
	fake.setAlarmStateMutex.RLock()
	defer fake.setAlarmStateMutex.RUnlock()
	return len(fake.setAlarmStateArgsForCall)
}

func (fake *FakeCloudWatchAPI) SetAlarmStateCalls(stub func(*cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error)) {
	fake.setAlarmStateMutex.Lock()
	defer fake.setAlarmStateMutex.Unlock()
	fake.SetAlarmStateStub = stub
}

func (fake *FakeCloudWatchAPI) SetAlarmStateArgsForCall(i int) *cloudwatch.SetAlarmStateInput {
	fake.setAlarmStateMutex.RLock()
	defer fake.setAlarmStateMutex.RUnlock()
	argsForCall := fake.setAlarmStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) SetAlarmStateReturns(result1 *cloudwatch.SetAlarmStateOutput, result2 error) {
	fake.setAlarmStateMutex.Lock()
	defer fake.setAlarmStateMutex.Unlock()
	fake.SetAlarmStateStub = nil
	fake.setAlarmStateReturns = struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateReturnsOnCall(i int, result1 *cloudwatch.SetAlarmStateOutput, result2 error) {
	fake.setAlarmStateMutex.Lock()
	defer fake.setAlarmStateMutex.Unlock()
	fake.SetAlarmStateStub = nil
	if fake.setAlarmStateReturnsOnCall == nil {
		fake.setAlarmStateReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.SetAlarmStateOutput
			result2 error
		})
	}
	fake.setAlarmStateReturnsOnCall[i] = struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequest(arg1 *cloudwatch.SetAlarmStateInput) (*request.Request, *cloudwatch.SetAlarmStateOutput) {
	fake.setAlarmStateRequestMutex.Lock()
	ret, specificReturn := fake.setAlarmStateRequestReturnsOnCall[len(fake.setAlarmStateRequestArgsForCall)]
	fake.setAlarmStateRequestArgsForCall = append(fake.setAlarmStateRequestArgsForCall, struct {
		arg1 *cloudwatch.SetAlarmStateInput
	}{arg1})
	stub := fake.SetAlarmStateRequestStub
	fakeReturns := fake.setAlarmStateRequestReturns
	fake.recordInvocation("SetAlarmStateRequest", []interface{}{arg1})
	fake.setAlarmStateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestCallCount() int {
	fake.setAlarmStateRequestMutex.RLock()
	defer fake.setAlarmStateRequestMutex.RUnlock()
	return len(fake.setAlarmStateRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestCalls(stub func(*cloudwatch.SetAlarmStateInput) (*request.Request, *cloudwatch.SetAlarmStateOutput)) {
	fake.setAlarmStateRequestMutex.Lock()
	defer fake.setAlarmStateRequestMutex.Unlock()
	fake.SetAlarmStateRequestStub = stub
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestArgsForCall(i int) *cloudwatch.SetAlarmStateInput {
	fake.setAlarmStateRequestMutex.RLock()
	defer fake.setAlarmStateRequestMutex.RUnlock()
	argsForCall := fake.setAlarmStateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestReturns(result1 *request.Request, result2 *cloudwatch.SetAlarmStateOutput) {
	fake.setAlarmStateRequestMutex.Lock()
	defer fake.setAlarmStateRequestMutex.Unlock()
	fake.SetAlarmStateRequestStub = nil
	fake.setAlarmStateRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.SetAlarmStateOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.SetAlarmStateOutput) {
	fake.setAlarmStateRequestMutex.Lock()
	defer fake.setAlarmStateRequestMutex.Unlock()
	fake.SetAlarmStateRequestStub = nil
	if fake.setAlarmStateRequestReturnsOnCall == nil {
		fake.setAlarmStateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.SetAlarmStateOutput
		})
	}
	fake.setAlarmStateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.SetAlarmStateOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContext(arg1 context.Context, arg2 *cloudwatch.SetAlarmStateInput, arg3 ...request.Option) (*cloudwatch.SetAlarmStateOutput, error) {
	fake.setAlarmStateWithContextMutex.Lock()
	ret, specificReturn := fake.setAlarmStateWithContextReturnsOnCall[len(fake.setAlarmStateWithContextArgsForCall)]
	fake.setAlarmStateWithContextArgsForCall = append(fake.setAlarmStateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.SetAlarmStateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SetAlarmStateWithContextStub
	fakeReturns := fake.setAlarmStateWithContextReturns
	fake.recordInvocation("SetAlarmStateWithContext", []interface{}{arg1, arg2, arg3})
	fake.setAlarmStateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextCallCount() int {
	fake.setAlarmStateWithContextMutex.RLock()
	defer fake.setAlarmStateWithContextMutex.RUnlock()
	return len(fake.setAlarmStateWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextCalls(stub func(context.Context, *cloudwatch.SetAlarmStateInput, ...request.Option) (*cloudwatch.SetAlarmStateOutput, error)) {
	fake.setAlarmStateWithContextMutex.Lock()
	defer fake.setAlarmStateWithContextMutex.Unlock()
	fake.SetAlarmStateWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextArgsForCall(i int) (context.Context, *cloudwatch.SetAlarmStateInput, []request.Option) {
	fake.setAlarmStateWithContextMutex.RLock()
	defer fake.setAlarmStateWithContextMutex.RUnlock()
	argsForCall := fake.setAlarmStateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextReturns(result1 *cloudwatch.SetAlarmStateOutput, result2 error) {
	fake.setAlarmStateWithContextMutex.Lock()
	defer fake.setAlarmStateWithContextMutex.Unlock()
	fake.SetAlarmStateWithContextStub = nil
	fake.setAlarmStateWithContextReturns = struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextReturnsOnCall(i int, result1 *cloudwatch.SetAlarmStateOutput, result2 error) {
	fake.setAlarmStateWithContextMutex.Lock()
	defer fake.setAlarmStateWithContextMutex.Unlock()
	fake.SetAlarmStateWithContextStub = nil
	if fake.setAlarmStateWithContextReturnsOnCall == nil {
		fake.setAlarmStateWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.SetAlarmStateOutput
			result2 error
		})
	}
	fake.setAlarmStateWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StartMetricStreams(arg1 *cloudwatch.StartMetricStreamsInput) (*cloudwatch.StartMetricStreamsOutput, error) {
	fake.startMetricStreamsMutex.Lock()
	ret, specificReturn := fake.startMetricStreamsReturnsOnCall[len(fake.startMetricStreamsArgsForCall)]
	fake.startMetricStreamsArgsForCall = append(fake.startMetricStreamsArgsForCall, struct {
		arg1 *cloudwatch.StartMetricStreamsInput
	}{arg1})
	stub := fake.StartMetricStreamsStub
	fakeReturns := fake.startMetricStreamsReturns
	fake.recordInvocation("StartMetricStreams", []interface{}{arg1})
	fake.startMetricStreamsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsCallCount() int {
	fake.startMetricStreamsMutex.RLock()
	defer fake.startMetricStreamsMutex.RUnlock()
	return len(fake.startMetricStreamsArgsForCall)
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsCalls(stub func(*cloudwatch.StartMetricStreamsInput) (*cloudwatch.StartMetricStreamsOutput, error)) {
	fake.startMetricStreamsMutex.Lock()
	defer fake.startMetricStreamsMutex.Unlock()
	fake.StartMetricStreamsStub = stub
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsArgsForCall(i int) *cloudwatch.StartMetricStreamsInput {
	fake.startMetricStreamsMutex.RLock()
	defer fake.startMetricStreamsMutex.RUnlock()
	argsForCall := fake.startMetricStreamsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsReturns(result1 *cloudwatch.StartMetricStreamsOutput, result2 error) {
	fake.startMetricStreamsMutex.Lock()
	defer fake.startMetricStreamsMutex.Unlock()
	fake.StartMetricStreamsStub = nil
	fake.startMetricStreamsReturns = struct {
		result1 *cloudwatch.StartMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsReturnsOnCall(i int, result1 *cloudwatch.StartMetricStreamsOutput, result2 error) {
	fake.startMetricStreamsMutex.Lock()
	defer fake.startMetricStreamsMutex.Unlock()
	fake.StartMetricStreamsStub = nil
	if fake.startMetricStreamsReturnsOnCall == nil {
		fake.startMetricStreamsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.StartMetricStreamsOutput
			result2 error
		})
	}
	fake.startMetricStreamsReturnsOnCall[i] = struct {
		result1 *cloudwatch.StartMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsRequest(arg1 *cloudwatch.StartMetricStreamsInput) (*request.Request, *cloudwatch.StartMetricStreamsOutput) {
	fake.startMetricStreamsRequestMutex.Lock()
	ret, specificReturn := fake.startMetricStreamsRequestReturnsOnCall[len(fake.startMetricStreamsRequestArgsForCall)]
	fake.startMetricStreamsRequestArgsForCall = append(fake.startMetricStreamsRequestArgsForCall, struct {
		arg1 *cloudwatch.StartMetricStreamsInput
	}{arg1})
	stub := fake.StartMetricStreamsRequestStub
	fakeReturns := fake.startMetricStreamsRequestReturns
	fake.recordInvocation("StartMetricStreamsRequest", []interface{}{arg1})
	fake.startMetricStreamsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsRequestCallCount() int {
	fake.startMetricStreamsRequestMutex.RLock()
	defer fake.startMetricStreamsRequestMutex.RUnlock()
	return len(fake.startMetricStreamsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsRequestCalls(stub func(*cloudwatch.StartMetricStreamsInput) (*request.Request, *cloudwatch.StartMetricStreamsOutput)) {
	fake.startMetricStreamsRequestMutex.Lock()
	defer fake.startMetricStreamsRequestMutex.Unlock()
	fake.StartMetricStreamsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsRequestArgsForCall(i int) *cloudwatch.StartMetricStreamsInput {
	fake.startMetricStreamsRequestMutex.RLock()
	defer fake.startMetricStreamsRequestMutex.RUnlock()
	argsForCall := fake.startMetricStreamsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsRequestReturns(result1 *request.Request, result2 *cloudwatch.StartMetricStreamsOutput) {
	fake.startMetricStreamsRequestMutex.Lock()
	defer fake.startMetricStreamsRequestMutex.Unlock()
	fake.StartMetricStreamsRequestStub = nil
	fake.startMetricStreamsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.StartMetricStreamsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.StartMetricStreamsOutput) {
	fake.startMetricStreamsRequestMutex.Lock()
	defer fake.startMetricStreamsRequestMutex.Unlock()
	fake.StartMetricStreamsRequestStub = nil
	if fake.startMetricStreamsRequestReturnsOnCall == nil {
		fake.startMetricStreamsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.StartMetricStreamsOutput
		})
	}
	fake.startMetricStreamsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.StartMetricStreamsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsWithContext(arg1 context.Context, arg2 *cloudwatch.StartMetricStreamsInput, arg3 ...request.Option) (*cloudwatch.StartMetricStreamsOutput, error) {
	fake.startMetricStreamsWithContextMutex.Lock()
	ret, specificReturn := fake.startMetricStreamsWithContextReturnsOnCall[len(fake.startMetricStreamsWithContextArgsForCall)]
	fake.startMetricStreamsWithContextArgsForCall = append(fake.startMetricStreamsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.StartMetricStreamsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartMetricStreamsWithContextStub
	fakeReturns := fake.startMetricStreamsWithContextReturns
	fake.recordInvocation("StartMetricStreamsWithContext", []interface{}{arg1, arg2, arg3})
	fake.startMetricStreamsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsWithContextCallCount() int {
	fake.startMetricStreamsWithContextMutex.RLock()
	defer fake.startMetricStreamsWithContextMutex.RUnlock()
	return len(fake.startMetricStreamsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsWithContextCalls(stub func(context.Context, *cloudwatch.StartMetricStreamsInput, ...request.Option) (*cloudwatch.StartMetricStreamsOutput, error)) {
	fake.startMetricStreamsWithContextMutex.Lock()
	defer fake.startMetricStreamsWithContextMutex.Unlock()
	fake.StartMetricStreamsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsWithContextArgsForCall(i int) (context.Context, *cloudwatch.StartMetricStreamsInput, []request.Option) {
	fake.startMetricStreamsWithContextMutex.RLock()
	defer fake.startMetricStreamsWithContextMutex.RUnlock()
	argsForCall := fake.startMetricStreamsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsWithContextReturns(result1 *cloudwatch.StartMetricStreamsOutput, result2 error) {
	fake.startMetricStreamsWithContextMutex.Lock()
	defer fake.startMetricStreamsWithContextMutex.Unlock()
	fake.StartMetricStreamsWithContextStub = nil
	fake.startMetricStreamsWithContextReturns = struct {
		result1 *cloudwatch.StartMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StartMetricStreamsWithContextReturnsOnCall(i int, result1 *cloudwatch.StartMetricStreamsOutput, result2 error) {
	fake.startMetricStreamsWithContextMutex.Lock()
	defer fake.startMetricStreamsWithContextMutex.Unlock()
	fake.StartMetricStreamsWithContextStub = nil
	if fake.startMetricStreamsWithContextReturnsOnCall == nil {
		fake.startMetricStreamsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.StartMetricStreamsOutput
			result2 error
		})
	}
	fake.startMetricStreamsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.StartMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StopMetricStreams(arg1 *cloudwatch.StopMetricStreamsInput) (*cloudwatch.StopMetricStreamsOutput, error) {
	fake.stopMetricStreamsMutex.Lock()
	ret, specificReturn := fake.stopMetricStreamsReturnsOnCall[len(fake.stopMetricStreamsArgsForCall)]
	fake.stopMetricStreamsArgsForCall = append(fake.stopMetricStreamsArgsForCall, struct {
		arg1 *cloudwatch.StopMetricStreamsInput
	}{arg1})
	stub := fake.StopMetricStreamsStub
	fakeReturns := fake.stopMetricStreamsReturns
	fake.recordInvocation("StopMetricStreams", []interface{}{arg1})
	fake.stopMetricStreamsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsCallCount() int {
	fake.stopMetricStreamsMutex.RLock()
	defer fake.stopMetricStreamsMutex.RUnlock()
	return len(fake.stopMetricStreamsArgsForCall)
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsCalls(stub func(*cloudwatch.StopMetricStreamsInput) (*cloudwatch.StopMetricStreamsOutput, error)) {
	fake.stopMetricStreamsMutex.Lock()
	defer fake.stopMetricStreamsMutex.Unlock()
	fake.StopMetricStreamsStub = stub
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsArgsForCall(i int) *cloudwatch.StopMetricStreamsInput {
	fake.stopMetricStreamsMutex.RLock()
	defer fake.stopMetricStreamsMutex.RUnlock()
	argsForCall := fake.stopMetricStreamsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsReturns(result1 *cloudwatch.StopMetricStreamsOutput, result2 error) {
	fake.stopMetricStreamsMutex.Lock()
	defer fake.stopMetricStreamsMutex.Unlock()
	fake.StopMetricStreamsStub = nil
	fake.stopMetricStreamsReturns = struct {
		result1 *cloudwatch.StopMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsReturnsOnCall(i int, result1 *cloudwatch.StopMetricStreamsOutput, result2 error) {
	fake.stopMetricStreamsMutex.Lock()
	defer fake.stopMetricStreamsMutex.Unlock()
	fake.StopMetricStreamsStub = nil
	if fake.stopMetricStreamsReturnsOnCall == nil {
		fake.stopMetricStreamsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.StopMetricStreamsOutput
			result2 error
		})
	}
	fake.stopMetricStreamsReturnsOnCall[i] = struct {
		result1 *cloudwatch.StopMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsRequest(arg1 *cloudwatch.StopMetricStreamsInput) (*request.Request, *cloudwatch.StopMetricStreamsOutput) {
	fake.stopMetricStreamsRequestMutex.Lock()
	ret, specificReturn := fake.stopMetricStreamsRequestReturnsOnCall[len(fake.stopMetricStreamsRequestArgsForCall)]
	fake.stopMetricStreamsRequestArgsForCall = append(fake.stopMetricStreamsRequestArgsForCall, struct {
		arg1 *cloudwatch.StopMetricStreamsInput
	}{arg1})
	stub := fake.StopMetricStreamsRequestStub
	fakeReturns := fake.stopMetricStreamsRequestReturns
	fake.recordInvocation("StopMetricStreamsRequest", []interface{}{arg1})
	fake.stopMetricStreamsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsRequestCallCount() int {
	fake.stopMetricStreamsRequestMutex.RLock()
	defer fake.stopMetricStreamsRequestMutex.RUnlock()
	return len(fake.stopMetricStreamsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsRequestCalls(stub func(*cloudwatch.StopMetricStreamsInput) (*request.Request, *cloudwatch.StopMetricStreamsOutput)) {
	fake.stopMetricStreamsRequestMutex.Lock()
	defer fake.stopMetricStreamsRequestMutex.Unlock()
	fake.StopMetricStreamsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsRequestArgsForCall(i int) *cloudwatch.StopMetricStreamsInput {
	fake.stopMetricStreamsRequestMutex.RLock()
	defer fake.stopMetricStreamsRequestMutex.RUnlock()
	argsForCall := fake.stopMetricStreamsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsRequestReturns(result1 *request.Request, result2 *cloudwatch.StopMetricStreamsOutput) {
	fake.stopMetricStreamsRequestMutex.Lock()
	defer fake.stopMetricStreamsRequestMutex.Unlock()
	fake.StopMetricStreamsRequestStub = nil
	fake.stopMetricStreamsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.StopMetricStreamsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.StopMetricStreamsOutput) {
	fake.stopMetricStreamsRequestMutex.Lock()
	defer fake.stopMetricStreamsRequestMutex.Unlock()
	fake.StopMetricStreamsRequestStub = nil
	if fake.stopMetricStreamsRequestReturnsOnCall == nil {
		fake.stopMetricStreamsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.StopMetricStreamsOutput
		})
	}
	fake.stopMetricStreamsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.StopMetricStreamsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsWithContext(arg1 context.Context, arg2 *cloudwatch.StopMetricStreamsInput, arg3 ...request.Option) (*cloudwatch.StopMetricStreamsOutput, error) {
	fake.stopMetricStreamsWithContextMutex.Lock()
	ret, specificReturn := fake.stopMetricStreamsWithContextReturnsOnCall[len(fake.stopMetricStreamsWithContextArgsForCall)]
	fake.stopMetricStreamsWithContextArgsForCall = append(fake.stopMetricStreamsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.StopMetricStreamsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StopMetricStreamsWithContextStub
	fakeReturns := fake.stopMetricStreamsWithContextReturns
	fake.recordInvocation("StopMetricStreamsWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopMetricStreamsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsWithContextCallCount() int {
	fake.stopMetricStreamsWithContextMutex.RLock()
	defer fake.stopMetricStreamsWithContextMutex.RUnlock()
	return len(fake.stopMetricStreamsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsWithContextCalls(stub func(context.Context, *cloudwatch.StopMetricStreamsInput, ...request.Option) (*cloudwatch.StopMetricStreamsOutput, error)) {
	fake.stopMetricStreamsWithContextMutex.Lock()
	defer fake.stopMetricStreamsWithContextMutex.Unlock()
	fake.StopMetricStreamsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsWithContextArgsForCall(i int) (context.Context, *cloudwatch.StopMetricStreamsInput, []request.Option) {
	fake.stopMetricStreamsWithContextMutex.RLock()
	defer fake.stopMetricStreamsWithContextMutex.RUnlock()
	argsForCall := fake.stopMetricStreamsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsWithContextReturns(result1 *cloudwatch.StopMetricStreamsOutput, result2 error) {
	fake.stopMetricStreamsWithContextMutex.Lock()
	defer fake.stopMetricStreamsWithContextMutex.Unlock()
	fake.StopMetricStreamsWithContextStub = nil
	fake.stopMetricStreamsWithContextReturns = struct {
		result1 *cloudwatch.StopMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) StopMetricStreamsWithContextReturnsOnCall(i int, result1 *cloudwatch.StopMetricStreamsOutput, result2 error) {
	fake.stopMetricStreamsWithContextMutex.Lock()
	defer fake.stopMetricStreamsWithContextMutex.Unlock()
	fake.StopMetricStreamsWithContextStub = nil
	if fake.stopMetricStreamsWithContextReturnsOnCall == nil {
		fake.stopMetricStreamsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.StopMetricStreamsOutput
			result2 error
		})
	}
	fake.stopMetricStreamsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.StopMetricStreamsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) TagResource(arg1 *cloudwatch.TagResourceInput) (*cloudwatch.TagResourceOutput, error) {
	fake.tagResourceMutex.Lock()
	ret, specificReturn := fake.tagResourceReturnsOnCall[len(fake.tagResourceArgsForCall)]
	fake.tagResourceArgsForCall = append(fake.tagResourceArgsForCall, struct {
		arg1 *cloudwatch.TagResourceInput
	}{arg1})
	stub := fake.TagResourceStub
	fakeReturns := fake.tagResourceReturns
	fake.recordInvocation("TagResource", []interface{}{arg1})
	fake.tagResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) TagResourceCallCount() int {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	return len(fake.tagResourceArgsForCall)
}

func (fake *FakeCloudWatchAPI) TagResourceCalls(stub func(*cloudwatch.TagResourceInput) (*cloudwatch.TagResourceOutput, error)) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = stub
}

func (fake *FakeCloudWatchAPI) TagResourceArgsForCall(i int) *cloudwatch.TagResourceInput {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	argsForCall := fake.tagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) TagResourceReturns(result1 *cloudwatch.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	fake.tagResourceReturns = struct {
		result1 *cloudwatch.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) TagResourceReturnsOnCall(i int, result1 *cloudwatch.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	if fake.tagResourceReturnsOnCall == nil {
		fake.tagResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceReturnsOnCall[i] = struct {
		result1 *cloudwatch.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) TagResourceRequest(arg1 *cloudwatch.TagResourceInput) (*request.Request, *cloudwatch.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	ret, specificReturn := fake.tagResourceRequestReturnsOnCall[len(fake.tagResourceRequestArgsForCall)]
	fake.tagResourceRequestArgsForCall = append(fake.tagResourceRequestArgsForCall, struct {
		arg1 *cloudwatch.TagResourceInput
	}{arg1})
	stub := fake.TagResourceRequestStub
	fakeReturns := fake.tagResourceRequestReturns
	fake.recordInvocation("TagResourceRequest", []interface{}{arg1})
	fake.tagResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) TagResourceRequestCallCount() int {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	return len(fake.tagResourceRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) TagResourceRequestCalls(stub func(*cloudwatch.TagResourceInput) (*request.Request, *cloudwatch.TagResourceOutput)) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = stub
}

func (fake *FakeCloudWatchAPI) TagResourceRequestArgsForCall(i int) *cloudwatch.TagResourceInput {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	argsForCall := fake.tagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) TagResourceRequestReturns(result1 *request.Request, result2 *cloudwatch.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	fake.tagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) TagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	if fake.tagResourceRequestReturnsOnCall == nil {
		fake.tagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.TagResourceOutput
		})
	}
	fake.tagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) TagResourceWithContext(arg1 context.Context, arg2 *cloudwatch.TagResourceInput, arg3 ...request.Option) (*cloudwatch.TagResourceOutput, error) {
	fake.tagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.tagResourceWithContextReturnsOnCall[len(fake.tagResourceWithContextArgsForCall)]
	fake.tagResourceWithContextArgsForCall = append(fake.tagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.TagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.TagResourceWithContextStub
	fakeReturns := fake.tagResourceWithContextReturns
	fake.recordInvocation("TagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.tagResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) TagResourceWithContextCallCount() int {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	return len(fake.tagResourceWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) TagResourceWithContextCalls(stub func(context.Context, *cloudwatch.TagResourceInput, ...request.Option) (*cloudwatch.TagResourceOutput, error)) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) TagResourceWithContextArgsForCall(i int) (context.Context, *cloudwatch.TagResourceInput, []request.Option) {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	argsForCall := fake.tagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) TagResourceWithContextReturns(result1 *cloudwatch.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	fake.tagResourceWithContextReturns = struct {
		result1 *cloudwatch.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) TagResourceWithContextReturnsOnCall(i int, result1 *cloudwatch.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	if fake.tagResourceWithContextReturnsOnCall == nil {
		fake.tagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) UntagResource(arg1 *cloudwatch.UntagResourceInput) (*cloudwatch.UntagResourceOutput, error) {
	fake.untagResourceMutex.Lock()
	ret, specificReturn := fake.untagResourceReturnsOnCall[len(fake.untagResourceArgsForCall)]
	fake.untagResourceArgsForCall = append(fake.untagResourceArgsForCall, struct {
		arg1 *cloudwatch.UntagResourceInput
	}{arg1})
	stub := fake.UntagResourceStub
	fakeReturns := fake.untagResourceReturns
	fake.recordInvocation("UntagResource", []interface{}{arg1})
	fake.untagResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) UntagResourceCallCount() int {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	return len(fake.untagResourceArgsForCall)
}

func (fake *FakeCloudWatchAPI) UntagResourceCalls(stub func(*cloudwatch.UntagResourceInput) (*cloudwatch.UntagResourceOutput, error)) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = stub
}

func (fake *FakeCloudWatchAPI) UntagResourceArgsForCall(i int) *cloudwatch.UntagResourceInput {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	argsForCall := fake.untagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) UntagResourceReturns(result1 *cloudwatch.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	fake.untagResourceReturns = struct {
		result1 *cloudwatch.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) UntagResourceReturnsOnCall(i int, result1 *cloudwatch.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	if fake.untagResourceReturnsOnCall == nil {
		fake.untagResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceReturnsOnCall[i] = struct {
		result1 *cloudwatch.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) UntagResourceRequest(arg1 *cloudwatch.UntagResourceInput) (*request.Request, *cloudwatch.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	ret, specificReturn := fake.untagResourceRequestReturnsOnCall[len(fake.untagResourceRequestArgsForCall)]
	fake.untagResourceRequestArgsForCall = append(fake.untagResourceRequestArgsForCall, struct {
		arg1 *cloudwatch.UntagResourceInput
	}{arg1})
	stub := fake.UntagResourceRequestStub
	fakeReturns := fake.untagResourceRequestReturns
	fake.recordInvocation("UntagResourceRequest", []interface{}{arg1})
	fake.untagResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) UntagResourceRequestCallCount() int {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	return len(fake.untagResourceRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) UntagResourceRequestCalls(stub func(*cloudwatch.UntagResourceInput) (*request.Request, *cloudwatch.UntagResourceOutput)) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = stub
}

func (fake *FakeCloudWatchAPI) UntagResourceRequestArgsForCall(i int) *cloudwatch.UntagResourceInput {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	argsForCall := fake.untagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) UntagResourceRequestReturns(result1 *request.Request, result2 *cloudwatch.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	fake.untagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) UntagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	if fake.untagResourceRequestReturnsOnCall == nil {
		fake.untagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.UntagResourceOutput
		})
	}
	fake.untagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) UntagResourceWithContext(arg1 context.Context, arg2 *cloudwatch.UntagResourceInput, arg3 ...request.Option) (*cloudwatch.UntagResourceOutput, error) {
	fake.untagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.untagResourceWithContextReturnsOnCall[len(fake.untagResourceWithContextArgsForCall)]
	fake.untagResourceWithContextArgsForCall = append(fake.untagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.UntagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UntagResourceWithContextStub
	fakeReturns := fake.untagResourceWithContextReturns
	fake.recordInvocation("UntagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.untagResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) UntagResourceWithContextCallCount() int {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	return len(fake.untagResourceWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) UntagResourceWithContextCalls(stub func(context.Context, *cloudwatch.UntagResourceInput, ...request.Option) (*cloudwatch.UntagResourceOutput, error)) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) UntagResourceWithContextArgsForCall(i int) (context.Context, *cloudwatch.UntagResourceInput, []request.Option) {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	argsForCall := fake.untagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) UntagResourceWithContextReturns(result1 *cloudwatch.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	fake.untagResourceWithContextReturns = struct {
		result1 *cloudwatch.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) UntagResourceWithContextReturnsOnCall(i int, result1 *cloudwatch.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	if fake.untagResourceWithContextReturnsOnCall == nil {
		fake.untagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExists(arg1 *cloudwatch.DescribeAlarmsInput) error {
	fake.waitUntilAlarmExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilAlarmExistsReturnsOnCall[len(fake.waitUntilAlarmExistsArgsForCall)]
	fake.waitUntilAlarmExistsArgsForCall = append(fake.waitUntilAlarmExistsArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}{arg1})
	stub := fake.WaitUntilAlarmExistsStub
	fakeReturns := fake.waitUntilAlarmExistsReturns
	fake.recordInvocation("WaitUntilAlarmExists", []interface{}{arg1})
	fake.waitUntilAlarmExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsCallCount() int {
	fake.waitUntilAlarmExistsMutex.RLock()
	defer fake.waitUntilAlarmExistsMutex.RUnlock()
	return len(fake.waitUntilAlarmExistsArgsForCall)
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsCalls(stub func(*cloudwatch.DescribeAlarmsInput) error) {
	fake.waitUntilAlarmExistsMutex.Lock()
	defer fake.waitUntilAlarmExistsMutex.Unlock()
	fake.WaitUntilAlarmExistsStub = stub
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsArgsForCall(i int) *cloudwatch.DescribeAlarmsInput {
	fake.waitUntilAlarmExistsMutex.RLock()
	defer fake.waitUntilAlarmExistsMutex.RUnlock()
	argsForCall := fake.waitUntilAlarmExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsReturns(result1 error) {
	fake.waitUntilAlarmExistsMutex.Lock()
	defer fake.waitUntilAlarmExistsMutex.Unlock()
	fake.WaitUntilAlarmExistsStub = nil
	fake.waitUntilAlarmExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilAlarmExistsMutex.Lock()
	defer fake.waitUntilAlarmExistsMutex.Unlock()
	fake.WaitUntilAlarmExistsStub = nil
	if fake.waitUntilAlarmExistsReturnsOnCall == nil {
		fake.waitUntilAlarmExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilAlarmExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilAlarmExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilAlarmExistsWithContextReturnsOnCall[len(fake.waitUntilAlarmExistsWithContextArgsForCall)]
	fake.waitUntilAlarmExistsWithContextArgsForCall = append(fake.waitUntilAlarmExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilAlarmExistsWithContextStub
	fakeReturns := fake.waitUntilAlarmExistsWithContextReturns
	fake.recordInvocation("WaitUntilAlarmExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilAlarmExistsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextCallCount() int {
	fake.waitUntilAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilAlarmExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilAlarmExistsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.WaiterOption) error) {
	fake.waitUntilAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilAlarmExistsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsInput, []request.WaiterOption) {
	fake.waitUntilAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilAlarmExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilAlarmExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextReturns(result1 error) {
	fake.waitUntilAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilAlarmExistsWithContextStub = nil
	fake.waitUntilAlarmExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilAlarmExistsWithContextStub = nil
	if fake.waitUntilAlarmExistsWithContextReturnsOnCall == nil {
		fake.waitUntilAlarmExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilAlarmExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExists(arg1 *cloudwatch.DescribeAlarmsInput) error {
	fake.waitUntilCompositeAlarmExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilCompositeAlarmExistsReturnsOnCall[len(fake.waitUntilCompositeAlarmExistsArgsForCall)]
	fake.waitUntilCompositeAlarmExistsArgsForCall = append(fake.waitUntilCompositeAlarmExistsArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}{arg1})
	stub := fake.WaitUntilCompositeAlarmExistsStub
	fakeReturns := fake.waitUntilCompositeAlarmExistsReturns
	fake.recordInvocation("WaitUntilCompositeAlarmExists", []interface{}{arg1})
	fake.waitUntilCompositeAlarmExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsCallCount() int {
	fake.waitUntilCompositeAlarmExistsMutex.RLock()
	defer fake.waitUntilCompositeAlarmExistsMutex.RUnlock()
	return len(fake.waitUntilCompositeAlarmExistsArgsForCall)
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsCalls(stub func(*cloudwatch.DescribeAlarmsInput) error) {
	fake.waitUntilCompositeAlarmExistsMutex.Lock()
	defer fake.waitUntilCompositeAlarmExistsMutex.Unlock()
	fake.WaitUntilCompositeAlarmExistsStub = stub
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsArgsForCall(i int) *cloudwatch.DescribeAlarmsInput {
	fake.waitUntilCompositeAlarmExistsMutex.RLock()
	defer fake.waitUntilCompositeAlarmExistsMutex.RUnlock()
	argsForCall := fake.waitUntilCompositeAlarmExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsReturns(result1 error) {
	fake.waitUntilCompositeAlarmExistsMutex.Lock()
	defer fake.waitUntilCompositeAlarmExistsMutex.Unlock()
	fake.WaitUntilCompositeAlarmExistsStub = nil
	fake.waitUntilCompositeAlarmExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilCompositeAlarmExistsMutex.Lock()
	defer fake.waitUntilCompositeAlarmExistsMutex.Unlock()
	fake.WaitUntilCompositeAlarmExistsStub = nil
	if fake.waitUntilCompositeAlarmExistsReturnsOnCall == nil {
		fake.waitUntilCompositeAlarmExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCompositeAlarmExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilCompositeAlarmExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilCompositeAlarmExistsWithContextReturnsOnCall[len(fake.waitUntilCompositeAlarmExistsWithContextArgsForCall)]
	fake.waitUntilCompositeAlarmExistsWithContextArgsForCall = append(fake.waitUntilCompositeAlarmExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilCompositeAlarmExistsWithContextStub
	fakeReturns := fake.waitUntilCompositeAlarmExistsWithContextReturns
	fake.recordInvocation("WaitUntilCompositeAlarmExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilCompositeAlarmExistsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsWithContextCallCount() int {
	fake.waitUntilCompositeAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilCompositeAlarmExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilCompositeAlarmExistsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.WaiterOption) error) {
	fake.waitUntilCompositeAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilCompositeAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilCompositeAlarmExistsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsInput, []request.WaiterOption) {
	fake.waitUntilCompositeAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilCompositeAlarmExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilCompositeAlarmExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsWithContextReturns(result1 error) {
	fake.waitUntilCompositeAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilCompositeAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilCompositeAlarmExistsWithContextStub = nil
	fake.waitUntilCompositeAlarmExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilCompositeAlarmExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilCompositeAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilCompositeAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilCompositeAlarmExistsWithContextStub = nil
	if fake.waitUntilCompositeAlarmExistsWithContextReturnsOnCall == nil {
		fake.waitUntilCompositeAlarmExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCompositeAlarmExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteAlarmsMutex.RLock()
	defer fake.deleteAlarmsMutex.RUnlock()
	fake.deleteAlarmsRequestMutex.RLock()
	defer fake.deleteAlarmsRequestMutex.RUnlock()
	fake.deleteAlarmsWithContextMutex.RLock()
	defer fake.deleteAlarmsWithContextMutex.RUnlock()
	fake.deleteAnomalyDetectorMutex.RLock()
	defer fake.deleteAnomalyDetectorMutex.RUnlock()
	fake.deleteAnomalyDetectorRequestMutex.RLock()
	defer fake.deleteAnomalyDetectorRequestMutex.RUnlock()
	fake.deleteAnomalyDetectorWithContextMutex.RLock()
	defer fake.deleteAnomalyDetectorWithContextMutex.RUnlock()
	fake.deleteDashboardsMutex.RLock()
	defer fake.deleteDashboardsMutex.RUnlock()
	fake.deleteDashboardsRequestMutex.RLock()
	defer fake.deleteDashboardsRequestMutex.RUnlock()
	fake.deleteDashboardsWithContextMutex.RLock()
	defer fake.deleteDashboardsWithContextMutex.RUnlock()
	fake.deleteInsightRulesMutex.RLock()
	defer fake.deleteInsightRulesMutex.RUnlock()
	fake.deleteInsightRulesRequestMutex.RLock()
	defer fake.deleteInsightRulesRequestMutex.RUnlock()
	fake.deleteInsightRulesWithContextMutex.RLock()
	defer fake.deleteInsightRulesWithContextMutex.RUnlock()
	fake.deleteMetricStreamMutex.RLock()
	defer fake.deleteMetricStreamMutex.RUnlock()
	fake.deleteMetricStreamRequestMutex.RLock()
	defer fake.deleteMetricStreamRequestMutex.RUnlock()
	fake.deleteMetricStreamWithContextMutex.RLock()
	defer fake.deleteMetricStreamWithContextMutex.RUnlock()
	fake.describeAlarmHistoryMutex.RLock()
	defer fake.describeAlarmHistoryMutex.RUnlock()
	fake.describeAlarmHistoryPagesMutex.RLock()
	defer fake.describeAlarmHistoryPagesMutex.RUnlock()
	fake.describeAlarmHistoryPagesWithContextMutex.RLock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.RUnlock()
	fake.describeAlarmHistoryRequestMutex.RLock()
	defer fake.describeAlarmHistoryRequestMutex.RUnlock()
	fake.describeAlarmHistoryWithContextMutex.RLock()
	defer fake.describeAlarmHistoryWithContextMutex.RUnlock()
	fake.describeAlarmsMutex.RLock()
	defer fake.describeAlarmsMutex.RUnlock()
	fake.describeAlarmsForMetricMutex.RLock()
	defer fake.describeAlarmsForMetricMutex.RUnlock()
	fake.describeAlarmsForMetricRequestMutex.RLock()
	defer fake.describeAlarmsForMetricRequestMutex.RUnlock()
	fake.describeAlarmsForMetricWithContextMutex.RLock()
	defer fake.describeAlarmsForMetricWithContextMutex.RUnlock()
	fake.describeAlarmsPagesMutex.RLock()
	defer fake.describeAlarmsPagesMutex.RUnlock()
	fake.describeAlarmsPagesWithContextMutex.RLock()
	defer fake.describeAlarmsPagesWithContextMutex.RUnlock()
	fake.describeAlarmsRequestMutex.RLock()
	defer fake.describeAlarmsRequestMutex.RUnlock()
	fake.describeAlarmsWithContextMutex.RLock()
	defer fake.describeAlarmsWithContextMutex.RUnlock()
	fake.describeAnomalyDetectorsMutex.RLock()
	defer fake.describeAnomalyDetectorsMutex.RUnlock()
	fake.describeAnomalyDetectorsPagesMutex.RLock()
	defer fake.describeAnomalyDetectorsPagesMutex.RUnlock()
	fake.describeAnomalyDetectorsPagesWithContextMutex.RLock()
	defer fake.describeAnomalyDetectorsPagesWithContextMutex.RUnlock()
	fake.describeAnomalyDetectorsRequestMutex.RLock()
	defer fake.describeAnomalyDetectorsRequestMutex.RUnlock()
	fake.describeAnomalyDetectorsWithContextMutex.RLock()
	defer fake.describeAnomalyDetectorsWithContextMutex.RUnlock()
	fake.describeInsightRulesMutex.RLock()
	defer fake.describeInsightRulesMutex.RUnlock()
	fake.describeInsightRulesPagesMutex.RLock()
	defer fake.describeInsightRulesPagesMutex.RUnlock()
	fake.describeInsightRulesPagesWithContextMutex.RLock()
	defer fake.describeInsightRulesPagesWithContextMutex.RUnlock()
	fake.describeInsightRulesRequestMutex.RLock()
	defer fake.describeInsightRulesRequestMutex.RUnlock()
	fake.describeInsightRulesWithContextMutex.RLock()
	defer fake.describeInsightRulesWithContextMutex.RUnlock()
	fake.disableAlarmActionsMutex.RLock()
	defer fake.disableAlarmActionsMutex.RUnlock()
	fake.disableAlarmActionsRequestMutex.RLock()
	defer fake.disableAlarmActionsRequestMutex.RUnlock()
	fake.disableAlarmActionsWithContextMutex.RLock()
	defer fake.disableAlarmActionsWithContextMutex.RUnlock()
	fake.disableInsightRulesMutex.RLock()
	defer fake.disableInsightRulesMutex.RUnlock()
	fake.disableInsightRulesRequestMutex.RLock()
	defer fake.disableInsightRulesRequestMutex.RUnlock()
	fake.disableInsightRulesWithContextMutex.RLock()
	defer fake.disableInsightRulesWithContextMutex.RUnlock()
	fake.enableAlarmActionsMutex.RLock()
	defer fake.enableAlarmActionsMutex.RUnlock()
	fake.enableAlarmActionsRequestMutex.RLock()
	defer fake.enableAlarmActionsRequestMutex.RUnlock()
	fake.enableAlarmActionsWithContextMutex.RLock()
	defer fake.enableAlarmActionsWithContextMutex.RUnlock()
	fake.enableInsightRulesMutex.RLock()
	defer fake.enableInsightRulesMutex.RUnlock()
	fake.enableInsightRulesRequestMutex.RLock()
	defer fake.enableInsightRulesRequestMutex.RUnlock()
	fake.enableInsightRulesWithContextMutex.RLock()
	defer fake.enableInsightRulesWithContextMutex.RUnlock()
	fake.getDashboardMutex.RLock()
	defer fake.getDashboardMutex.RUnlock()
	fake.getDashboardRequestMutex.RLock()
	defer fake.getDashboardRequestMutex.RUnlock()
	fake.getDashboardWithContextMutex.RLock()
	defer fake.getDashboardWithContextMutex.RUnlock()
	fake.getInsightRuleReportMutex.RLock()
	defer fake.getInsightRuleReportMutex.RUnlock()
	fake.getInsightRuleReportRequestMutex.RLock()
	defer fake.getInsightRuleReportRequestMutex.RUnlock()
	fake.getInsightRuleReportWithContextMutex.RLock()
	defer fake.getInsightRuleReportWithContextMutex.RUnlock()
	fake.getMetricDataMutex.RLock()
	defer fake.getMetricDataMutex.RUnlock()
	fake.getMetricDataPagesMutex.RLock()
	defer fake.getMetricDataPagesMutex.RUnlock()
	fake.getMetricDataPagesWithContextMutex.RLock()
	defer fake.getMetricDataPagesWithContextMutex.RUnlock()
	fake.getMetricDataRequestMutex.RLock()
	defer fake.getMetricDataRequestMutex.RUnlock()
	fake.getMetricDataWithContextMutex.RLock()
	defer fake.getMetricDataWithContextMutex.RUnlock()
	fake.getMetricStatisticsMutex.RLock()
	defer fake.getMetricStatisticsMutex.RUnlock()
	fake.getMetricStatisticsRequestMutex.RLock()
	defer fake.getMetricStatisticsRequestMutex.RUnlock()
	fake.getMetricStatisticsWithContextMutex.RLock()
	defer fake.getMetricStatisticsWithContextMutex.RUnlock()
	fake.getMetricStreamMutex.RLock()
	defer fake.getMetricStreamMutex.RUnlock()
	fake.getMetricStreamRequestMutex.RLock()
	defer fake.getMetricStreamRequestMutex.RUnlock()
	fake.getMetricStreamWithContextMutex.RLock()
	defer fake.getMetricStreamWithContextMutex.RUnlock()
	fake.getMetricWidgetImageMutex.RLock()
	defer fake.getMetricWidgetImageMutex.RUnlock()
	fake.getMetricWidgetImageRequestMutex.RLock()
	defer fake.getMetricWidgetImageRequestMutex.RUnlock()
	fake.getMetricWidgetImageWithContextMutex.RLock()
	defer fake.getMetricWidgetImageWithContextMutex.RUnlock()
	fake.listDashboardsMutex.RLock()
	defer fake.listDashboardsMutex.RUnlock()
	fake.listDashboardsPagesMutex.RLock()
	defer fake.listDashboardsPagesMutex.RUnlock()
	fake.listDashboardsPagesWithContextMutex.RLock()
	defer fake.listDashboardsPagesWithContextMutex.RUnlock()
	fake.listDashboardsRequestMutex.RLock()
	defer fake.listDashboardsRequestMutex.RUnlock()
	fake.listDashboardsWithContextMutex.RLock()
	defer fake.listDashboardsWithContextMutex.RUnlock()
	fake.listManagedInsightRulesMutex.RLock()
	defer fake.listManagedInsightRulesMutex.RUnlock()
	fake.listManagedInsightRulesPagesMutex.RLock()
	defer fake.listManagedInsightRulesPagesMutex.RUnlock()
	fake.listManagedInsightRulesPagesWithContextMutex.RLock()
	defer fake.listManagedInsightRulesPagesWithContextMutex.RUnlock()
	fake.listManagedInsightRulesRequestMutex.RLock()
	defer fake.listManagedInsightRulesRequestMutex.RUnlock()
	fake.listManagedInsightRulesWithContextMutex.RLock()
	defer fake.listManagedInsightRulesWithContextMutex.RUnlock()
	fake.listMetricStreamsMutex.RLock()
	defer fake.listMetricStreamsMutex.RUnlock()
	fake.listMetricStreamsPagesMutex.RLock()
	defer fake.listMetricStreamsPagesMutex.RUnlock()
	fake.listMetricStreamsPagesWithContextMutex.RLock()
	defer fake.listMetricStreamsPagesWithContextMutex.RUnlock()
	fake.listMetricStreamsRequestMutex.RLock()
	defer fake.listMetricStreamsRequestMutex.RUnlock()
	fake.listMetricStreamsWithContextMutex.RLock()
	defer fake.listMetricStreamsWithContextMutex.RUnlock()
	fake.listMetricsMutex.RLock()
	defer fake.listMetricsMutex.RUnlock()
	fake.listMetricsPagesMutex.RLock()
	defer fake.listMetricsPagesMutex.RUnlock()
	fake.listMetricsPagesWithContextMutex.RLock()
	defer fake.listMetricsPagesWithContextMutex.RUnlock()
	fake.listMetricsRequestMutex.RLock()
	defer fake.listMetricsRequestMutex.RUnlock()
	fake.listMetricsWithContextMutex.RLock()
	defer fake.listMetricsWithContextMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.putAnomalyDetectorMutex.RLock()
	defer fake.putAnomalyDetectorMutex.RUnlock()
	fake.putAnomalyDetectorRequestMutex.RLock()
	defer fake.putAnomalyDetectorRequestMutex.RUnlock()
	fake.putAnomalyDetectorWithContextMutex.RLock()
	defer fake.putAnomalyDetectorWithContextMutex.RUnlock()
	fake.putCompositeAlarmMutex.RLock()
	defer fake.putCompositeAlarmMutex.RUnlock()
	fake.putCompositeAlarmRequestMutex.RLock()
	defer fake.putCompositeAlarmRequestMutex.RUnlock()
	fake.putCompositeAlarmWithContextMutex.RLock()
	defer fake.putCompositeAlarmWithContextMutex.RUnlock()
	fake.putDashboardMutex.RLock()
	defer fake.putDashboardMutex.RUnlock()
	fake.putDashboardRequestMutex.RLock()
	defer fake.putDashboardRequestMutex.RUnlock()
	fake.putDashboardWithContextMutex.RLock()
	defer fake.putDashboardWithContextMutex.RUnlock()
	fake.putInsightRuleMutex.RLock()
	defer fake.putInsightRuleMutex.RUnlock()
	fake.putInsightRuleRequestMutex.RLock()
	defer fake.putInsightRuleRequestMutex.RUnlock()
	fake.putInsightRuleWithContextMutex.RLock()
	defer fake.putInsightRuleWithContextMutex.RUnlock()
	fake.putManagedInsightRulesMutex.RLock()
	defer fake.putManagedInsightRulesMutex.RUnlock()
	fake.putManagedInsightRulesRequestMutex.RLock()
	defer fake.putManagedInsightRulesRequestMutex.RUnlock()
	fake.putManagedInsightRulesWithContextMutex.RLock()
	defer fake.putManagedInsightRulesWithContextMutex.RUnlock()
	fake.putMetricAlarmMutex.RLock()
	defer fake.putMetricAlarmMutex.RUnlock()
	fake.putMetricAlarmRequestMutex.RLock()
	defer fake.putMetricAlarmRequestMutex.RUnlock()
	fake.putMetricAlarmWithContextMutex.RLock()
	defer fake.putMetricAlarmWithContextMutex.RUnlock()
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	fake.putMetricDataRequestMutex.RLock()
	defer fake.putMetricDataRequestMutex.RUnlock()
	fake.putMetricDataWithContextMutex.RLock()
	defer fake.putMetricDataWithContextMutex.RUnlock()
	fake.putMetricStreamMutex.RLock()
	defer fake.putMetricStreamMutex.RUnlock()
	fake.putMetricStreamRequestMutex.RLock()
	defer fake.putMetricStreamRequestMutex.RUnlock()
	fake.putMetricStreamWithContextMutex.RLock()
	defer fake.putMetricStreamWithContextMutex.RUnlock()
	fake.setAlarmStateMutex.RLock()
	defer fake.setAlarmStateMutex.RUnlock()
	fake.setAlarmStateRequestMutex.RLock()
	defer fake.setAlarmStateRequestMutex.RUnlock()
	fake.setAlarmStateWithContextMutex.RLock()
	defer fake.setAlarmStateWithContextMutex.RUnlock()
	fake.startMetricStreamsMutex.RLock()
	defer fake.startMetricStreamsMutex.RUnlock()
	fake.startMetricStreamsRequestMutex.RLock()
	defer fake.startMetricStreamsRequestMutex.RUnlock()
	fake.startMetricStreamsWithContextMutex.RLock()
	defer fake.startMetricStreamsWithContextMutex.RUnlock()
	fake.stopMetricStreamsMutex.RLock()
	defer fake.stopMetricStreamsMutex.RUnlock()
	fake.stopMetricStreamsRequestMutex.RLock()
	defer fake.stopMetricStreamsRequestMutex.RUnlock()
	fake.stopMetricStreamsWithContextMutex.RLock()
	defer fake.stopMetricStreamsWithContextMutex.RUnlock()
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	fake.waitUntilAlarmExistsMutex.RLock()
	defer fake.waitUntilAlarmExistsMutex.RUnlock()
	fake.waitUntilAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilAlarmExistsWithContextMutex.RUnlock()
	fake.waitUntilCompositeAlarmExistsMutex.RLock()
	defer fake.waitUntilCompositeAlarmExistsMutex.RUnlock()
	fake.waitUntilCompositeAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilCompositeAlarmExistsWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudWatchAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudwatchiface.CloudWatchAPI = new(FakeCloudWatchAPI)
